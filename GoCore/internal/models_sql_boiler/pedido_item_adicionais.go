// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// PedidoItemAdicionais is an object representing the database table.
type PedidoItemAdicionais struct {
	ID               string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	SeqID            int64         `boil:"seq_id" json:"seq_id" toml:"seq_id" yaml:"seq_id"`
	IDPedidoItem     string        `boil:"id_pedido_item" json:"id_pedido_item" toml:"id_pedido_item" yaml:"id_pedido_item"`
	IDAdicionalOpcao string        `boil:"id_adicional_opcao" json:"id_adicional_opcao" toml:"id_adicional_opcao" yaml:"id_adicional_opcao"`
	Valor            types.Decimal `boil:"valor" json:"valor" toml:"valor" yaml:"valor"`
	Quantidade       int           `boil:"quantidade" json:"quantidade" toml:"quantidade" yaml:"quantidade"`
	CreatedAt        time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt        null.Time     `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *pedidoItemAdicionaisR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pedidoItemAdicionaisL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PedidoItemAdicionaisColumns = struct {
	ID               string
	SeqID            string
	IDPedidoItem     string
	IDAdicionalOpcao string
	Valor            string
	Quantidade       string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "id",
	SeqID:            "seq_id",
	IDPedidoItem:     "id_pedido_item",
	IDAdicionalOpcao: "id_adicional_opcao",
	Valor:            "valor",
	Quantidade:       "quantidade",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	DeletedAt:        "deleted_at",
}

var PedidoItemAdicionaisTableColumns = struct {
	ID               string
	SeqID            string
	IDPedidoItem     string
	IDAdicionalOpcao string
	Valor            string
	Quantidade       string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "pedido_item_adicionais.id",
	SeqID:            "pedido_item_adicionais.seq_id",
	IDPedidoItem:     "pedido_item_adicionais.id_pedido_item",
	IDAdicionalOpcao: "pedido_item_adicionais.id_adicional_opcao",
	Valor:            "pedido_item_adicionais.valor",
	Quantidade:       "pedido_item_adicionais.quantidade",
	CreatedAt:        "pedido_item_adicionais.created_at",
	UpdatedAt:        "pedido_item_adicionais.updated_at",
	DeletedAt:        "pedido_item_adicionais.deleted_at",
}

// Generated where

var PedidoItemAdicionaisWhere = struct {
	ID               whereHelperstring
	SeqID            whereHelperint64
	IDPedidoItem     whereHelperstring
	IDAdicionalOpcao whereHelperstring
	Valor            whereHelpertypes_Decimal
	Quantidade       whereHelperint
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	DeletedAt        whereHelpernull_Time
}{
	ID:               whereHelperstring{field: "\"pedido_item_adicionais\".\"id\""},
	SeqID:            whereHelperint64{field: "\"pedido_item_adicionais\".\"seq_id\""},
	IDPedidoItem:     whereHelperstring{field: "\"pedido_item_adicionais\".\"id_pedido_item\""},
	IDAdicionalOpcao: whereHelperstring{field: "\"pedido_item_adicionais\".\"id_adicional_opcao\""},
	Valor:            whereHelpertypes_Decimal{field: "\"pedido_item_adicionais\".\"valor\""},
	Quantidade:       whereHelperint{field: "\"pedido_item_adicionais\".\"quantidade\""},
	CreatedAt:        whereHelpertime_Time{field: "\"pedido_item_adicionais\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"pedido_item_adicionais\".\"updated_at\""},
	DeletedAt:        whereHelpernull_Time{field: "\"pedido_item_adicionais\".\"deleted_at\""},
}

// PedidoItemAdicionaisRels is where relationship names are stored.
var PedidoItemAdicionaisRels = struct {
	IDAdicionalOpcaoCategoriaAdicionalOpco string
	IDPedidoItemPedidoIten                 string
}{
	IDAdicionalOpcaoCategoriaAdicionalOpco: "IDAdicionalOpcaoCategoriaAdicionalOpco",
	IDPedidoItemPedidoIten:                 "IDPedidoItemPedidoIten",
}

// pedidoItemAdicionaisR is where relationships are stored.
type pedidoItemAdicionaisR struct {
	IDAdicionalOpcaoCategoriaAdicionalOpco *CategoriaAdicionalOpcao `boil:"IDAdicionalOpcaoCategoriaAdicionalOpco" json:"IDAdicionalOpcaoCategoriaAdicionalOpco" toml:"IDAdicionalOpcaoCategoriaAdicionalOpco" yaml:"IDAdicionalOpcaoCategoriaAdicionalOpco"`
	IDPedidoItemPedidoIten                 *PedidoIten              `boil:"IDPedidoItemPedidoIten" json:"IDPedidoItemPedidoIten" toml:"IDPedidoItemPedidoIten" yaml:"IDPedidoItemPedidoIten"`
}

// NewStruct creates a new relationship struct
func (*pedidoItemAdicionaisR) NewStruct() *pedidoItemAdicionaisR {
	return &pedidoItemAdicionaisR{}
}

func (r *pedidoItemAdicionaisR) GetIDAdicionalOpcaoCategoriaAdicionalOpco() *CategoriaAdicionalOpcao {
	if r == nil {
		return nil
	}
	return r.IDAdicionalOpcaoCategoriaAdicionalOpco
}

func (r *pedidoItemAdicionaisR) GetIDPedidoItemPedidoIten() *PedidoIten {
	if r == nil {
		return nil
	}
	return r.IDPedidoItemPedidoIten
}

// pedidoItemAdicionaisL is where Load methods for each relationship are stored.
type pedidoItemAdicionaisL struct{}

var (
	pedidoItemAdicionaisAllColumns            = []string{"id", "seq_id", "id_pedido_item", "id_adicional_opcao", "valor", "quantidade", "created_at", "updated_at", "deleted_at"}
	pedidoItemAdicionaisColumnsWithoutDefault = []string{"id_pedido_item", "id_adicional_opcao", "valor", "quantidade"}
	pedidoItemAdicionaisColumnsWithDefault    = []string{"id", "seq_id", "created_at", "updated_at", "deleted_at"}
	pedidoItemAdicionaisPrimaryKeyColumns     = []string{"id"}
	pedidoItemAdicionaisGeneratedColumns      = []string{}
)

type (
	// PedidoItemAdicionaisSlice is an alias for a slice of pointers to PedidoItemAdicionais.
	// This should almost always be used instead of []PedidoItemAdicionais.
	PedidoItemAdicionaisSlice []*PedidoItemAdicionais
	// PedidoItemAdicionaisHook is the signature for custom PedidoItemAdicionais hook methods
	PedidoItemAdicionaisHook func(context.Context, boil.ContextExecutor, *PedidoItemAdicionais) error

	pedidoItemAdicionaisQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pedidoItemAdicionaisType                 = reflect.TypeOf(&PedidoItemAdicionais{})
	pedidoItemAdicionaisMapping              = queries.MakeStructMapping(pedidoItemAdicionaisType)
	pedidoItemAdicionaisPrimaryKeyMapping, _ = queries.BindMapping(pedidoItemAdicionaisType, pedidoItemAdicionaisMapping, pedidoItemAdicionaisPrimaryKeyColumns)
	pedidoItemAdicionaisInsertCacheMut       sync.RWMutex
	pedidoItemAdicionaisInsertCache          = make(map[string]insertCache)
	pedidoItemAdicionaisUpdateCacheMut       sync.RWMutex
	pedidoItemAdicionaisUpdateCache          = make(map[string]updateCache)
	pedidoItemAdicionaisUpsertCacheMut       sync.RWMutex
	pedidoItemAdicionaisUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pedidoItemAdicionaisAfterSelectMu sync.Mutex
var pedidoItemAdicionaisAfterSelectHooks []PedidoItemAdicionaisHook

var pedidoItemAdicionaisBeforeInsertMu sync.Mutex
var pedidoItemAdicionaisBeforeInsertHooks []PedidoItemAdicionaisHook
var pedidoItemAdicionaisAfterInsertMu sync.Mutex
var pedidoItemAdicionaisAfterInsertHooks []PedidoItemAdicionaisHook

var pedidoItemAdicionaisBeforeUpdateMu sync.Mutex
var pedidoItemAdicionaisBeforeUpdateHooks []PedidoItemAdicionaisHook
var pedidoItemAdicionaisAfterUpdateMu sync.Mutex
var pedidoItemAdicionaisAfterUpdateHooks []PedidoItemAdicionaisHook

var pedidoItemAdicionaisBeforeDeleteMu sync.Mutex
var pedidoItemAdicionaisBeforeDeleteHooks []PedidoItemAdicionaisHook
var pedidoItemAdicionaisAfterDeleteMu sync.Mutex
var pedidoItemAdicionaisAfterDeleteHooks []PedidoItemAdicionaisHook

var pedidoItemAdicionaisBeforeUpsertMu sync.Mutex
var pedidoItemAdicionaisBeforeUpsertHooks []PedidoItemAdicionaisHook
var pedidoItemAdicionaisAfterUpsertMu sync.Mutex
var pedidoItemAdicionaisAfterUpsertHooks []PedidoItemAdicionaisHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PedidoItemAdicionais) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItemAdicionaisAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PedidoItemAdicionais) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItemAdicionaisBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PedidoItemAdicionais) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItemAdicionaisAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PedidoItemAdicionais) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItemAdicionaisBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PedidoItemAdicionais) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItemAdicionaisAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PedidoItemAdicionais) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItemAdicionaisBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PedidoItemAdicionais) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItemAdicionaisAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PedidoItemAdicionais) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItemAdicionaisBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PedidoItemAdicionais) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItemAdicionaisAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPedidoItemAdicionaisHook registers your hook function for all future operations.
func AddPedidoItemAdicionaisHook(hookPoint boil.HookPoint, pedidoItemAdicionaisHook PedidoItemAdicionaisHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		pedidoItemAdicionaisAfterSelectMu.Lock()
		pedidoItemAdicionaisAfterSelectHooks = append(pedidoItemAdicionaisAfterSelectHooks, pedidoItemAdicionaisHook)
		pedidoItemAdicionaisAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		pedidoItemAdicionaisBeforeInsertMu.Lock()
		pedidoItemAdicionaisBeforeInsertHooks = append(pedidoItemAdicionaisBeforeInsertHooks, pedidoItemAdicionaisHook)
		pedidoItemAdicionaisBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		pedidoItemAdicionaisAfterInsertMu.Lock()
		pedidoItemAdicionaisAfterInsertHooks = append(pedidoItemAdicionaisAfterInsertHooks, pedidoItemAdicionaisHook)
		pedidoItemAdicionaisAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		pedidoItemAdicionaisBeforeUpdateMu.Lock()
		pedidoItemAdicionaisBeforeUpdateHooks = append(pedidoItemAdicionaisBeforeUpdateHooks, pedidoItemAdicionaisHook)
		pedidoItemAdicionaisBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		pedidoItemAdicionaisAfterUpdateMu.Lock()
		pedidoItemAdicionaisAfterUpdateHooks = append(pedidoItemAdicionaisAfterUpdateHooks, pedidoItemAdicionaisHook)
		pedidoItemAdicionaisAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		pedidoItemAdicionaisBeforeDeleteMu.Lock()
		pedidoItemAdicionaisBeforeDeleteHooks = append(pedidoItemAdicionaisBeforeDeleteHooks, pedidoItemAdicionaisHook)
		pedidoItemAdicionaisBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		pedidoItemAdicionaisAfterDeleteMu.Lock()
		pedidoItemAdicionaisAfterDeleteHooks = append(pedidoItemAdicionaisAfterDeleteHooks, pedidoItemAdicionaisHook)
		pedidoItemAdicionaisAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		pedidoItemAdicionaisBeforeUpsertMu.Lock()
		pedidoItemAdicionaisBeforeUpsertHooks = append(pedidoItemAdicionaisBeforeUpsertHooks, pedidoItemAdicionaisHook)
		pedidoItemAdicionaisBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		pedidoItemAdicionaisAfterUpsertMu.Lock()
		pedidoItemAdicionaisAfterUpsertHooks = append(pedidoItemAdicionaisAfterUpsertHooks, pedidoItemAdicionaisHook)
		pedidoItemAdicionaisAfterUpsertMu.Unlock()
	}
}

// One returns a single pedidoItemAdicionais record from the query.
func (q pedidoItemAdicionaisQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PedidoItemAdicionais, error) {
	o := &PedidoItemAdicionais{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for pedido_item_adicionais")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PedidoItemAdicionais records from the query.
func (q pedidoItemAdicionaisQuery) All(ctx context.Context, exec boil.ContextExecutor) (PedidoItemAdicionaisSlice, error) {
	var o []*PedidoItemAdicionais

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to PedidoItemAdicionais slice")
	}

	if len(pedidoItemAdicionaisAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PedidoItemAdicionais records in the query.
func (q pedidoItemAdicionaisQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count pedido_item_adicionais rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pedidoItemAdicionaisQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if pedido_item_adicionais exists")
	}

	return count > 0, nil
}

// IDAdicionalOpcaoCategoriaAdicionalOpco pointed to by the foreign key.
func (o *PedidoItemAdicionais) IDAdicionalOpcaoCategoriaAdicionalOpco(mods ...qm.QueryMod) categoriaAdicionalOpcaoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDAdicionalOpcao),
	}

	queryMods = append(queryMods, mods...)

	return CategoriaAdicionalOpcoes(queryMods...)
}

// IDPedidoItemPedidoIten pointed to by the foreign key.
func (o *PedidoItemAdicionais) IDPedidoItemPedidoIten(mods ...qm.QueryMod) pedidoItenQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDPedidoItem),
	}

	queryMods = append(queryMods, mods...)

	return PedidoItens(queryMods...)
}

// LoadIDAdicionalOpcaoCategoriaAdicionalOpco allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pedidoItemAdicionaisL) LoadIDAdicionalOpcaoCategoriaAdicionalOpco(ctx context.Context, e boil.ContextExecutor, singular bool, maybePedidoItemAdicionais interface{}, mods queries.Applicator) error {
	var slice []*PedidoItemAdicionais
	var object *PedidoItemAdicionais

	if singular {
		var ok bool
		object, ok = maybePedidoItemAdicionais.(*PedidoItemAdicionais)
		if !ok {
			object = new(PedidoItemAdicionais)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePedidoItemAdicionais)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePedidoItemAdicionais))
			}
		}
	} else {
		s, ok := maybePedidoItemAdicionais.(*[]*PedidoItemAdicionais)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePedidoItemAdicionais)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePedidoItemAdicionais))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pedidoItemAdicionaisR{}
		}
		args[object.IDAdicionalOpcao] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pedidoItemAdicionaisR{}
			}

			args[obj.IDAdicionalOpcao] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categoria_adicional_opcoes`),
		qm.WhereIn(`categoria_adicional_opcoes.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CategoriaAdicionalOpcao")
	}

	var resultSlice []*CategoriaAdicionalOpcao
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CategoriaAdicionalOpcao")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categoria_adicional_opcoes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categoria_adicional_opcoes")
	}

	if len(categoriaAdicionalOpcaoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDAdicionalOpcaoCategoriaAdicionalOpco = foreign
		if foreign.R == nil {
			foreign.R = &categoriaAdicionalOpcaoR{}
		}
		foreign.R.IDAdicionalOpcaoPedidoItemAdicionais = append(foreign.R.IDAdicionalOpcaoPedidoItemAdicionais, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDAdicionalOpcao == foreign.ID {
				local.R.IDAdicionalOpcaoCategoriaAdicionalOpco = foreign
				if foreign.R == nil {
					foreign.R = &categoriaAdicionalOpcaoR{}
				}
				foreign.R.IDAdicionalOpcaoPedidoItemAdicionais = append(foreign.R.IDAdicionalOpcaoPedidoItemAdicionais, local)
				break
			}
		}
	}

	return nil
}

// LoadIDPedidoItemPedidoIten allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pedidoItemAdicionaisL) LoadIDPedidoItemPedidoIten(ctx context.Context, e boil.ContextExecutor, singular bool, maybePedidoItemAdicionais interface{}, mods queries.Applicator) error {
	var slice []*PedidoItemAdicionais
	var object *PedidoItemAdicionais

	if singular {
		var ok bool
		object, ok = maybePedidoItemAdicionais.(*PedidoItemAdicionais)
		if !ok {
			object = new(PedidoItemAdicionais)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePedidoItemAdicionais)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePedidoItemAdicionais))
			}
		}
	} else {
		s, ok := maybePedidoItemAdicionais.(*[]*PedidoItemAdicionais)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePedidoItemAdicionais)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePedidoItemAdicionais))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pedidoItemAdicionaisR{}
		}
		args[object.IDPedidoItem] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pedidoItemAdicionaisR{}
			}

			args[obj.IDPedidoItem] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`pedido_itens`),
		qm.WhereIn(`pedido_itens.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PedidoIten")
	}

	var resultSlice []*PedidoIten
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PedidoIten")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pedido_itens")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pedido_itens")
	}

	if len(pedidoItenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDPedidoItemPedidoIten = foreign
		if foreign.R == nil {
			foreign.R = &pedidoItenR{}
		}
		foreign.R.IDPedidoItemPedidoItemAdicionais = append(foreign.R.IDPedidoItemPedidoItemAdicionais, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDPedidoItem == foreign.ID {
				local.R.IDPedidoItemPedidoIten = foreign
				if foreign.R == nil {
					foreign.R = &pedidoItenR{}
				}
				foreign.R.IDPedidoItemPedidoItemAdicionais = append(foreign.R.IDPedidoItemPedidoItemAdicionais, local)
				break
			}
		}
	}

	return nil
}

// SetIDAdicionalOpcaoCategoriaAdicionalOpco of the pedidoItemAdicionais to the related item.
// Sets o.R.IDAdicionalOpcaoCategoriaAdicionalOpco to related.
// Adds o to related.R.IDAdicionalOpcaoPedidoItemAdicionais.
func (o *PedidoItemAdicionais) SetIDAdicionalOpcaoCategoriaAdicionalOpco(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CategoriaAdicionalOpcao) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pedido_item_adicionais\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_adicional_opcao"}),
		strmangle.WhereClause("\"", "\"", 2, pedidoItemAdicionaisPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDAdicionalOpcao = related.ID
	if o.R == nil {
		o.R = &pedidoItemAdicionaisR{
			IDAdicionalOpcaoCategoriaAdicionalOpco: related,
		}
	} else {
		o.R.IDAdicionalOpcaoCategoriaAdicionalOpco = related
	}

	if related.R == nil {
		related.R = &categoriaAdicionalOpcaoR{
			IDAdicionalOpcaoPedidoItemAdicionais: PedidoItemAdicionaisSlice{o},
		}
	} else {
		related.R.IDAdicionalOpcaoPedidoItemAdicionais = append(related.R.IDAdicionalOpcaoPedidoItemAdicionais, o)
	}

	return nil
}

// SetIDPedidoItemPedidoIten of the pedidoItemAdicionais to the related item.
// Sets o.R.IDPedidoItemPedidoIten to related.
// Adds o to related.R.IDPedidoItemPedidoItemAdicionais.
func (o *PedidoItemAdicionais) SetIDPedidoItemPedidoIten(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PedidoIten) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pedido_item_adicionais\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_pedido_item"}),
		strmangle.WhereClause("\"", "\"", 2, pedidoItemAdicionaisPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDPedidoItem = related.ID
	if o.R == nil {
		o.R = &pedidoItemAdicionaisR{
			IDPedidoItemPedidoIten: related,
		}
	} else {
		o.R.IDPedidoItemPedidoIten = related
	}

	if related.R == nil {
		related.R = &pedidoItenR{
			IDPedidoItemPedidoItemAdicionais: PedidoItemAdicionaisSlice{o},
		}
	} else {
		related.R.IDPedidoItemPedidoItemAdicionais = append(related.R.IDPedidoItemPedidoItemAdicionais, o)
	}

	return nil
}

// PedidoItemAdicionais retrieves all the records using an executor.
func PedidoItemAdicionais(mods ...qm.QueryMod) pedidoItemAdicionaisQuery {
	mods = append(mods, qm.From("\"pedido_item_adicionais\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"pedido_item_adicionais\".*"})
	}

	return pedidoItemAdicionaisQuery{q}
}

// FindPedidoItemAdicionais retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPedidoItemAdicionais(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*PedidoItemAdicionais, error) {
	pedidoItemAdicionaisObj := &PedidoItemAdicionais{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pedido_item_adicionais\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pedidoItemAdicionaisObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from pedido_item_adicionais")
	}

	if err = pedidoItemAdicionaisObj.doAfterSelectHooks(ctx, exec); err != nil {
		return pedidoItemAdicionaisObj, err
	}

	return pedidoItemAdicionaisObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PedidoItemAdicionais) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no pedido_item_adicionais provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pedidoItemAdicionaisColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pedidoItemAdicionaisInsertCacheMut.RLock()
	cache, cached := pedidoItemAdicionaisInsertCache[key]
	pedidoItemAdicionaisInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pedidoItemAdicionaisAllColumns,
			pedidoItemAdicionaisColumnsWithDefault,
			pedidoItemAdicionaisColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pedidoItemAdicionaisType, pedidoItemAdicionaisMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pedidoItemAdicionaisType, pedidoItemAdicionaisMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pedido_item_adicionais\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pedido_item_adicionais\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into pedido_item_adicionais")
	}

	if !cached {
		pedidoItemAdicionaisInsertCacheMut.Lock()
		pedidoItemAdicionaisInsertCache[key] = cache
		pedidoItemAdicionaisInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PedidoItemAdicionais.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PedidoItemAdicionais) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pedidoItemAdicionaisUpdateCacheMut.RLock()
	cache, cached := pedidoItemAdicionaisUpdateCache[key]
	pedidoItemAdicionaisUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pedidoItemAdicionaisAllColumns,
			pedidoItemAdicionaisPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update pedido_item_adicionais, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pedido_item_adicionais\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pedidoItemAdicionaisPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pedidoItemAdicionaisType, pedidoItemAdicionaisMapping, append(wl, pedidoItemAdicionaisPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update pedido_item_adicionais row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for pedido_item_adicionais")
	}

	if !cached {
		pedidoItemAdicionaisUpdateCacheMut.Lock()
		pedidoItemAdicionaisUpdateCache[key] = cache
		pedidoItemAdicionaisUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pedidoItemAdicionaisQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for pedido_item_adicionais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for pedido_item_adicionais")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PedidoItemAdicionaisSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pedidoItemAdicionaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pedido_item_adicionais\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pedidoItemAdicionaisPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in pedidoItemAdicionais slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all pedidoItemAdicionais")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PedidoItemAdicionais) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no pedido_item_adicionais provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pedidoItemAdicionaisColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pedidoItemAdicionaisUpsertCacheMut.RLock()
	cache, cached := pedidoItemAdicionaisUpsertCache[key]
	pedidoItemAdicionaisUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			pedidoItemAdicionaisAllColumns,
			pedidoItemAdicionaisColumnsWithDefault,
			pedidoItemAdicionaisColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pedidoItemAdicionaisAllColumns,
			pedidoItemAdicionaisPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert pedido_item_adicionais, could not build update column list")
		}

		ret := strmangle.SetComplement(pedidoItemAdicionaisAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(pedidoItemAdicionaisPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert pedido_item_adicionais, could not build conflict column list")
			}

			conflict = make([]string, len(pedidoItemAdicionaisPrimaryKeyColumns))
			copy(conflict, pedidoItemAdicionaisPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pedido_item_adicionais\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(pedidoItemAdicionaisType, pedidoItemAdicionaisMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pedidoItemAdicionaisType, pedidoItemAdicionaisMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert pedido_item_adicionais")
	}

	if !cached {
		pedidoItemAdicionaisUpsertCacheMut.Lock()
		pedidoItemAdicionaisUpsertCache[key] = cache
		pedidoItemAdicionaisUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PedidoItemAdicionais record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PedidoItemAdicionais) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no PedidoItemAdicionais provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pedidoItemAdicionaisPrimaryKeyMapping)
	sql := "DELETE FROM \"pedido_item_adicionais\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from pedido_item_adicionais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for pedido_item_adicionais")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pedidoItemAdicionaisQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no pedidoItemAdicionaisQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from pedido_item_adicionais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for pedido_item_adicionais")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PedidoItemAdicionaisSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pedidoItemAdicionaisBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pedidoItemAdicionaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pedido_item_adicionais\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pedidoItemAdicionaisPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from pedidoItemAdicionais slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for pedido_item_adicionais")
	}

	if len(pedidoItemAdicionaisAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PedidoItemAdicionais) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPedidoItemAdicionais(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PedidoItemAdicionaisSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PedidoItemAdicionaisSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pedidoItemAdicionaisPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pedido_item_adicionais\".* FROM \"pedido_item_adicionais\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pedidoItemAdicionaisPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in PedidoItemAdicionaisSlice")
	}

	*o = slice

	return nil
}

// PedidoItemAdicionaisExists checks if the PedidoItemAdicionais row exists.
func PedidoItemAdicionaisExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pedido_item_adicionais\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if pedido_item_adicionais exists")
	}

	return exists, nil
}

// Exists checks if the PedidoItemAdicionais row exists.
func (o *PedidoItemAdicionais) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PedidoItemAdicionaisExists(ctx, exec, o.ID)
}
