// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CategoriaOpcoesView is an object representing the database table.
type CategoriaOpcoesView struct {
	ID          null.String `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	SeqID       null.Int64  `boil:"seq_id" json:"seq_id,omitempty" toml:"seq_id" yaml:"seq_id,omitempty"`
	IDCategoria null.String `boil:"id_categoria" json:"id_categoria,omitempty" toml:"id_categoria" yaml:"id_categoria,omitempty"`
	Nome        null.String `boil:"nome" json:"nome,omitempty" toml:"nome" yaml:"nome,omitempty"`
	Status      null.Int16  `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	CreatedAt   null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt   null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
}

var CategoriaOpcoesViewColumns = struct {
	ID          string
	SeqID       string
	IDCategoria string
	Nome        string
	Status      string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	SeqID:       "seq_id",
	IDCategoria: "id_categoria",
	Nome:        "nome",
	Status:      "status",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

var CategoriaOpcoesViewTableColumns = struct {
	ID          string
	SeqID       string
	IDCategoria string
	Nome        string
	Status      string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "categoria_opcoes_view.id",
	SeqID:       "categoria_opcoes_view.seq_id",
	IDCategoria: "categoria_opcoes_view.id_categoria",
	Nome:        "categoria_opcoes_view.nome",
	Status:      "categoria_opcoes_view.status",
	CreatedAt:   "categoria_opcoes_view.created_at",
	UpdatedAt:   "categoria_opcoes_view.updated_at",
	DeletedAt:   "categoria_opcoes_view.deleted_at",
}

// Generated where

var CategoriaOpcoesViewWhere = struct {
	ID          whereHelpernull_String
	SeqID       whereHelpernull_Int64
	IDCategoria whereHelpernull_String
	Nome        whereHelpernull_String
	Status      whereHelpernull_Int16
	CreatedAt   whereHelpernull_Time
	UpdatedAt   whereHelpernull_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelpernull_String{field: "\"categoria_opcoes_view\".\"id\""},
	SeqID:       whereHelpernull_Int64{field: "\"categoria_opcoes_view\".\"seq_id\""},
	IDCategoria: whereHelpernull_String{field: "\"categoria_opcoes_view\".\"id_categoria\""},
	Nome:        whereHelpernull_String{field: "\"categoria_opcoes_view\".\"nome\""},
	Status:      whereHelpernull_Int16{field: "\"categoria_opcoes_view\".\"status\""},
	CreatedAt:   whereHelpernull_Time{field: "\"categoria_opcoes_view\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"categoria_opcoes_view\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"categoria_opcoes_view\".\"deleted_at\""},
}

var (
	categoriaOpcoesViewAllColumns            = []string{"id", "seq_id", "id_categoria", "nome", "status", "created_at", "updated_at", "deleted_at"}
	categoriaOpcoesViewColumnsWithoutDefault = []string{}
	categoriaOpcoesViewColumnsWithDefault    = []string{"id", "seq_id", "id_categoria", "nome", "status", "created_at", "updated_at", "deleted_at"}
	categoriaOpcoesViewPrimaryKeyColumns     = []string{}
	categoriaOpcoesViewGeneratedColumns      = []string{}
)

type (
	// CategoriaOpcoesViewSlice is an alias for a slice of pointers to CategoriaOpcoesView.
	// This should almost always be used instead of []CategoriaOpcoesView.
	CategoriaOpcoesViewSlice []*CategoriaOpcoesView
	// CategoriaOpcoesViewHook is the signature for custom CategoriaOpcoesView hook methods
	CategoriaOpcoesViewHook func(context.Context, boil.ContextExecutor, *CategoriaOpcoesView) error

	categoriaOpcoesViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	categoriaOpcoesViewType           = reflect.TypeOf(&CategoriaOpcoesView{})
	categoriaOpcoesViewMapping        = queries.MakeStructMapping(categoriaOpcoesViewType)
	categoriaOpcoesViewInsertCacheMut sync.RWMutex
	categoriaOpcoesViewInsertCache    = make(map[string]insertCache)
	categoriaOpcoesViewUpdateCacheMut sync.RWMutex
	categoriaOpcoesViewUpdateCache    = make(map[string]updateCache)
	categoriaOpcoesViewUpsertCacheMut sync.RWMutex
	categoriaOpcoesViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var categoriaOpcoesViewAfterSelectMu sync.Mutex
var categoriaOpcoesViewAfterSelectHooks []CategoriaOpcoesViewHook

var categoriaOpcoesViewBeforeInsertMu sync.Mutex
var categoriaOpcoesViewBeforeInsertHooks []CategoriaOpcoesViewHook
var categoriaOpcoesViewAfterInsertMu sync.Mutex
var categoriaOpcoesViewAfterInsertHooks []CategoriaOpcoesViewHook

var categoriaOpcoesViewBeforeUpsertMu sync.Mutex
var categoriaOpcoesViewBeforeUpsertHooks []CategoriaOpcoesViewHook
var categoriaOpcoesViewAfterUpsertMu sync.Mutex
var categoriaOpcoesViewAfterUpsertHooks []CategoriaOpcoesViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CategoriaOpcoesView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaOpcoesViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CategoriaOpcoesView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaOpcoesViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CategoriaOpcoesView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaOpcoesViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CategoriaOpcoesView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaOpcoesViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CategoriaOpcoesView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaOpcoesViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCategoriaOpcoesViewHook registers your hook function for all future operations.
func AddCategoriaOpcoesViewHook(hookPoint boil.HookPoint, categoriaOpcoesViewHook CategoriaOpcoesViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		categoriaOpcoesViewAfterSelectMu.Lock()
		categoriaOpcoesViewAfterSelectHooks = append(categoriaOpcoesViewAfterSelectHooks, categoriaOpcoesViewHook)
		categoriaOpcoesViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		categoriaOpcoesViewBeforeInsertMu.Lock()
		categoriaOpcoesViewBeforeInsertHooks = append(categoriaOpcoesViewBeforeInsertHooks, categoriaOpcoesViewHook)
		categoriaOpcoesViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		categoriaOpcoesViewAfterInsertMu.Lock()
		categoriaOpcoesViewAfterInsertHooks = append(categoriaOpcoesViewAfterInsertHooks, categoriaOpcoesViewHook)
		categoriaOpcoesViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		categoriaOpcoesViewBeforeUpsertMu.Lock()
		categoriaOpcoesViewBeforeUpsertHooks = append(categoriaOpcoesViewBeforeUpsertHooks, categoriaOpcoesViewHook)
		categoriaOpcoesViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		categoriaOpcoesViewAfterUpsertMu.Lock()
		categoriaOpcoesViewAfterUpsertHooks = append(categoriaOpcoesViewAfterUpsertHooks, categoriaOpcoesViewHook)
		categoriaOpcoesViewAfterUpsertMu.Unlock()
	}
}

// One returns a single categoriaOpcoesView record from the query.
func (q categoriaOpcoesViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CategoriaOpcoesView, error) {
	o := &CategoriaOpcoesView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for categoria_opcoes_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CategoriaOpcoesView records from the query.
func (q categoriaOpcoesViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (CategoriaOpcoesViewSlice, error) {
	var o []*CategoriaOpcoesView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to CategoriaOpcoesView slice")
	}

	if len(categoriaOpcoesViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CategoriaOpcoesView records in the query.
func (q categoriaOpcoesViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count categoria_opcoes_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q categoriaOpcoesViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if categoria_opcoes_view exists")
	}

	return count > 0, nil
}

// CategoriaOpcoesViews retrieves all the records using an executor.
func CategoriaOpcoesViews(mods ...qm.QueryMod) categoriaOpcoesViewQuery {
	mods = append(mods, qm.From("\"categoria_opcoes_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"categoria_opcoes_view\".*"})
	}

	return categoriaOpcoesViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CategoriaOpcoesView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no categoria_opcoes_view provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(categoriaOpcoesViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	categoriaOpcoesViewInsertCacheMut.RLock()
	cache, cached := categoriaOpcoesViewInsertCache[key]
	categoriaOpcoesViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			categoriaOpcoesViewAllColumns,
			categoriaOpcoesViewColumnsWithDefault,
			categoriaOpcoesViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(categoriaOpcoesViewType, categoriaOpcoesViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(categoriaOpcoesViewType, categoriaOpcoesViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"categoria_opcoes_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"categoria_opcoes_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into categoria_opcoes_view")
	}

	if !cached {
		categoriaOpcoesViewInsertCacheMut.Lock()
		categoriaOpcoesViewInsertCache[key] = cache
		categoriaOpcoesViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CategoriaOpcoesView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no categoria_opcoes_view provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(categoriaOpcoesViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	categoriaOpcoesViewUpsertCacheMut.RLock()
	cache, cached := categoriaOpcoesViewUpsertCache[key]
	categoriaOpcoesViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			categoriaOpcoesViewAllColumns,
			categoriaOpcoesViewColumnsWithDefault,
			categoriaOpcoesViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			categoriaOpcoesViewAllColumns,
			categoriaOpcoesViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert categoria_opcoes_view, could not build update column list")
		}

		ret := strmangle.SetComplement(categoriaOpcoesViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(categoriaOpcoesViewPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert categoria_opcoes_view, could not build conflict column list")
			}

			conflict = make([]string, len(categoriaOpcoesViewPrimaryKeyColumns))
			copy(conflict, categoriaOpcoesViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"categoria_opcoes_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(categoriaOpcoesViewType, categoriaOpcoesViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(categoriaOpcoesViewType, categoriaOpcoesViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert categoria_opcoes_view")
	}

	if !cached {
		categoriaOpcoesViewUpsertCacheMut.Lock()
		categoriaOpcoesViewUpsertCache[key] = cache
		categoriaOpcoesViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
