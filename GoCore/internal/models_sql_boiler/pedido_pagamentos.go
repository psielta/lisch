// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// PedidoPagamento is an object representing the database table.
type PedidoPagamento struct {
	ID                 string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	SeqID              int64             `boil:"seq_id" json:"seq_id" toml:"seq_id" yaml:"seq_id"`
	IDPedido           string            `boil:"id_pedido" json:"id_pedido" toml:"id_pedido" yaml:"id_pedido"`
	IDContaReceber     null.String       `boil:"id_conta_receber" json:"id_conta_receber,omitempty" toml:"id_conta_receber" yaml:"id_conta_receber,omitempty"`
	CategoriaPagamento null.String       `boil:"categoria_pagamento" json:"categoria_pagamento,omitempty" toml:"categoria_pagamento" yaml:"categoria_pagamento,omitempty"`
	FormaPagamento     string            `boil:"forma_pagamento" json:"forma_pagamento" toml:"forma_pagamento" yaml:"forma_pagamento"`
	ValorPago          types.Decimal     `boil:"valor_pago" json:"valor_pago" toml:"valor_pago" yaml:"valor_pago"`
	Troco              types.NullDecimal `boil:"troco" json:"troco,omitempty" toml:"troco" yaml:"troco,omitempty"`
	AutorizadoPor      null.String       `boil:"autorizado_por" json:"autorizado_por,omitempty" toml:"autorizado_por" yaml:"autorizado_por,omitempty"`
	Observacao         null.String       `boil:"observacao" json:"observacao,omitempty" toml:"observacao" yaml:"observacao,omitempty"`
	CreatedAt          time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt          null.Time         `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *pedidoPagamentoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pedidoPagamentoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PedidoPagamentoColumns = struct {
	ID                 string
	SeqID              string
	IDPedido           string
	IDContaReceber     string
	CategoriaPagamento string
	FormaPagamento     string
	ValorPago          string
	Troco              string
	AutorizadoPor      string
	Observacao         string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "id",
	SeqID:              "seq_id",
	IDPedido:           "id_pedido",
	IDContaReceber:     "id_conta_receber",
	CategoriaPagamento: "categoria_pagamento",
	FormaPagamento:     "forma_pagamento",
	ValorPago:          "valor_pago",
	Troco:              "troco",
	AutorizadoPor:      "autorizado_por",
	Observacao:         "observacao",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
}

var PedidoPagamentoTableColumns = struct {
	ID                 string
	SeqID              string
	IDPedido           string
	IDContaReceber     string
	CategoriaPagamento string
	FormaPagamento     string
	ValorPago          string
	Troco              string
	AutorizadoPor      string
	Observacao         string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "pedido_pagamentos.id",
	SeqID:              "pedido_pagamentos.seq_id",
	IDPedido:           "pedido_pagamentos.id_pedido",
	IDContaReceber:     "pedido_pagamentos.id_conta_receber",
	CategoriaPagamento: "pedido_pagamentos.categoria_pagamento",
	FormaPagamento:     "pedido_pagamentos.forma_pagamento",
	ValorPago:          "pedido_pagamentos.valor_pago",
	Troco:              "pedido_pagamentos.troco",
	AutorizadoPor:      "pedido_pagamentos.autorizado_por",
	Observacao:         "pedido_pagamentos.observacao",
	CreatedAt:          "pedido_pagamentos.created_at",
	UpdatedAt:          "pedido_pagamentos.updated_at",
	DeletedAt:          "pedido_pagamentos.deleted_at",
}

// Generated where

var PedidoPagamentoWhere = struct {
	ID                 whereHelperstring
	SeqID              whereHelperint64
	IDPedido           whereHelperstring
	IDContaReceber     whereHelpernull_String
	CategoriaPagamento whereHelpernull_String
	FormaPagamento     whereHelperstring
	ValorPago          whereHelpertypes_Decimal
	Troco              whereHelpertypes_NullDecimal
	AutorizadoPor      whereHelpernull_String
	Observacao         whereHelpernull_String
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	DeletedAt          whereHelpernull_Time
}{
	ID:                 whereHelperstring{field: "\"pedido_pagamentos\".\"id\""},
	SeqID:              whereHelperint64{field: "\"pedido_pagamentos\".\"seq_id\""},
	IDPedido:           whereHelperstring{field: "\"pedido_pagamentos\".\"id_pedido\""},
	IDContaReceber:     whereHelpernull_String{field: "\"pedido_pagamentos\".\"id_conta_receber\""},
	CategoriaPagamento: whereHelpernull_String{field: "\"pedido_pagamentos\".\"categoria_pagamento\""},
	FormaPagamento:     whereHelperstring{field: "\"pedido_pagamentos\".\"forma_pagamento\""},
	ValorPago:          whereHelpertypes_Decimal{field: "\"pedido_pagamentos\".\"valor_pago\""},
	Troco:              whereHelpertypes_NullDecimal{field: "\"pedido_pagamentos\".\"troco\""},
	AutorizadoPor:      whereHelpernull_String{field: "\"pedido_pagamentos\".\"autorizado_por\""},
	Observacao:         whereHelpernull_String{field: "\"pedido_pagamentos\".\"observacao\""},
	CreatedAt:          whereHelpertime_Time{field: "\"pedido_pagamentos\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"pedido_pagamentos\".\"updated_at\""},
	DeletedAt:          whereHelpernull_Time{field: "\"pedido_pagamentos\".\"deleted_at\""},
}

// PedidoPagamentoRels is where relationship names are stored.
var PedidoPagamentoRels = struct {
	IDPedidoPedido string
}{
	IDPedidoPedido: "IDPedidoPedido",
}

// pedidoPagamentoR is where relationships are stored.
type pedidoPagamentoR struct {
	IDPedidoPedido *Pedido `boil:"IDPedidoPedido" json:"IDPedidoPedido" toml:"IDPedidoPedido" yaml:"IDPedidoPedido"`
}

// NewStruct creates a new relationship struct
func (*pedidoPagamentoR) NewStruct() *pedidoPagamentoR {
	return &pedidoPagamentoR{}
}

func (r *pedidoPagamentoR) GetIDPedidoPedido() *Pedido {
	if r == nil {
		return nil
	}
	return r.IDPedidoPedido
}

// pedidoPagamentoL is where Load methods for each relationship are stored.
type pedidoPagamentoL struct{}

var (
	pedidoPagamentoAllColumns            = []string{"id", "seq_id", "id_pedido", "id_conta_receber", "categoria_pagamento", "forma_pagamento", "valor_pago", "troco", "autorizado_por", "observacao", "created_at", "updated_at", "deleted_at"}
	pedidoPagamentoColumnsWithoutDefault = []string{"id_pedido", "forma_pagamento", "valor_pago"}
	pedidoPagamentoColumnsWithDefault    = []string{"id", "seq_id", "id_conta_receber", "categoria_pagamento", "troco", "autorizado_por", "observacao", "created_at", "updated_at", "deleted_at"}
	pedidoPagamentoPrimaryKeyColumns     = []string{"id"}
	pedidoPagamentoGeneratedColumns      = []string{}
)

type (
	// PedidoPagamentoSlice is an alias for a slice of pointers to PedidoPagamento.
	// This should almost always be used instead of []PedidoPagamento.
	PedidoPagamentoSlice []*PedidoPagamento
	// PedidoPagamentoHook is the signature for custom PedidoPagamento hook methods
	PedidoPagamentoHook func(context.Context, boil.ContextExecutor, *PedidoPagamento) error

	pedidoPagamentoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pedidoPagamentoType                 = reflect.TypeOf(&PedidoPagamento{})
	pedidoPagamentoMapping              = queries.MakeStructMapping(pedidoPagamentoType)
	pedidoPagamentoPrimaryKeyMapping, _ = queries.BindMapping(pedidoPagamentoType, pedidoPagamentoMapping, pedidoPagamentoPrimaryKeyColumns)
	pedidoPagamentoInsertCacheMut       sync.RWMutex
	pedidoPagamentoInsertCache          = make(map[string]insertCache)
	pedidoPagamentoUpdateCacheMut       sync.RWMutex
	pedidoPagamentoUpdateCache          = make(map[string]updateCache)
	pedidoPagamentoUpsertCacheMut       sync.RWMutex
	pedidoPagamentoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pedidoPagamentoAfterSelectMu sync.Mutex
var pedidoPagamentoAfterSelectHooks []PedidoPagamentoHook

var pedidoPagamentoBeforeInsertMu sync.Mutex
var pedidoPagamentoBeforeInsertHooks []PedidoPagamentoHook
var pedidoPagamentoAfterInsertMu sync.Mutex
var pedidoPagamentoAfterInsertHooks []PedidoPagamentoHook

var pedidoPagamentoBeforeUpdateMu sync.Mutex
var pedidoPagamentoBeforeUpdateHooks []PedidoPagamentoHook
var pedidoPagamentoAfterUpdateMu sync.Mutex
var pedidoPagamentoAfterUpdateHooks []PedidoPagamentoHook

var pedidoPagamentoBeforeDeleteMu sync.Mutex
var pedidoPagamentoBeforeDeleteHooks []PedidoPagamentoHook
var pedidoPagamentoAfterDeleteMu sync.Mutex
var pedidoPagamentoAfterDeleteHooks []PedidoPagamentoHook

var pedidoPagamentoBeforeUpsertMu sync.Mutex
var pedidoPagamentoBeforeUpsertHooks []PedidoPagamentoHook
var pedidoPagamentoAfterUpsertMu sync.Mutex
var pedidoPagamentoAfterUpsertHooks []PedidoPagamentoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PedidoPagamento) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoPagamentoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PedidoPagamento) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoPagamentoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PedidoPagamento) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoPagamentoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PedidoPagamento) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoPagamentoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PedidoPagamento) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoPagamentoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PedidoPagamento) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoPagamentoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PedidoPagamento) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoPagamentoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PedidoPagamento) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoPagamentoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PedidoPagamento) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoPagamentoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPedidoPagamentoHook registers your hook function for all future operations.
func AddPedidoPagamentoHook(hookPoint boil.HookPoint, pedidoPagamentoHook PedidoPagamentoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		pedidoPagamentoAfterSelectMu.Lock()
		pedidoPagamentoAfterSelectHooks = append(pedidoPagamentoAfterSelectHooks, pedidoPagamentoHook)
		pedidoPagamentoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		pedidoPagamentoBeforeInsertMu.Lock()
		pedidoPagamentoBeforeInsertHooks = append(pedidoPagamentoBeforeInsertHooks, pedidoPagamentoHook)
		pedidoPagamentoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		pedidoPagamentoAfterInsertMu.Lock()
		pedidoPagamentoAfterInsertHooks = append(pedidoPagamentoAfterInsertHooks, pedidoPagamentoHook)
		pedidoPagamentoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		pedidoPagamentoBeforeUpdateMu.Lock()
		pedidoPagamentoBeforeUpdateHooks = append(pedidoPagamentoBeforeUpdateHooks, pedidoPagamentoHook)
		pedidoPagamentoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		pedidoPagamentoAfterUpdateMu.Lock()
		pedidoPagamentoAfterUpdateHooks = append(pedidoPagamentoAfterUpdateHooks, pedidoPagamentoHook)
		pedidoPagamentoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		pedidoPagamentoBeforeDeleteMu.Lock()
		pedidoPagamentoBeforeDeleteHooks = append(pedidoPagamentoBeforeDeleteHooks, pedidoPagamentoHook)
		pedidoPagamentoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		pedidoPagamentoAfterDeleteMu.Lock()
		pedidoPagamentoAfterDeleteHooks = append(pedidoPagamentoAfterDeleteHooks, pedidoPagamentoHook)
		pedidoPagamentoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		pedidoPagamentoBeforeUpsertMu.Lock()
		pedidoPagamentoBeforeUpsertHooks = append(pedidoPagamentoBeforeUpsertHooks, pedidoPagamentoHook)
		pedidoPagamentoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		pedidoPagamentoAfterUpsertMu.Lock()
		pedidoPagamentoAfterUpsertHooks = append(pedidoPagamentoAfterUpsertHooks, pedidoPagamentoHook)
		pedidoPagamentoAfterUpsertMu.Unlock()
	}
}

// One returns a single pedidoPagamento record from the query.
func (q pedidoPagamentoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PedidoPagamento, error) {
	o := &PedidoPagamento{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for pedido_pagamentos")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PedidoPagamento records from the query.
func (q pedidoPagamentoQuery) All(ctx context.Context, exec boil.ContextExecutor) (PedidoPagamentoSlice, error) {
	var o []*PedidoPagamento

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to PedidoPagamento slice")
	}

	if len(pedidoPagamentoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PedidoPagamento records in the query.
func (q pedidoPagamentoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count pedido_pagamentos rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pedidoPagamentoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if pedido_pagamentos exists")
	}

	return count > 0, nil
}

// IDPedidoPedido pointed to by the foreign key.
func (o *PedidoPagamento) IDPedidoPedido(mods ...qm.QueryMod) pedidoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDPedido),
	}

	queryMods = append(queryMods, mods...)

	return Pedidos(queryMods...)
}

// LoadIDPedidoPedido allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pedidoPagamentoL) LoadIDPedidoPedido(ctx context.Context, e boil.ContextExecutor, singular bool, maybePedidoPagamento interface{}, mods queries.Applicator) error {
	var slice []*PedidoPagamento
	var object *PedidoPagamento

	if singular {
		var ok bool
		object, ok = maybePedidoPagamento.(*PedidoPagamento)
		if !ok {
			object = new(PedidoPagamento)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePedidoPagamento)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePedidoPagamento))
			}
		}
	} else {
		s, ok := maybePedidoPagamento.(*[]*PedidoPagamento)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePedidoPagamento)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePedidoPagamento))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pedidoPagamentoR{}
		}
		args[object.IDPedido] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pedidoPagamentoR{}
			}

			args[obj.IDPedido] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`pedidos`),
		qm.WhereIn(`pedidos.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pedido")
	}

	var resultSlice []*Pedido
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pedido")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pedidos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pedidos")
	}

	if len(pedidoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDPedidoPedido = foreign
		if foreign.R == nil {
			foreign.R = &pedidoR{}
		}
		foreign.R.IDPedidoPedidoPagamentos = append(foreign.R.IDPedidoPedidoPagamentos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDPedido == foreign.ID {
				local.R.IDPedidoPedido = foreign
				if foreign.R == nil {
					foreign.R = &pedidoR{}
				}
				foreign.R.IDPedidoPedidoPagamentos = append(foreign.R.IDPedidoPedidoPagamentos, local)
				break
			}
		}
	}

	return nil
}

// SetIDPedidoPedido of the pedidoPagamento to the related item.
// Sets o.R.IDPedidoPedido to related.
// Adds o to related.R.IDPedidoPedidoPagamentos.
func (o *PedidoPagamento) SetIDPedidoPedido(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pedido) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pedido_pagamentos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_pedido"}),
		strmangle.WhereClause("\"", "\"", 2, pedidoPagamentoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDPedido = related.ID
	if o.R == nil {
		o.R = &pedidoPagamentoR{
			IDPedidoPedido: related,
		}
	} else {
		o.R.IDPedidoPedido = related
	}

	if related.R == nil {
		related.R = &pedidoR{
			IDPedidoPedidoPagamentos: PedidoPagamentoSlice{o},
		}
	} else {
		related.R.IDPedidoPedidoPagamentos = append(related.R.IDPedidoPedidoPagamentos, o)
	}

	return nil
}

// PedidoPagamentos retrieves all the records using an executor.
func PedidoPagamentos(mods ...qm.QueryMod) pedidoPagamentoQuery {
	mods = append(mods, qm.From("\"pedido_pagamentos\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"pedido_pagamentos\".*"})
	}

	return pedidoPagamentoQuery{q}
}

// FindPedidoPagamento retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPedidoPagamento(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*PedidoPagamento, error) {
	pedidoPagamentoObj := &PedidoPagamento{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pedido_pagamentos\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pedidoPagamentoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from pedido_pagamentos")
	}

	if err = pedidoPagamentoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return pedidoPagamentoObj, err
	}

	return pedidoPagamentoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PedidoPagamento) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no pedido_pagamentos provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pedidoPagamentoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pedidoPagamentoInsertCacheMut.RLock()
	cache, cached := pedidoPagamentoInsertCache[key]
	pedidoPagamentoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pedidoPagamentoAllColumns,
			pedidoPagamentoColumnsWithDefault,
			pedidoPagamentoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pedidoPagamentoType, pedidoPagamentoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pedidoPagamentoType, pedidoPagamentoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pedido_pagamentos\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pedido_pagamentos\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into pedido_pagamentos")
	}

	if !cached {
		pedidoPagamentoInsertCacheMut.Lock()
		pedidoPagamentoInsertCache[key] = cache
		pedidoPagamentoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PedidoPagamento.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PedidoPagamento) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pedidoPagamentoUpdateCacheMut.RLock()
	cache, cached := pedidoPagamentoUpdateCache[key]
	pedidoPagamentoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pedidoPagamentoAllColumns,
			pedidoPagamentoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update pedido_pagamentos, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pedido_pagamentos\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pedidoPagamentoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pedidoPagamentoType, pedidoPagamentoMapping, append(wl, pedidoPagamentoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update pedido_pagamentos row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for pedido_pagamentos")
	}

	if !cached {
		pedidoPagamentoUpdateCacheMut.Lock()
		pedidoPagamentoUpdateCache[key] = cache
		pedidoPagamentoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pedidoPagamentoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for pedido_pagamentos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for pedido_pagamentos")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PedidoPagamentoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pedidoPagamentoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pedido_pagamentos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pedidoPagamentoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in pedidoPagamento slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all pedidoPagamento")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PedidoPagamento) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no pedido_pagamentos provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pedidoPagamentoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pedidoPagamentoUpsertCacheMut.RLock()
	cache, cached := pedidoPagamentoUpsertCache[key]
	pedidoPagamentoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			pedidoPagamentoAllColumns,
			pedidoPagamentoColumnsWithDefault,
			pedidoPagamentoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pedidoPagamentoAllColumns,
			pedidoPagamentoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert pedido_pagamentos, could not build update column list")
		}

		ret := strmangle.SetComplement(pedidoPagamentoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(pedidoPagamentoPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert pedido_pagamentos, could not build conflict column list")
			}

			conflict = make([]string, len(pedidoPagamentoPrimaryKeyColumns))
			copy(conflict, pedidoPagamentoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pedido_pagamentos\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(pedidoPagamentoType, pedidoPagamentoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pedidoPagamentoType, pedidoPagamentoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert pedido_pagamentos")
	}

	if !cached {
		pedidoPagamentoUpsertCacheMut.Lock()
		pedidoPagamentoUpsertCache[key] = cache
		pedidoPagamentoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PedidoPagamento record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PedidoPagamento) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no PedidoPagamento provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pedidoPagamentoPrimaryKeyMapping)
	sql := "DELETE FROM \"pedido_pagamentos\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from pedido_pagamentos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for pedido_pagamentos")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pedidoPagamentoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no pedidoPagamentoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from pedido_pagamentos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for pedido_pagamentos")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PedidoPagamentoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pedidoPagamentoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pedidoPagamentoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pedido_pagamentos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pedidoPagamentoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from pedidoPagamento slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for pedido_pagamentos")
	}

	if len(pedidoPagamentoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PedidoPagamento) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPedidoPagamento(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PedidoPagamentoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PedidoPagamentoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pedidoPagamentoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pedido_pagamentos\".* FROM \"pedido_pagamentos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pedidoPagamentoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in PedidoPagamentoSlice")
	}

	*o = slice

	return nil
}

// PedidoPagamentoExists checks if the PedidoPagamento row exists.
func PedidoPagamentoExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pedido_pagamentos\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if pedido_pagamentos exists")
	}

	return exists, nil
}

// Exists checks if the PedidoPagamento row exists.
func (o *PedidoPagamento) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PedidoPagamentoExists(ctx, exec, o.ID)
}
