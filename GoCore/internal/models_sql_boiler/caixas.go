// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Caixa is an object representing the database table.
type Caixa struct {
	ID                   string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	SeqID                int64         `boil:"seq_id" json:"seq_id" toml:"seq_id" yaml:"seq_id"`
	TenantID             string        `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	IDOperador           string        `boil:"id_operador" json:"id_operador" toml:"id_operador" yaml:"id_operador"`
	DataAbertura         time.Time     `boil:"data_abertura" json:"data_abertura" toml:"data_abertura" yaml:"data_abertura"`
	DataFechamento       null.Time     `boil:"data_fechamento" json:"data_fechamento,omitempty" toml:"data_fechamento" yaml:"data_fechamento,omitempty"`
	ValorAbertura        types.Decimal `boil:"valor_abertura" json:"valor_abertura" toml:"valor_abertura" yaml:"valor_abertura"`
	ObservacaoAbertura   null.String   `boil:"observacao_abertura" json:"observacao_abertura,omitempty" toml:"observacao_abertura" yaml:"observacao_abertura,omitempty"`
	ObservacaoFechamento null.String   `boil:"observacao_fechamento" json:"observacao_fechamento,omitempty" toml:"observacao_fechamento" yaml:"observacao_fechamento,omitempty"`
	// A=Aberto, F=Fechado
	Status    string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *caixaR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L caixaL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CaixaColumns = struct {
	ID                   string
	SeqID                string
	TenantID             string
	IDOperador           string
	DataAbertura         string
	DataFechamento       string
	ValorAbertura        string
	ObservacaoAbertura   string
	ObservacaoFechamento string
	Status               string
	CreatedAt            string
	UpdatedAt            string
	DeletedAt            string
}{
	ID:                   "id",
	SeqID:                "seq_id",
	TenantID:             "tenant_id",
	IDOperador:           "id_operador",
	DataAbertura:         "data_abertura",
	DataFechamento:       "data_fechamento",
	ValorAbertura:        "valor_abertura",
	ObservacaoAbertura:   "observacao_abertura",
	ObservacaoFechamento: "observacao_fechamento",
	Status:               "status",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	DeletedAt:            "deleted_at",
}

var CaixaTableColumns = struct {
	ID                   string
	SeqID                string
	TenantID             string
	IDOperador           string
	DataAbertura         string
	DataFechamento       string
	ValorAbertura        string
	ObservacaoAbertura   string
	ObservacaoFechamento string
	Status               string
	CreatedAt            string
	UpdatedAt            string
	DeletedAt            string
}{
	ID:                   "caixas.id",
	SeqID:                "caixas.seq_id",
	TenantID:             "caixas.tenant_id",
	IDOperador:           "caixas.id_operador",
	DataAbertura:         "caixas.data_abertura",
	DataFechamento:       "caixas.data_fechamento",
	ValorAbertura:        "caixas.valor_abertura",
	ObservacaoAbertura:   "caixas.observacao_abertura",
	ObservacaoFechamento: "caixas.observacao_fechamento",
	Status:               "caixas.status",
	CreatedAt:            "caixas.created_at",
	UpdatedAt:            "caixas.updated_at",
	DeletedAt:            "caixas.deleted_at",
}

// Generated where

var CaixaWhere = struct {
	ID                   whereHelperstring
	SeqID                whereHelperint64
	TenantID             whereHelperstring
	IDOperador           whereHelperstring
	DataAbertura         whereHelpertime_Time
	DataFechamento       whereHelpernull_Time
	ValorAbertura        whereHelpertypes_Decimal
	ObservacaoAbertura   whereHelpernull_String
	ObservacaoFechamento whereHelpernull_String
	Status               whereHelperstring
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpertime_Time
	DeletedAt            whereHelpernull_Time
}{
	ID:                   whereHelperstring{field: "\"caixas\".\"id\""},
	SeqID:                whereHelperint64{field: "\"caixas\".\"seq_id\""},
	TenantID:             whereHelperstring{field: "\"caixas\".\"tenant_id\""},
	IDOperador:           whereHelperstring{field: "\"caixas\".\"id_operador\""},
	DataAbertura:         whereHelpertime_Time{field: "\"caixas\".\"data_abertura\""},
	DataFechamento:       whereHelpernull_Time{field: "\"caixas\".\"data_fechamento\""},
	ValorAbertura:        whereHelpertypes_Decimal{field: "\"caixas\".\"valor_abertura\""},
	ObservacaoAbertura:   whereHelpernull_String{field: "\"caixas\".\"observacao_abertura\""},
	ObservacaoFechamento: whereHelpernull_String{field: "\"caixas\".\"observacao_fechamento\""},
	Status:               whereHelperstring{field: "\"caixas\".\"status\""},
	CreatedAt:            whereHelpertime_Time{field: "\"caixas\".\"created_at\""},
	UpdatedAt:            whereHelpertime_Time{field: "\"caixas\".\"updated_at\""},
	DeletedAt:            whereHelpernull_Time{field: "\"caixas\".\"deleted_at\""},
}

// CaixaRels is where relationship names are stored.
var CaixaRels = struct {
	IDOperadorOperadoresCaixa    string
	Tenant                       string
	IDCaixaCaixaFechamentoFormas string
	IDCaixaCaixaMovimentacoes    string
}{
	IDOperadorOperadoresCaixa:    "IDOperadorOperadoresCaixa",
	Tenant:                       "Tenant",
	IDCaixaCaixaFechamentoFormas: "IDCaixaCaixaFechamentoFormas",
	IDCaixaCaixaMovimentacoes:    "IDCaixaCaixaMovimentacoes",
}

// caixaR is where relationships are stored.
type caixaR struct {
	IDOperadorOperadoresCaixa    *OperadorCaixa            `boil:"IDOperadorOperadoresCaixa" json:"IDOperadorOperadoresCaixa" toml:"IDOperadorOperadoresCaixa" yaml:"IDOperadorOperadoresCaixa"`
	Tenant                       *Tenant                   `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
	IDCaixaCaixaFechamentoFormas CaixaFechamentoFormaSlice `boil:"IDCaixaCaixaFechamentoFormas" json:"IDCaixaCaixaFechamentoFormas" toml:"IDCaixaCaixaFechamentoFormas" yaml:"IDCaixaCaixaFechamentoFormas"`
	IDCaixaCaixaMovimentacoes    CaixaMovimentacaoSlice    `boil:"IDCaixaCaixaMovimentacoes" json:"IDCaixaCaixaMovimentacoes" toml:"IDCaixaCaixaMovimentacoes" yaml:"IDCaixaCaixaMovimentacoes"`
}

// NewStruct creates a new relationship struct
func (*caixaR) NewStruct() *caixaR {
	return &caixaR{}
}

func (r *caixaR) GetIDOperadorOperadoresCaixa() *OperadorCaixa {
	if r == nil {
		return nil
	}
	return r.IDOperadorOperadoresCaixa
}

func (r *caixaR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}
	return r.Tenant
}

func (r *caixaR) GetIDCaixaCaixaFechamentoFormas() CaixaFechamentoFormaSlice {
	if r == nil {
		return nil
	}
	return r.IDCaixaCaixaFechamentoFormas
}

func (r *caixaR) GetIDCaixaCaixaMovimentacoes() CaixaMovimentacaoSlice {
	if r == nil {
		return nil
	}
	return r.IDCaixaCaixaMovimentacoes
}

// caixaL is where Load methods for each relationship are stored.
type caixaL struct{}

var (
	caixaAllColumns            = []string{"id", "seq_id", "tenant_id", "id_operador", "data_abertura", "data_fechamento", "valor_abertura", "observacao_abertura", "observacao_fechamento", "status", "created_at", "updated_at", "deleted_at"}
	caixaColumnsWithoutDefault = []string{"tenant_id", "id_operador"}
	caixaColumnsWithDefault    = []string{"id", "seq_id", "data_abertura", "data_fechamento", "valor_abertura", "observacao_abertura", "observacao_fechamento", "status", "created_at", "updated_at", "deleted_at"}
	caixaPrimaryKeyColumns     = []string{"id"}
	caixaGeneratedColumns      = []string{}
)

type (
	// CaixaSlice is an alias for a slice of pointers to Caixa.
	// This should almost always be used instead of []Caixa.
	CaixaSlice []*Caixa
	// CaixaHook is the signature for custom Caixa hook methods
	CaixaHook func(context.Context, boil.ContextExecutor, *Caixa) error

	caixaQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	caixaType                 = reflect.TypeOf(&Caixa{})
	caixaMapping              = queries.MakeStructMapping(caixaType)
	caixaPrimaryKeyMapping, _ = queries.BindMapping(caixaType, caixaMapping, caixaPrimaryKeyColumns)
	caixaInsertCacheMut       sync.RWMutex
	caixaInsertCache          = make(map[string]insertCache)
	caixaUpdateCacheMut       sync.RWMutex
	caixaUpdateCache          = make(map[string]updateCache)
	caixaUpsertCacheMut       sync.RWMutex
	caixaUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var caixaAfterSelectMu sync.Mutex
var caixaAfterSelectHooks []CaixaHook

var caixaBeforeInsertMu sync.Mutex
var caixaBeforeInsertHooks []CaixaHook
var caixaAfterInsertMu sync.Mutex
var caixaAfterInsertHooks []CaixaHook

var caixaBeforeUpdateMu sync.Mutex
var caixaBeforeUpdateHooks []CaixaHook
var caixaAfterUpdateMu sync.Mutex
var caixaAfterUpdateHooks []CaixaHook

var caixaBeforeDeleteMu sync.Mutex
var caixaBeforeDeleteHooks []CaixaHook
var caixaAfterDeleteMu sync.Mutex
var caixaAfterDeleteHooks []CaixaHook

var caixaBeforeUpsertMu sync.Mutex
var caixaBeforeUpsertHooks []CaixaHook
var caixaAfterUpsertMu sync.Mutex
var caixaAfterUpsertHooks []CaixaHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Caixa) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Caixa) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Caixa) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Caixa) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Caixa) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Caixa) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Caixa) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Caixa) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Caixa) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCaixaHook registers your hook function for all future operations.
func AddCaixaHook(hookPoint boil.HookPoint, caixaHook CaixaHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		caixaAfterSelectMu.Lock()
		caixaAfterSelectHooks = append(caixaAfterSelectHooks, caixaHook)
		caixaAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		caixaBeforeInsertMu.Lock()
		caixaBeforeInsertHooks = append(caixaBeforeInsertHooks, caixaHook)
		caixaBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		caixaAfterInsertMu.Lock()
		caixaAfterInsertHooks = append(caixaAfterInsertHooks, caixaHook)
		caixaAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		caixaBeforeUpdateMu.Lock()
		caixaBeforeUpdateHooks = append(caixaBeforeUpdateHooks, caixaHook)
		caixaBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		caixaAfterUpdateMu.Lock()
		caixaAfterUpdateHooks = append(caixaAfterUpdateHooks, caixaHook)
		caixaAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		caixaBeforeDeleteMu.Lock()
		caixaBeforeDeleteHooks = append(caixaBeforeDeleteHooks, caixaHook)
		caixaBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		caixaAfterDeleteMu.Lock()
		caixaAfterDeleteHooks = append(caixaAfterDeleteHooks, caixaHook)
		caixaAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		caixaBeforeUpsertMu.Lock()
		caixaBeforeUpsertHooks = append(caixaBeforeUpsertHooks, caixaHook)
		caixaBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		caixaAfterUpsertMu.Lock()
		caixaAfterUpsertHooks = append(caixaAfterUpsertHooks, caixaHook)
		caixaAfterUpsertMu.Unlock()
	}
}

// One returns a single caixa record from the query.
func (q caixaQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Caixa, error) {
	o := &Caixa{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for caixas")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Caixa records from the query.
func (q caixaQuery) All(ctx context.Context, exec boil.ContextExecutor) (CaixaSlice, error) {
	var o []*Caixa

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to Caixa slice")
	}

	if len(caixaAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Caixa records in the query.
func (q caixaQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count caixas rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q caixaQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if caixas exists")
	}

	return count > 0, nil
}

// IDOperadorOperadoresCaixa pointed to by the foreign key.
func (o *Caixa) IDOperadorOperadoresCaixa(mods ...qm.QueryMod) operadorCaixaQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDOperador),
	}

	queryMods = append(queryMods, mods...)

	return OperadoresCaixa(queryMods...)
}

// Tenant pointed to by the foreign key.
func (o *Caixa) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// IDCaixaCaixaFechamentoFormas retrieves all the caixa_fechamento_formas's CaixaFechamentoFormas with an executor via id_caixa column.
func (o *Caixa) IDCaixaCaixaFechamentoFormas(mods ...qm.QueryMod) caixaFechamentoFormaQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"caixa_fechamento_formas\".\"id_caixa\"=?", o.ID),
	)

	return CaixaFechamentoFormas(queryMods...)
}

// IDCaixaCaixaMovimentacoes retrieves all the caixa_movimentaco's CaixaMovimentacoes with an executor via id_caixa column.
func (o *Caixa) IDCaixaCaixaMovimentacoes(mods ...qm.QueryMod) caixaMovimentacaoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"caixa_movimentacoes\".\"id_caixa\"=?", o.ID),
	)

	return CaixaMovimentacoes(queryMods...)
}

// LoadIDOperadorOperadoresCaixa allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (caixaL) LoadIDOperadorOperadoresCaixa(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCaixa interface{}, mods queries.Applicator) error {
	var slice []*Caixa
	var object *Caixa

	if singular {
		var ok bool
		object, ok = maybeCaixa.(*Caixa)
		if !ok {
			object = new(Caixa)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCaixa)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCaixa))
			}
		}
	} else {
		s, ok := maybeCaixa.(*[]*Caixa)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCaixa)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCaixa))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &caixaR{}
		}
		args[object.IDOperador] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &caixaR{}
			}

			args[obj.IDOperador] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`operadores_caixa`),
		qm.WhereIn(`operadores_caixa.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OperadorCaixa")
	}

	var resultSlice []*OperadorCaixa
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OperadorCaixa")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for operadores_caixa")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for operadores_caixa")
	}

	if len(operadorCaixaAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDOperadorOperadoresCaixa = foreign
		if foreign.R == nil {
			foreign.R = &operadorCaixaR{}
		}
		foreign.R.IDOperadorCaixas = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDOperador == foreign.ID {
				local.R.IDOperadorOperadoresCaixa = foreign
				if foreign.R == nil {
					foreign.R = &operadorCaixaR{}
				}
				foreign.R.IDOperadorCaixas = local
				break
			}
		}
	}

	return nil
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (caixaL) LoadTenant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCaixa interface{}, mods queries.Applicator) error {
	var slice []*Caixa
	var object *Caixa

	if singular {
		var ok bool
		object, ok = maybeCaixa.(*Caixa)
		if !ok {
			object = new(Caixa)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCaixa)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCaixa))
			}
		}
	} else {
		s, ok := maybeCaixa.(*[]*Caixa)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCaixa)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCaixa))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &caixaR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &caixaR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.Caixas = append(foreign.R.Caixas, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.Caixas = append(foreign.R.Caixas, local)
				break
			}
		}
	}

	return nil
}

// LoadIDCaixaCaixaFechamentoFormas allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (caixaL) LoadIDCaixaCaixaFechamentoFormas(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCaixa interface{}, mods queries.Applicator) error {
	var slice []*Caixa
	var object *Caixa

	if singular {
		var ok bool
		object, ok = maybeCaixa.(*Caixa)
		if !ok {
			object = new(Caixa)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCaixa)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCaixa))
			}
		}
	} else {
		s, ok := maybeCaixa.(*[]*Caixa)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCaixa)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCaixa))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &caixaR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &caixaR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`caixa_fechamento_formas`),
		qm.WhereIn(`caixa_fechamento_formas.id_caixa in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load caixa_fechamento_formas")
	}

	var resultSlice []*CaixaFechamentoForma
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice caixa_fechamento_formas")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on caixa_fechamento_formas")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for caixa_fechamento_formas")
	}

	if len(caixaFechamentoFormaAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDCaixaCaixaFechamentoFormas = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &caixaFechamentoFormaR{}
			}
			foreign.R.IDCaixaCaixas = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDCaixa {
				local.R.IDCaixaCaixaFechamentoFormas = append(local.R.IDCaixaCaixaFechamentoFormas, foreign)
				if foreign.R == nil {
					foreign.R = &caixaFechamentoFormaR{}
				}
				foreign.R.IDCaixaCaixas = local
				break
			}
		}
	}

	return nil
}

// LoadIDCaixaCaixaMovimentacoes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (caixaL) LoadIDCaixaCaixaMovimentacoes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCaixa interface{}, mods queries.Applicator) error {
	var slice []*Caixa
	var object *Caixa

	if singular {
		var ok bool
		object, ok = maybeCaixa.(*Caixa)
		if !ok {
			object = new(Caixa)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCaixa)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCaixa))
			}
		}
	} else {
		s, ok := maybeCaixa.(*[]*Caixa)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCaixa)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCaixa))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &caixaR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &caixaR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`caixa_movimentacoes`),
		qm.WhereIn(`caixa_movimentacoes.id_caixa in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load caixa_movimentacoes")
	}

	var resultSlice []*CaixaMovimentacao
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice caixa_movimentacoes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on caixa_movimentacoes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for caixa_movimentacoes")
	}

	if len(caixaMovimentacaoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDCaixaCaixaMovimentacoes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &caixaMovimentacaoR{}
			}
			foreign.R.IDCaixaCaixas = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDCaixa {
				local.R.IDCaixaCaixaMovimentacoes = append(local.R.IDCaixaCaixaMovimentacoes, foreign)
				if foreign.R == nil {
					foreign.R = &caixaMovimentacaoR{}
				}
				foreign.R.IDCaixaCaixas = local
				break
			}
		}
	}

	return nil
}

// SetIDOperadorOperadoresCaixa of the caixa to the related item.
// Sets o.R.IDOperadorOperadoresCaixa to related.
// Adds o to related.R.IDOperadorCaixas.
func (o *Caixa) SetIDOperadorOperadoresCaixa(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OperadorCaixa) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"caixas\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_operador"}),
		strmangle.WhereClause("\"", "\"", 2, caixaPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDOperador = related.ID
	if o.R == nil {
		o.R = &caixaR{
			IDOperadorOperadoresCaixa: related,
		}
	} else {
		o.R.IDOperadorOperadoresCaixa = related
	}

	if related.R == nil {
		related.R = &operadorCaixaR{
			IDOperadorCaixas: o,
		}
	} else {
		related.R.IDOperadorCaixas = o
	}

	return nil
}

// SetTenant of the caixa to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.Caixas.
func (o *Caixa) SetTenant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"caixas\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, caixaPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &caixaR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			Caixas: CaixaSlice{o},
		}
	} else {
		related.R.Caixas = append(related.R.Caixas, o)
	}

	return nil
}

// AddIDCaixaCaixaFechamentoFormas adds the given related objects to the existing relationships
// of the caixas, optionally inserting them as new records.
// Appends related to o.R.IDCaixaCaixaFechamentoFormas.
// Sets related.R.IDCaixaCaixas appropriately.
func (o *Caixa) AddIDCaixaCaixaFechamentoFormas(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CaixaFechamentoForma) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDCaixa = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"caixa_fechamento_formas\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_caixa"}),
				strmangle.WhereClause("\"", "\"", 2, caixaFechamentoFormaPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDCaixa = o.ID
		}
	}

	if o.R == nil {
		o.R = &caixaR{
			IDCaixaCaixaFechamentoFormas: related,
		}
	} else {
		o.R.IDCaixaCaixaFechamentoFormas = append(o.R.IDCaixaCaixaFechamentoFormas, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &caixaFechamentoFormaR{
				IDCaixaCaixas: o,
			}
		} else {
			rel.R.IDCaixaCaixas = o
		}
	}
	return nil
}

// AddIDCaixaCaixaMovimentacoes adds the given related objects to the existing relationships
// of the caixas, optionally inserting them as new records.
// Appends related to o.R.IDCaixaCaixaMovimentacoes.
// Sets related.R.IDCaixaCaixas appropriately.
func (o *Caixa) AddIDCaixaCaixaMovimentacoes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CaixaMovimentacao) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDCaixa = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"caixa_movimentacoes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_caixa"}),
				strmangle.WhereClause("\"", "\"", 2, caixaMovimentacaoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDCaixa = o.ID
		}
	}

	if o.R == nil {
		o.R = &caixaR{
			IDCaixaCaixaMovimentacoes: related,
		}
	} else {
		o.R.IDCaixaCaixaMovimentacoes = append(o.R.IDCaixaCaixaMovimentacoes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &caixaMovimentacaoR{
				IDCaixaCaixas: o,
			}
		} else {
			rel.R.IDCaixaCaixas = o
		}
	}
	return nil
}

// Caixas retrieves all the records using an executor.
func Caixas(mods ...qm.QueryMod) caixaQuery {
	mods = append(mods, qm.From("\"caixas\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"caixas\".*"})
	}

	return caixaQuery{q}
}

// FindCaixa retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCaixa(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Caixa, error) {
	caixaObj := &Caixa{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"caixas\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, caixaObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from caixas")
	}

	if err = caixaObj.doAfterSelectHooks(ctx, exec); err != nil {
		return caixaObj, err
	}

	return caixaObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Caixa) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no caixas provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(caixaColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	caixaInsertCacheMut.RLock()
	cache, cached := caixaInsertCache[key]
	caixaInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			caixaAllColumns,
			caixaColumnsWithDefault,
			caixaColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(caixaType, caixaMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(caixaType, caixaMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"caixas\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"caixas\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into caixas")
	}

	if !cached {
		caixaInsertCacheMut.Lock()
		caixaInsertCache[key] = cache
		caixaInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Caixa.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Caixa) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	caixaUpdateCacheMut.RLock()
	cache, cached := caixaUpdateCache[key]
	caixaUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			caixaAllColumns,
			caixaPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update caixas, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"caixas\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, caixaPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(caixaType, caixaMapping, append(wl, caixaPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update caixas row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for caixas")
	}

	if !cached {
		caixaUpdateCacheMut.Lock()
		caixaUpdateCache[key] = cache
		caixaUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q caixaQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for caixas")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for caixas")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CaixaSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), caixaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"caixas\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, caixaPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in caixa slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all caixa")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Caixa) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no caixas provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(caixaColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	caixaUpsertCacheMut.RLock()
	cache, cached := caixaUpsertCache[key]
	caixaUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			caixaAllColumns,
			caixaColumnsWithDefault,
			caixaColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			caixaAllColumns,
			caixaPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert caixas, could not build update column list")
		}

		ret := strmangle.SetComplement(caixaAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(caixaPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert caixas, could not build conflict column list")
			}

			conflict = make([]string, len(caixaPrimaryKeyColumns))
			copy(conflict, caixaPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"caixas\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(caixaType, caixaMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(caixaType, caixaMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert caixas")
	}

	if !cached {
		caixaUpsertCacheMut.Lock()
		caixaUpsertCache[key] = cache
		caixaUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Caixa record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Caixa) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no Caixa provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), caixaPrimaryKeyMapping)
	sql := "DELETE FROM \"caixas\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from caixas")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for caixas")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q caixaQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no caixaQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from caixas")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for caixas")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CaixaSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(caixaBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), caixaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"caixas\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, caixaPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from caixa slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for caixas")
	}

	if len(caixaAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Caixa) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCaixa(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CaixaSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CaixaSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), caixaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"caixas\".* FROM \"caixas\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, caixaPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in CaixaSlice")
	}

	*o = slice

	return nil
}

// CaixaExists checks if the Caixa row exists.
func CaixaExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"caixas\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if caixas exists")
	}

	return exists, nil
}

// Exists checks if the Caixa row exists.
func (o *Caixa) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CaixaExists(ctx, exec, o.ID)
}
