// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ContasReceber is an object representing the database table.
type ContasReceber struct {
	ID          string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	IDPedido    string            `boil:"id_pedido" json:"id_pedido" toml:"id_pedido" yaml:"id_pedido"`
	Parcela     int16             `boil:"parcela" json:"parcela" toml:"parcela" yaml:"parcela"`
	Vencimento  time.Time         `boil:"vencimento" json:"vencimento" toml:"vencimento" yaml:"vencimento"`
	ValorDevido types.Decimal     `boil:"valor_devido" json:"valor_devido" toml:"valor_devido" yaml:"valor_devido"`
	ValorPago   types.NullDecimal `boil:"valor_pago" json:"valor_pago,omitempty" toml:"valor_pago" yaml:"valor_pago,omitempty"`
	Quitado     null.Bool         `boil:"quitado" json:"quitado,omitempty" toml:"quitado" yaml:"quitado,omitempty"`
	CreatedAt   time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *contasReceberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L contasReceberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContasReceberColumns = struct {
	ID          string
	IDPedido    string
	Parcela     string
	Vencimento  string
	ValorDevido string
	ValorPago   string
	Quitado     string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	IDPedido:    "id_pedido",
	Parcela:     "parcela",
	Vencimento:  "vencimento",
	ValorDevido: "valor_devido",
	ValorPago:   "valor_pago",
	Quitado:     "quitado",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var ContasReceberTableColumns = struct {
	ID          string
	IDPedido    string
	Parcela     string
	Vencimento  string
	ValorDevido string
	ValorPago   string
	Quitado     string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "contas_receber.id",
	IDPedido:    "contas_receber.id_pedido",
	Parcela:     "contas_receber.parcela",
	Vencimento:  "contas_receber.vencimento",
	ValorDevido: "contas_receber.valor_devido",
	ValorPago:   "contas_receber.valor_pago",
	Quitado:     "contas_receber.quitado",
	CreatedAt:   "contas_receber.created_at",
	UpdatedAt:   "contas_receber.updated_at",
}

// Generated where

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ContasReceberWhere = struct {
	ID          whereHelperstring
	IDPedido    whereHelperstring
	Parcela     whereHelperint16
	Vencimento  whereHelpertime_Time
	ValorDevido whereHelpertypes_Decimal
	ValorPago   whereHelpertypes_NullDecimal
	Quitado     whereHelpernull_Bool
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperstring{field: "\"contas_receber\".\"id\""},
	IDPedido:    whereHelperstring{field: "\"contas_receber\".\"id_pedido\""},
	Parcela:     whereHelperint16{field: "\"contas_receber\".\"parcela\""},
	Vencimento:  whereHelpertime_Time{field: "\"contas_receber\".\"vencimento\""},
	ValorDevido: whereHelpertypes_Decimal{field: "\"contas_receber\".\"valor_devido\""},
	ValorPago:   whereHelpertypes_NullDecimal{field: "\"contas_receber\".\"valor_pago\""},
	Quitado:     whereHelpernull_Bool{field: "\"contas_receber\".\"quitado\""},
	CreatedAt:   whereHelpertime_Time{field: "\"contas_receber\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"contas_receber\".\"updated_at\""},
}

// ContasReceberRels is where relationship names are stored.
var ContasReceberRels = struct {
	IDPedidoPedido string
}{
	IDPedidoPedido: "IDPedidoPedido",
}

// contasReceberR is where relationships are stored.
type contasReceberR struct {
	IDPedidoPedido *Pedido `boil:"IDPedidoPedido" json:"IDPedidoPedido" toml:"IDPedidoPedido" yaml:"IDPedidoPedido"`
}

// NewStruct creates a new relationship struct
func (*contasReceberR) NewStruct() *contasReceberR {
	return &contasReceberR{}
}

func (r *contasReceberR) GetIDPedidoPedido() *Pedido {
	if r == nil {
		return nil
	}
	return r.IDPedidoPedido
}

// contasReceberL is where Load methods for each relationship are stored.
type contasReceberL struct{}

var (
	contasReceberAllColumns            = []string{"id", "id_pedido", "parcela", "vencimento", "valor_devido", "valor_pago", "quitado", "created_at", "updated_at"}
	contasReceberColumnsWithoutDefault = []string{"id_pedido", "parcela", "vencimento", "valor_devido"}
	contasReceberColumnsWithDefault    = []string{"id", "valor_pago", "quitado", "created_at", "updated_at"}
	contasReceberPrimaryKeyColumns     = []string{"id"}
	contasReceberGeneratedColumns      = []string{"quitado"}
)

type (
	// ContasReceberSlice is an alias for a slice of pointers to ContasReceber.
	// This should almost always be used instead of []ContasReceber.
	ContasReceberSlice []*ContasReceber
	// ContasReceberHook is the signature for custom ContasReceber hook methods
	ContasReceberHook func(context.Context, boil.ContextExecutor, *ContasReceber) error

	contasReceberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	contasReceberType                 = reflect.TypeOf(&ContasReceber{})
	contasReceberMapping              = queries.MakeStructMapping(contasReceberType)
	contasReceberPrimaryKeyMapping, _ = queries.BindMapping(contasReceberType, contasReceberMapping, contasReceberPrimaryKeyColumns)
	contasReceberInsertCacheMut       sync.RWMutex
	contasReceberInsertCache          = make(map[string]insertCache)
	contasReceberUpdateCacheMut       sync.RWMutex
	contasReceberUpdateCache          = make(map[string]updateCache)
	contasReceberUpsertCacheMut       sync.RWMutex
	contasReceberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var contasReceberAfterSelectMu sync.Mutex
var contasReceberAfterSelectHooks []ContasReceberHook

var contasReceberBeforeInsertMu sync.Mutex
var contasReceberBeforeInsertHooks []ContasReceberHook
var contasReceberAfterInsertMu sync.Mutex
var contasReceberAfterInsertHooks []ContasReceberHook

var contasReceberBeforeUpdateMu sync.Mutex
var contasReceberBeforeUpdateHooks []ContasReceberHook
var contasReceberAfterUpdateMu sync.Mutex
var contasReceberAfterUpdateHooks []ContasReceberHook

var contasReceberBeforeDeleteMu sync.Mutex
var contasReceberBeforeDeleteHooks []ContasReceberHook
var contasReceberAfterDeleteMu sync.Mutex
var contasReceberAfterDeleteHooks []ContasReceberHook

var contasReceberBeforeUpsertMu sync.Mutex
var contasReceberBeforeUpsertHooks []ContasReceberHook
var contasReceberAfterUpsertMu sync.Mutex
var contasReceberAfterUpsertHooks []ContasReceberHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ContasReceber) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contasReceberAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ContasReceber) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contasReceberBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ContasReceber) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contasReceberAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ContasReceber) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contasReceberBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ContasReceber) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contasReceberAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ContasReceber) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contasReceberBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ContasReceber) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contasReceberAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ContasReceber) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contasReceberBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ContasReceber) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contasReceberAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddContasReceberHook registers your hook function for all future operations.
func AddContasReceberHook(hookPoint boil.HookPoint, contasReceberHook ContasReceberHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		contasReceberAfterSelectMu.Lock()
		contasReceberAfterSelectHooks = append(contasReceberAfterSelectHooks, contasReceberHook)
		contasReceberAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		contasReceberBeforeInsertMu.Lock()
		contasReceberBeforeInsertHooks = append(contasReceberBeforeInsertHooks, contasReceberHook)
		contasReceberBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		contasReceberAfterInsertMu.Lock()
		contasReceberAfterInsertHooks = append(contasReceberAfterInsertHooks, contasReceberHook)
		contasReceberAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		contasReceberBeforeUpdateMu.Lock()
		contasReceberBeforeUpdateHooks = append(contasReceberBeforeUpdateHooks, contasReceberHook)
		contasReceberBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		contasReceberAfterUpdateMu.Lock()
		contasReceberAfterUpdateHooks = append(contasReceberAfterUpdateHooks, contasReceberHook)
		contasReceberAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		contasReceberBeforeDeleteMu.Lock()
		contasReceberBeforeDeleteHooks = append(contasReceberBeforeDeleteHooks, contasReceberHook)
		contasReceberBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		contasReceberAfterDeleteMu.Lock()
		contasReceberAfterDeleteHooks = append(contasReceberAfterDeleteHooks, contasReceberHook)
		contasReceberAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		contasReceberBeforeUpsertMu.Lock()
		contasReceberBeforeUpsertHooks = append(contasReceberBeforeUpsertHooks, contasReceberHook)
		contasReceberBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		contasReceberAfterUpsertMu.Lock()
		contasReceberAfterUpsertHooks = append(contasReceberAfterUpsertHooks, contasReceberHook)
		contasReceberAfterUpsertMu.Unlock()
	}
}

// One returns a single contasReceber record from the query.
func (q contasReceberQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ContasReceber, error) {
	o := &ContasReceber{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for contas_receber")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ContasReceber records from the query.
func (q contasReceberQuery) All(ctx context.Context, exec boil.ContextExecutor) (ContasReceberSlice, error) {
	var o []*ContasReceber

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to ContasReceber slice")
	}

	if len(contasReceberAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ContasReceber records in the query.
func (q contasReceberQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count contas_receber rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q contasReceberQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if contas_receber exists")
	}

	return count > 0, nil
}

// IDPedidoPedido pointed to by the foreign key.
func (o *ContasReceber) IDPedidoPedido(mods ...qm.QueryMod) pedidoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDPedido),
	}

	queryMods = append(queryMods, mods...)

	return Pedidos(queryMods...)
}

// LoadIDPedidoPedido allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contasReceberL) LoadIDPedidoPedido(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContasReceber interface{}, mods queries.Applicator) error {
	var slice []*ContasReceber
	var object *ContasReceber

	if singular {
		var ok bool
		object, ok = maybeContasReceber.(*ContasReceber)
		if !ok {
			object = new(ContasReceber)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContasReceber)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContasReceber))
			}
		}
	} else {
		s, ok := maybeContasReceber.(*[]*ContasReceber)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContasReceber)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContasReceber))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &contasReceberR{}
		}
		args[object.IDPedido] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contasReceberR{}
			}

			args[obj.IDPedido] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`pedidos`),
		qm.WhereIn(`pedidos.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pedido")
	}

	var resultSlice []*Pedido
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pedido")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pedidos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pedidos")
	}

	if len(pedidoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDPedidoPedido = foreign
		if foreign.R == nil {
			foreign.R = &pedidoR{}
		}
		foreign.R.IDPedidoContasRecebers = append(foreign.R.IDPedidoContasRecebers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDPedido == foreign.ID {
				local.R.IDPedidoPedido = foreign
				if foreign.R == nil {
					foreign.R = &pedidoR{}
				}
				foreign.R.IDPedidoContasRecebers = append(foreign.R.IDPedidoContasRecebers, local)
				break
			}
		}
	}

	return nil
}

// SetIDPedidoPedido of the contasReceber to the related item.
// Sets o.R.IDPedidoPedido to related.
// Adds o to related.R.IDPedidoContasRecebers.
func (o *ContasReceber) SetIDPedidoPedido(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pedido) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"contas_receber\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_pedido"}),
		strmangle.WhereClause("\"", "\"", 2, contasReceberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDPedido = related.ID
	if o.R == nil {
		o.R = &contasReceberR{
			IDPedidoPedido: related,
		}
	} else {
		o.R.IDPedidoPedido = related
	}

	if related.R == nil {
		related.R = &pedidoR{
			IDPedidoContasRecebers: ContasReceberSlice{o},
		}
	} else {
		related.R.IDPedidoContasRecebers = append(related.R.IDPedidoContasRecebers, o)
	}

	return nil
}

// ContasRecebers retrieves all the records using an executor.
func ContasRecebers(mods ...qm.QueryMod) contasReceberQuery {
	mods = append(mods, qm.From("\"contas_receber\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"contas_receber\".*"})
	}

	return contasReceberQuery{q}
}

// FindContasReceber retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContasReceber(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ContasReceber, error) {
	contasReceberObj := &ContasReceber{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"contas_receber\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, contasReceberObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from contas_receber")
	}

	if err = contasReceberObj.doAfterSelectHooks(ctx, exec); err != nil {
		return contasReceberObj, err
	}

	return contasReceberObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ContasReceber) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no contas_receber provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contasReceberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	contasReceberInsertCacheMut.RLock()
	cache, cached := contasReceberInsertCache[key]
	contasReceberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			contasReceberAllColumns,
			contasReceberColumnsWithDefault,
			contasReceberColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, contasReceberGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(contasReceberType, contasReceberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(contasReceberType, contasReceberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"contas_receber\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"contas_receber\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into contas_receber")
	}

	if !cached {
		contasReceberInsertCacheMut.Lock()
		contasReceberInsertCache[key] = cache
		contasReceberInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ContasReceber.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ContasReceber) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	contasReceberUpdateCacheMut.RLock()
	cache, cached := contasReceberUpdateCache[key]
	contasReceberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			contasReceberAllColumns,
			contasReceberPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, contasReceberGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update contas_receber, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"contas_receber\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, contasReceberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(contasReceberType, contasReceberMapping, append(wl, contasReceberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update contas_receber row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for contas_receber")
	}

	if !cached {
		contasReceberUpdateCacheMut.Lock()
		contasReceberUpdateCache[key] = cache
		contasReceberUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q contasReceberQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for contas_receber")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for contas_receber")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContasReceberSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contasReceberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"contas_receber\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, contasReceberPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in contasReceber slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all contasReceber")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ContasReceber) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no contas_receber provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contasReceberColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	contasReceberUpsertCacheMut.RLock()
	cache, cached := contasReceberUpsertCache[key]
	contasReceberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			contasReceberAllColumns,
			contasReceberColumnsWithDefault,
			contasReceberColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			contasReceberAllColumns,
			contasReceberPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, contasReceberGeneratedColumns)
		update = strmangle.SetComplement(update, contasReceberGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert contas_receber, could not build update column list")
		}

		ret := strmangle.SetComplement(contasReceberAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(contasReceberPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert contas_receber, could not build conflict column list")
			}

			conflict = make([]string, len(contasReceberPrimaryKeyColumns))
			copy(conflict, contasReceberPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"contas_receber\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(contasReceberType, contasReceberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(contasReceberType, contasReceberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert contas_receber")
	}

	if !cached {
		contasReceberUpsertCacheMut.Lock()
		contasReceberUpsertCache[key] = cache
		contasReceberUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ContasReceber record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ContasReceber) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no ContasReceber provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), contasReceberPrimaryKeyMapping)
	sql := "DELETE FROM \"contas_receber\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from contas_receber")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for contas_receber")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q contasReceberQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no contasReceberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from contas_receber")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for contas_receber")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContasReceberSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(contasReceberBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contasReceberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"contas_receber\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contasReceberPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from contasReceber slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for contas_receber")
	}

	if len(contasReceberAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ContasReceber) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindContasReceber(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContasReceberSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContasReceberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contasReceberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"contas_receber\".* FROM \"contas_receber\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contasReceberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in ContasReceberSlice")
	}

	*o = slice

	return nil
}

// ContasReceberExists checks if the ContasReceber row exists.
func ContasReceberExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"contas_receber\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if contas_receber exists")
	}

	return exists, nil
}

// Exists checks if the ContasReceber row exists.
func (o *ContasReceber) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ContasReceberExists(ctx, exec, o.ID)
}
