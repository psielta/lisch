// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PedidoStatus is an object representing the database table.
type PedidoStatus struct {
	ID        int16  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Descricao string `boil:"descricao" json:"descricao" toml:"descricao" yaml:"descricao"`

	R *pedidoStatusR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pedidoStatusL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PedidoStatusColumns = struct {
	ID        string
	Descricao string
}{
	ID:        "id",
	Descricao: "descricao",
}

var PedidoStatusTableColumns = struct {
	ID        string
	Descricao string
}{
	ID:        "pedido_status.id",
	Descricao: "pedido_status.descricao",
}

// Generated where

var PedidoStatusWhere = struct {
	ID        whereHelperint16
	Descricao whereHelperstring
}{
	ID:        whereHelperint16{field: "\"pedido_status\".\"id\""},
	Descricao: whereHelperstring{field: "\"pedido_status\".\"descricao\""},
}

// PedidoStatusRels is where relationship names are stored.
var PedidoStatusRels = struct {
	IDStatusPedidos string
}{
	IDStatusPedidos: "IDStatusPedidos",
}

// pedidoStatusR is where relationships are stored.
type pedidoStatusR struct {
	IDStatusPedidos PedidoSlice `boil:"IDStatusPedidos" json:"IDStatusPedidos" toml:"IDStatusPedidos" yaml:"IDStatusPedidos"`
}

// NewStruct creates a new relationship struct
func (*pedidoStatusR) NewStruct() *pedidoStatusR {
	return &pedidoStatusR{}
}

func (r *pedidoStatusR) GetIDStatusPedidos() PedidoSlice {
	if r == nil {
		return nil
	}
	return r.IDStatusPedidos
}

// pedidoStatusL is where Load methods for each relationship are stored.
type pedidoStatusL struct{}

var (
	pedidoStatusAllColumns            = []string{"id", "descricao"}
	pedidoStatusColumnsWithoutDefault = []string{"id", "descricao"}
	pedidoStatusColumnsWithDefault    = []string{}
	pedidoStatusPrimaryKeyColumns     = []string{"id"}
	pedidoStatusGeneratedColumns      = []string{}
)

type (
	// PedidoStatusSlice is an alias for a slice of pointers to PedidoStatus.
	// This should almost always be used instead of []PedidoStatus.
	PedidoStatusSlice []*PedidoStatus
	// PedidoStatusHook is the signature for custom PedidoStatus hook methods
	PedidoStatusHook func(context.Context, boil.ContextExecutor, *PedidoStatus) error

	pedidoStatusQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pedidoStatusType                 = reflect.TypeOf(&PedidoStatus{})
	pedidoStatusMapping              = queries.MakeStructMapping(pedidoStatusType)
	pedidoStatusPrimaryKeyMapping, _ = queries.BindMapping(pedidoStatusType, pedidoStatusMapping, pedidoStatusPrimaryKeyColumns)
	pedidoStatusInsertCacheMut       sync.RWMutex
	pedidoStatusInsertCache          = make(map[string]insertCache)
	pedidoStatusUpdateCacheMut       sync.RWMutex
	pedidoStatusUpdateCache          = make(map[string]updateCache)
	pedidoStatusUpsertCacheMut       sync.RWMutex
	pedidoStatusUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pedidoStatusAfterSelectMu sync.Mutex
var pedidoStatusAfterSelectHooks []PedidoStatusHook

var pedidoStatusBeforeInsertMu sync.Mutex
var pedidoStatusBeforeInsertHooks []PedidoStatusHook
var pedidoStatusAfterInsertMu sync.Mutex
var pedidoStatusAfterInsertHooks []PedidoStatusHook

var pedidoStatusBeforeUpdateMu sync.Mutex
var pedidoStatusBeforeUpdateHooks []PedidoStatusHook
var pedidoStatusAfterUpdateMu sync.Mutex
var pedidoStatusAfterUpdateHooks []PedidoStatusHook

var pedidoStatusBeforeDeleteMu sync.Mutex
var pedidoStatusBeforeDeleteHooks []PedidoStatusHook
var pedidoStatusAfterDeleteMu sync.Mutex
var pedidoStatusAfterDeleteHooks []PedidoStatusHook

var pedidoStatusBeforeUpsertMu sync.Mutex
var pedidoStatusBeforeUpsertHooks []PedidoStatusHook
var pedidoStatusAfterUpsertMu sync.Mutex
var pedidoStatusAfterUpsertHooks []PedidoStatusHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PedidoStatus) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoStatusAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PedidoStatus) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoStatusBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PedidoStatus) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoStatusAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PedidoStatus) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoStatusBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PedidoStatus) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoStatusAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PedidoStatus) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoStatusBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PedidoStatus) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoStatusAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PedidoStatus) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoStatusBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PedidoStatus) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoStatusAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPedidoStatusHook registers your hook function for all future operations.
func AddPedidoStatusHook(hookPoint boil.HookPoint, pedidoStatusHook PedidoStatusHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		pedidoStatusAfterSelectMu.Lock()
		pedidoStatusAfterSelectHooks = append(pedidoStatusAfterSelectHooks, pedidoStatusHook)
		pedidoStatusAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		pedidoStatusBeforeInsertMu.Lock()
		pedidoStatusBeforeInsertHooks = append(pedidoStatusBeforeInsertHooks, pedidoStatusHook)
		pedidoStatusBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		pedidoStatusAfterInsertMu.Lock()
		pedidoStatusAfterInsertHooks = append(pedidoStatusAfterInsertHooks, pedidoStatusHook)
		pedidoStatusAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		pedidoStatusBeforeUpdateMu.Lock()
		pedidoStatusBeforeUpdateHooks = append(pedidoStatusBeforeUpdateHooks, pedidoStatusHook)
		pedidoStatusBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		pedidoStatusAfterUpdateMu.Lock()
		pedidoStatusAfterUpdateHooks = append(pedidoStatusAfterUpdateHooks, pedidoStatusHook)
		pedidoStatusAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		pedidoStatusBeforeDeleteMu.Lock()
		pedidoStatusBeforeDeleteHooks = append(pedidoStatusBeforeDeleteHooks, pedidoStatusHook)
		pedidoStatusBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		pedidoStatusAfterDeleteMu.Lock()
		pedidoStatusAfterDeleteHooks = append(pedidoStatusAfterDeleteHooks, pedidoStatusHook)
		pedidoStatusAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		pedidoStatusBeforeUpsertMu.Lock()
		pedidoStatusBeforeUpsertHooks = append(pedidoStatusBeforeUpsertHooks, pedidoStatusHook)
		pedidoStatusBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		pedidoStatusAfterUpsertMu.Lock()
		pedidoStatusAfterUpsertHooks = append(pedidoStatusAfterUpsertHooks, pedidoStatusHook)
		pedidoStatusAfterUpsertMu.Unlock()
	}
}

// One returns a single pedidoStatus record from the query.
func (q pedidoStatusQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PedidoStatus, error) {
	o := &PedidoStatus{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for pedido_status")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PedidoStatus records from the query.
func (q pedidoStatusQuery) All(ctx context.Context, exec boil.ContextExecutor) (PedidoStatusSlice, error) {
	var o []*PedidoStatus

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to PedidoStatus slice")
	}

	if len(pedidoStatusAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PedidoStatus records in the query.
func (q pedidoStatusQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count pedido_status rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pedidoStatusQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if pedido_status exists")
	}

	return count > 0, nil
}

// IDStatusPedidos retrieves all the pedido's Pedidos with an executor via id_status column.
func (o *PedidoStatus) IDStatusPedidos(mods ...qm.QueryMod) pedidoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"pedidos\".\"id_status\"=?", o.ID),
	)

	return Pedidos(queryMods...)
}

// LoadIDStatusPedidos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pedidoStatusL) LoadIDStatusPedidos(ctx context.Context, e boil.ContextExecutor, singular bool, maybePedidoStatus interface{}, mods queries.Applicator) error {
	var slice []*PedidoStatus
	var object *PedidoStatus

	if singular {
		var ok bool
		object, ok = maybePedidoStatus.(*PedidoStatus)
		if !ok {
			object = new(PedidoStatus)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePedidoStatus)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePedidoStatus))
			}
		}
	} else {
		s, ok := maybePedidoStatus.(*[]*PedidoStatus)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePedidoStatus)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePedidoStatus))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pedidoStatusR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pedidoStatusR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`pedidos`),
		qm.WhereIn(`pedidos.id_status in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pedidos")
	}

	var resultSlice []*Pedido
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pedidos")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pedidos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pedidos")
	}

	if len(pedidoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDStatusPedidos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pedidoR{}
			}
			foreign.R.IDStatusPedidoStatus = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDStatus {
				local.R.IDStatusPedidos = append(local.R.IDStatusPedidos, foreign)
				if foreign.R == nil {
					foreign.R = &pedidoR{}
				}
				foreign.R.IDStatusPedidoStatus = local
				break
			}
		}
	}

	return nil
}

// AddIDStatusPedidos adds the given related objects to the existing relationships
// of the pedido_status, optionally inserting them as new records.
// Appends related to o.R.IDStatusPedidos.
// Sets related.R.IDStatusPedidoStatus appropriately.
func (o *PedidoStatus) AddIDStatusPedidos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Pedido) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDStatus = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"pedidos\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_status"}),
				strmangle.WhereClause("\"", "\"", 2, pedidoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDStatus = o.ID
		}
	}

	if o.R == nil {
		o.R = &pedidoStatusR{
			IDStatusPedidos: related,
		}
	} else {
		o.R.IDStatusPedidos = append(o.R.IDStatusPedidos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pedidoR{
				IDStatusPedidoStatus: o,
			}
		} else {
			rel.R.IDStatusPedidoStatus = o
		}
	}
	return nil
}

// PedidoStatuses retrieves all the records using an executor.
func PedidoStatuses(mods ...qm.QueryMod) pedidoStatusQuery {
	mods = append(mods, qm.From("\"pedido_status\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"pedido_status\".*"})
	}

	return pedidoStatusQuery{q}
}

// FindPedidoStatus retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPedidoStatus(ctx context.Context, exec boil.ContextExecutor, iD int16, selectCols ...string) (*PedidoStatus, error) {
	pedidoStatusObj := &PedidoStatus{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pedido_status\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pedidoStatusObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from pedido_status")
	}

	if err = pedidoStatusObj.doAfterSelectHooks(ctx, exec); err != nil {
		return pedidoStatusObj, err
	}

	return pedidoStatusObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PedidoStatus) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no pedido_status provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pedidoStatusColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pedidoStatusInsertCacheMut.RLock()
	cache, cached := pedidoStatusInsertCache[key]
	pedidoStatusInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pedidoStatusAllColumns,
			pedidoStatusColumnsWithDefault,
			pedidoStatusColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pedidoStatusType, pedidoStatusMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pedidoStatusType, pedidoStatusMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pedido_status\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pedido_status\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into pedido_status")
	}

	if !cached {
		pedidoStatusInsertCacheMut.Lock()
		pedidoStatusInsertCache[key] = cache
		pedidoStatusInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PedidoStatus.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PedidoStatus) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pedidoStatusUpdateCacheMut.RLock()
	cache, cached := pedidoStatusUpdateCache[key]
	pedidoStatusUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pedidoStatusAllColumns,
			pedidoStatusPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update pedido_status, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pedido_status\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pedidoStatusPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pedidoStatusType, pedidoStatusMapping, append(wl, pedidoStatusPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update pedido_status row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for pedido_status")
	}

	if !cached {
		pedidoStatusUpdateCacheMut.Lock()
		pedidoStatusUpdateCache[key] = cache
		pedidoStatusUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pedidoStatusQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for pedido_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for pedido_status")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PedidoStatusSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pedidoStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pedido_status\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pedidoStatusPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in pedidoStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all pedidoStatus")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PedidoStatus) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no pedido_status provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pedidoStatusColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pedidoStatusUpsertCacheMut.RLock()
	cache, cached := pedidoStatusUpsertCache[key]
	pedidoStatusUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			pedidoStatusAllColumns,
			pedidoStatusColumnsWithDefault,
			pedidoStatusColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pedidoStatusAllColumns,
			pedidoStatusPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert pedido_status, could not build update column list")
		}

		ret := strmangle.SetComplement(pedidoStatusAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(pedidoStatusPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert pedido_status, could not build conflict column list")
			}

			conflict = make([]string, len(pedidoStatusPrimaryKeyColumns))
			copy(conflict, pedidoStatusPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pedido_status\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(pedidoStatusType, pedidoStatusMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pedidoStatusType, pedidoStatusMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert pedido_status")
	}

	if !cached {
		pedidoStatusUpsertCacheMut.Lock()
		pedidoStatusUpsertCache[key] = cache
		pedidoStatusUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PedidoStatus record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PedidoStatus) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no PedidoStatus provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pedidoStatusPrimaryKeyMapping)
	sql := "DELETE FROM \"pedido_status\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from pedido_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for pedido_status")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pedidoStatusQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no pedidoStatusQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from pedido_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for pedido_status")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PedidoStatusSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pedidoStatusBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pedidoStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pedido_status\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pedidoStatusPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from pedidoStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for pedido_status")
	}

	if len(pedidoStatusAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PedidoStatus) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPedidoStatus(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PedidoStatusSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PedidoStatusSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pedidoStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pedido_status\".* FROM \"pedido_status\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pedidoStatusPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in PedidoStatusSlice")
	}

	*o = slice

	return nil
}

// PedidoStatusExists checks if the PedidoStatus row exists.
func PedidoStatusExists(ctx context.Context, exec boil.ContextExecutor, iD int16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pedido_status\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if pedido_status exists")
	}

	return exists, nil
}

// Exists checks if the PedidoStatus row exists.
func (o *PedidoStatus) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PedidoStatusExists(ctx, exec, o.ID)
}
