// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CategoriaAdicional is an object representing the database table.
type CategoriaAdicional struct {
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`
	// Identificador sequencial para facilitar CRUD
	SeqID       int64       `boil:"seq_id" json:"seq_id" toml:"seq_id" yaml:"seq_id"`
	IDCategoria string      `boil:"id_categoria" json:"id_categoria" toml:"id_categoria" yaml:"id_categoria"`
	CodigoTipo  null.String `boil:"codigo_tipo" json:"codigo_tipo,omitempty" toml:"codigo_tipo" yaml:"codigo_tipo,omitempty"`
	Nome        string      `boil:"nome" json:"nome" toml:"nome" yaml:"nome"`
	// U = Único (obrigatório escolher 1) | M = Múltiplo | Q = Quantidade múltipla
	Selecao string   `boil:"selecao" json:"selecao" toml:"selecao" yaml:"selecao"`
	Minimo  null.Int `boil:"minimo" json:"minimo,omitempty" toml:"minimo" yaml:"minimo,omitempty"`
	Limite  null.Int `boil:"limite" json:"limite,omitempty" toml:"limite" yaml:"limite,omitempty"`
	// 1 = ativo | 0 = inativo
	Status    int16     `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	IsMain    null.Bool `boil:"is_main" json:"is_main,omitempty" toml:"is_main" yaml:"is_main,omitempty"`

	R *categoriaAdicionalR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L categoriaAdicionalL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CategoriaAdicionalColumns = struct {
	ID          string
	SeqID       string
	IDCategoria string
	CodigoTipo  string
	Nome        string
	Selecao     string
	Minimo      string
	Limite      string
	Status      string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
	IsMain      string
}{
	ID:          "id",
	SeqID:       "seq_id",
	IDCategoria: "id_categoria",
	CodigoTipo:  "codigo_tipo",
	Nome:        "nome",
	Selecao:     "selecao",
	Minimo:      "minimo",
	Limite:      "limite",
	Status:      "status",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
	IsMain:      "is_main",
}

var CategoriaAdicionalTableColumns = struct {
	ID          string
	SeqID       string
	IDCategoria string
	CodigoTipo  string
	Nome        string
	Selecao     string
	Minimo      string
	Limite      string
	Status      string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
	IsMain      string
}{
	ID:          "categoria_adicionais.id",
	SeqID:       "categoria_adicionais.seq_id",
	IDCategoria: "categoria_adicionais.id_categoria",
	CodigoTipo:  "categoria_adicionais.codigo_tipo",
	Nome:        "categoria_adicionais.nome",
	Selecao:     "categoria_adicionais.selecao",
	Minimo:      "categoria_adicionais.minimo",
	Limite:      "categoria_adicionais.limite",
	Status:      "categoria_adicionais.status",
	CreatedAt:   "categoria_adicionais.created_at",
	UpdatedAt:   "categoria_adicionais.updated_at",
	DeletedAt:   "categoria_adicionais.deleted_at",
	IsMain:      "categoria_adicionais.is_main",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CategoriaAdicionalWhere = struct {
	ID          whereHelperstring
	SeqID       whereHelperint64
	IDCategoria whereHelperstring
	CodigoTipo  whereHelpernull_String
	Nome        whereHelperstring
	Selecao     whereHelperstring
	Minimo      whereHelpernull_Int
	Limite      whereHelpernull_Int
	Status      whereHelperint16
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
	IsMain      whereHelpernull_Bool
}{
	ID:          whereHelperstring{field: "\"categoria_adicionais\".\"id\""},
	SeqID:       whereHelperint64{field: "\"categoria_adicionais\".\"seq_id\""},
	IDCategoria: whereHelperstring{field: "\"categoria_adicionais\".\"id_categoria\""},
	CodigoTipo:  whereHelpernull_String{field: "\"categoria_adicionais\".\"codigo_tipo\""},
	Nome:        whereHelperstring{field: "\"categoria_adicionais\".\"nome\""},
	Selecao:     whereHelperstring{field: "\"categoria_adicionais\".\"selecao\""},
	Minimo:      whereHelpernull_Int{field: "\"categoria_adicionais\".\"minimo\""},
	Limite:      whereHelpernull_Int{field: "\"categoria_adicionais\".\"limite\""},
	Status:      whereHelperint16{field: "\"categoria_adicionais\".\"status\""},
	CreatedAt:   whereHelpertime_Time{field: "\"categoria_adicionais\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"categoria_adicionais\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"categoria_adicionais\".\"deleted_at\""},
	IsMain:      whereHelpernull_Bool{field: "\"categoria_adicionais\".\"is_main\""},
}

// CategoriaAdicionalRels is where relationship names are stored.
var CategoriaAdicionalRels = struct {
	IDCategorium                                 string
	IDCategoriaAdicionalCategoriaAdicionalOpcoes string
}{
	IDCategorium: "IDCategorium",
	IDCategoriaAdicionalCategoriaAdicionalOpcoes: "IDCategoriaAdicionalCategoriaAdicionalOpcoes",
}

// categoriaAdicionalR is where relationships are stored.
type categoriaAdicionalR struct {
	IDCategorium                                 *Categoria                   `boil:"IDCategorium" json:"IDCategorium" toml:"IDCategorium" yaml:"IDCategorium"`
	IDCategoriaAdicionalCategoriaAdicionalOpcoes CategoriaAdicionalOpcaoSlice `boil:"IDCategoriaAdicionalCategoriaAdicionalOpcoes" json:"IDCategoriaAdicionalCategoriaAdicionalOpcoes" toml:"IDCategoriaAdicionalCategoriaAdicionalOpcoes" yaml:"IDCategoriaAdicionalCategoriaAdicionalOpcoes"`
}

// NewStruct creates a new relationship struct
func (*categoriaAdicionalR) NewStruct() *categoriaAdicionalR {
	return &categoriaAdicionalR{}
}

func (r *categoriaAdicionalR) GetIDCategorium() *Categoria {
	if r == nil {
		return nil
	}
	return r.IDCategorium
}

func (r *categoriaAdicionalR) GetIDCategoriaAdicionalCategoriaAdicionalOpcoes() CategoriaAdicionalOpcaoSlice {
	if r == nil {
		return nil
	}
	return r.IDCategoriaAdicionalCategoriaAdicionalOpcoes
}

// categoriaAdicionalL is where Load methods for each relationship are stored.
type categoriaAdicionalL struct{}

var (
	categoriaAdicionalAllColumns            = []string{"id", "seq_id", "id_categoria", "codigo_tipo", "nome", "selecao", "minimo", "limite", "status", "created_at", "updated_at", "deleted_at", "is_main"}
	categoriaAdicionalColumnsWithoutDefault = []string{"seq_id", "id_categoria", "nome", "selecao", "status"}
	categoriaAdicionalColumnsWithDefault    = []string{"id", "codigo_tipo", "minimo", "limite", "created_at", "updated_at", "deleted_at", "is_main"}
	categoriaAdicionalPrimaryKeyColumns     = []string{"id"}
	categoriaAdicionalGeneratedColumns      = []string{}
)

type (
	// CategoriaAdicionalSlice is an alias for a slice of pointers to CategoriaAdicional.
	// This should almost always be used instead of []CategoriaAdicional.
	CategoriaAdicionalSlice []*CategoriaAdicional
	// CategoriaAdicionalHook is the signature for custom CategoriaAdicional hook methods
	CategoriaAdicionalHook func(context.Context, boil.ContextExecutor, *CategoriaAdicional) error

	categoriaAdicionalQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	categoriaAdicionalType                 = reflect.TypeOf(&CategoriaAdicional{})
	categoriaAdicionalMapping              = queries.MakeStructMapping(categoriaAdicionalType)
	categoriaAdicionalPrimaryKeyMapping, _ = queries.BindMapping(categoriaAdicionalType, categoriaAdicionalMapping, categoriaAdicionalPrimaryKeyColumns)
	categoriaAdicionalInsertCacheMut       sync.RWMutex
	categoriaAdicionalInsertCache          = make(map[string]insertCache)
	categoriaAdicionalUpdateCacheMut       sync.RWMutex
	categoriaAdicionalUpdateCache          = make(map[string]updateCache)
	categoriaAdicionalUpsertCacheMut       sync.RWMutex
	categoriaAdicionalUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var categoriaAdicionalAfterSelectMu sync.Mutex
var categoriaAdicionalAfterSelectHooks []CategoriaAdicionalHook

var categoriaAdicionalBeforeInsertMu sync.Mutex
var categoriaAdicionalBeforeInsertHooks []CategoriaAdicionalHook
var categoriaAdicionalAfterInsertMu sync.Mutex
var categoriaAdicionalAfterInsertHooks []CategoriaAdicionalHook

var categoriaAdicionalBeforeUpdateMu sync.Mutex
var categoriaAdicionalBeforeUpdateHooks []CategoriaAdicionalHook
var categoriaAdicionalAfterUpdateMu sync.Mutex
var categoriaAdicionalAfterUpdateHooks []CategoriaAdicionalHook

var categoriaAdicionalBeforeDeleteMu sync.Mutex
var categoriaAdicionalBeforeDeleteHooks []CategoriaAdicionalHook
var categoriaAdicionalAfterDeleteMu sync.Mutex
var categoriaAdicionalAfterDeleteHooks []CategoriaAdicionalHook

var categoriaAdicionalBeforeUpsertMu sync.Mutex
var categoriaAdicionalBeforeUpsertHooks []CategoriaAdicionalHook
var categoriaAdicionalAfterUpsertMu sync.Mutex
var categoriaAdicionalAfterUpsertHooks []CategoriaAdicionalHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CategoriaAdicional) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CategoriaAdicional) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CategoriaAdicional) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CategoriaAdicional) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CategoriaAdicional) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CategoriaAdicional) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CategoriaAdicional) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CategoriaAdicional) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CategoriaAdicional) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCategoriaAdicionalHook registers your hook function for all future operations.
func AddCategoriaAdicionalHook(hookPoint boil.HookPoint, categoriaAdicionalHook CategoriaAdicionalHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		categoriaAdicionalAfterSelectMu.Lock()
		categoriaAdicionalAfterSelectHooks = append(categoriaAdicionalAfterSelectHooks, categoriaAdicionalHook)
		categoriaAdicionalAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		categoriaAdicionalBeforeInsertMu.Lock()
		categoriaAdicionalBeforeInsertHooks = append(categoriaAdicionalBeforeInsertHooks, categoriaAdicionalHook)
		categoriaAdicionalBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		categoriaAdicionalAfterInsertMu.Lock()
		categoriaAdicionalAfterInsertHooks = append(categoriaAdicionalAfterInsertHooks, categoriaAdicionalHook)
		categoriaAdicionalAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		categoriaAdicionalBeforeUpdateMu.Lock()
		categoriaAdicionalBeforeUpdateHooks = append(categoriaAdicionalBeforeUpdateHooks, categoriaAdicionalHook)
		categoriaAdicionalBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		categoriaAdicionalAfterUpdateMu.Lock()
		categoriaAdicionalAfterUpdateHooks = append(categoriaAdicionalAfterUpdateHooks, categoriaAdicionalHook)
		categoriaAdicionalAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		categoriaAdicionalBeforeDeleteMu.Lock()
		categoriaAdicionalBeforeDeleteHooks = append(categoriaAdicionalBeforeDeleteHooks, categoriaAdicionalHook)
		categoriaAdicionalBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		categoriaAdicionalAfterDeleteMu.Lock()
		categoriaAdicionalAfterDeleteHooks = append(categoriaAdicionalAfterDeleteHooks, categoriaAdicionalHook)
		categoriaAdicionalAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		categoriaAdicionalBeforeUpsertMu.Lock()
		categoriaAdicionalBeforeUpsertHooks = append(categoriaAdicionalBeforeUpsertHooks, categoriaAdicionalHook)
		categoriaAdicionalBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		categoriaAdicionalAfterUpsertMu.Lock()
		categoriaAdicionalAfterUpsertHooks = append(categoriaAdicionalAfterUpsertHooks, categoriaAdicionalHook)
		categoriaAdicionalAfterUpsertMu.Unlock()
	}
}

// One returns a single categoriaAdicional record from the query.
func (q categoriaAdicionalQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CategoriaAdicional, error) {
	o := &CategoriaAdicional{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for categoria_adicionais")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CategoriaAdicional records from the query.
func (q categoriaAdicionalQuery) All(ctx context.Context, exec boil.ContextExecutor) (CategoriaAdicionalSlice, error) {
	var o []*CategoriaAdicional

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to CategoriaAdicional slice")
	}

	if len(categoriaAdicionalAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CategoriaAdicional records in the query.
func (q categoriaAdicionalQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count categoria_adicionais rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q categoriaAdicionalQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if categoria_adicionais exists")
	}

	return count > 0, nil
}

// IDCategorium pointed to by the foreign key.
func (o *CategoriaAdicional) IDCategorium(mods ...qm.QueryMod) categoriaQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDCategoria),
	}

	queryMods = append(queryMods, mods...)

	return Categorias(queryMods...)
}

// IDCategoriaAdicionalCategoriaAdicionalOpcoes retrieves all the categoria_adicional_opco's CategoriaAdicionalOpcoes with an executor via id_categoria_adicional column.
func (o *CategoriaAdicional) IDCategoriaAdicionalCategoriaAdicionalOpcoes(mods ...qm.QueryMod) categoriaAdicionalOpcaoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"categoria_adicional_opcoes\".\"id_categoria_adicional\"=?", o.ID),
	)

	return CategoriaAdicionalOpcoes(queryMods...)
}

// LoadIDCategorium allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (categoriaAdicionalL) LoadIDCategorium(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategoriaAdicional interface{}, mods queries.Applicator) error {
	var slice []*CategoriaAdicional
	var object *CategoriaAdicional

	if singular {
		var ok bool
		object, ok = maybeCategoriaAdicional.(*CategoriaAdicional)
		if !ok {
			object = new(CategoriaAdicional)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategoriaAdicional)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategoriaAdicional))
			}
		}
	} else {
		s, ok := maybeCategoriaAdicional.(*[]*CategoriaAdicional)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategoriaAdicional)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategoriaAdicional))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &categoriaAdicionalR{}
		}
		args[object.IDCategoria] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoriaAdicionalR{}
			}

			args[obj.IDCategoria] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categorias`),
		qm.WhereIn(`categorias.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Categoria")
	}

	var resultSlice []*Categoria
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Categoria")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categorias")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categorias")
	}

	if len(categoriaAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDCategorium = foreign
		if foreign.R == nil {
			foreign.R = &categoriaR{}
		}
		foreign.R.IDCategoriumCategoriaAdicionais = append(foreign.R.IDCategoriumCategoriaAdicionais, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDCategoria == foreign.ID {
				local.R.IDCategorium = foreign
				if foreign.R == nil {
					foreign.R = &categoriaR{}
				}
				foreign.R.IDCategoriumCategoriaAdicionais = append(foreign.R.IDCategoriumCategoriaAdicionais, local)
				break
			}
		}
	}

	return nil
}

// LoadIDCategoriaAdicionalCategoriaAdicionalOpcoes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (categoriaAdicionalL) LoadIDCategoriaAdicionalCategoriaAdicionalOpcoes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategoriaAdicional interface{}, mods queries.Applicator) error {
	var slice []*CategoriaAdicional
	var object *CategoriaAdicional

	if singular {
		var ok bool
		object, ok = maybeCategoriaAdicional.(*CategoriaAdicional)
		if !ok {
			object = new(CategoriaAdicional)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategoriaAdicional)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategoriaAdicional))
			}
		}
	} else {
		s, ok := maybeCategoriaAdicional.(*[]*CategoriaAdicional)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategoriaAdicional)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategoriaAdicional))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &categoriaAdicionalR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoriaAdicionalR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categoria_adicional_opcoes`),
		qm.WhereIn(`categoria_adicional_opcoes.id_categoria_adicional in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load categoria_adicional_opcoes")
	}

	var resultSlice []*CategoriaAdicionalOpcao
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice categoria_adicional_opcoes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on categoria_adicional_opcoes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categoria_adicional_opcoes")
	}

	if len(categoriaAdicionalOpcaoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDCategoriaAdicionalCategoriaAdicionalOpcoes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &categoriaAdicionalOpcaoR{}
			}
			foreign.R.IDCategoriaAdicionalCategoriaAdicionais = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDCategoriaAdicional {
				local.R.IDCategoriaAdicionalCategoriaAdicionalOpcoes = append(local.R.IDCategoriaAdicionalCategoriaAdicionalOpcoes, foreign)
				if foreign.R == nil {
					foreign.R = &categoriaAdicionalOpcaoR{}
				}
				foreign.R.IDCategoriaAdicionalCategoriaAdicionais = local
				break
			}
		}
	}

	return nil
}

// SetIDCategorium of the categoriaAdicional to the related item.
// Sets o.R.IDCategorium to related.
// Adds o to related.R.IDCategoriumCategoriaAdicionais.
func (o *CategoriaAdicional) SetIDCategorium(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Categoria) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"categoria_adicionais\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_categoria"}),
		strmangle.WhereClause("\"", "\"", 2, categoriaAdicionalPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDCategoria = related.ID
	if o.R == nil {
		o.R = &categoriaAdicionalR{
			IDCategorium: related,
		}
	} else {
		o.R.IDCategorium = related
	}

	if related.R == nil {
		related.R = &categoriaR{
			IDCategoriumCategoriaAdicionais: CategoriaAdicionalSlice{o},
		}
	} else {
		related.R.IDCategoriumCategoriaAdicionais = append(related.R.IDCategoriumCategoriaAdicionais, o)
	}

	return nil
}

// AddIDCategoriaAdicionalCategoriaAdicionalOpcoes adds the given related objects to the existing relationships
// of the categoria_adicionais, optionally inserting them as new records.
// Appends related to o.R.IDCategoriaAdicionalCategoriaAdicionalOpcoes.
// Sets related.R.IDCategoriaAdicionalCategoriaAdicionais appropriately.
func (o *CategoriaAdicional) AddIDCategoriaAdicionalCategoriaAdicionalOpcoes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CategoriaAdicionalOpcao) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDCategoriaAdicional = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"categoria_adicional_opcoes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_categoria_adicional"}),
				strmangle.WhereClause("\"", "\"", 2, categoriaAdicionalOpcaoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDCategoriaAdicional = o.ID
		}
	}

	if o.R == nil {
		o.R = &categoriaAdicionalR{
			IDCategoriaAdicionalCategoriaAdicionalOpcoes: related,
		}
	} else {
		o.R.IDCategoriaAdicionalCategoriaAdicionalOpcoes = append(o.R.IDCategoriaAdicionalCategoriaAdicionalOpcoes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &categoriaAdicionalOpcaoR{
				IDCategoriaAdicionalCategoriaAdicionais: o,
			}
		} else {
			rel.R.IDCategoriaAdicionalCategoriaAdicionais = o
		}
	}
	return nil
}

// CategoriaAdicionais retrieves all the records using an executor.
func CategoriaAdicionais(mods ...qm.QueryMod) categoriaAdicionalQuery {
	mods = append(mods, qm.From("\"categoria_adicionais\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"categoria_adicionais\".*"})
	}

	return categoriaAdicionalQuery{q}
}

// FindCategoriaAdicional retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCategoriaAdicional(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CategoriaAdicional, error) {
	categoriaAdicionalObj := &CategoriaAdicional{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"categoria_adicionais\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, categoriaAdicionalObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from categoria_adicionais")
	}

	if err = categoriaAdicionalObj.doAfterSelectHooks(ctx, exec); err != nil {
		return categoriaAdicionalObj, err
	}

	return categoriaAdicionalObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CategoriaAdicional) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no categoria_adicionais provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(categoriaAdicionalColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	categoriaAdicionalInsertCacheMut.RLock()
	cache, cached := categoriaAdicionalInsertCache[key]
	categoriaAdicionalInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			categoriaAdicionalAllColumns,
			categoriaAdicionalColumnsWithDefault,
			categoriaAdicionalColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(categoriaAdicionalType, categoriaAdicionalMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(categoriaAdicionalType, categoriaAdicionalMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"categoria_adicionais\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"categoria_adicionais\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into categoria_adicionais")
	}

	if !cached {
		categoriaAdicionalInsertCacheMut.Lock()
		categoriaAdicionalInsertCache[key] = cache
		categoriaAdicionalInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CategoriaAdicional.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CategoriaAdicional) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	categoriaAdicionalUpdateCacheMut.RLock()
	cache, cached := categoriaAdicionalUpdateCache[key]
	categoriaAdicionalUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			categoriaAdicionalAllColumns,
			categoriaAdicionalPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update categoria_adicionais, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"categoria_adicionais\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, categoriaAdicionalPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(categoriaAdicionalType, categoriaAdicionalMapping, append(wl, categoriaAdicionalPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update categoria_adicionais row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for categoria_adicionais")
	}

	if !cached {
		categoriaAdicionalUpdateCacheMut.Lock()
		categoriaAdicionalUpdateCache[key] = cache
		categoriaAdicionalUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q categoriaAdicionalQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for categoria_adicionais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for categoria_adicionais")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CategoriaAdicionalSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoriaAdicionalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"categoria_adicionais\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, categoriaAdicionalPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in categoriaAdicional slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all categoriaAdicional")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CategoriaAdicional) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no categoria_adicionais provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(categoriaAdicionalColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	categoriaAdicionalUpsertCacheMut.RLock()
	cache, cached := categoriaAdicionalUpsertCache[key]
	categoriaAdicionalUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			categoriaAdicionalAllColumns,
			categoriaAdicionalColumnsWithDefault,
			categoriaAdicionalColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			categoriaAdicionalAllColumns,
			categoriaAdicionalPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert categoria_adicionais, could not build update column list")
		}

		ret := strmangle.SetComplement(categoriaAdicionalAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(categoriaAdicionalPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert categoria_adicionais, could not build conflict column list")
			}

			conflict = make([]string, len(categoriaAdicionalPrimaryKeyColumns))
			copy(conflict, categoriaAdicionalPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"categoria_adicionais\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(categoriaAdicionalType, categoriaAdicionalMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(categoriaAdicionalType, categoriaAdicionalMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert categoria_adicionais")
	}

	if !cached {
		categoriaAdicionalUpsertCacheMut.Lock()
		categoriaAdicionalUpsertCache[key] = cache
		categoriaAdicionalUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CategoriaAdicional record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CategoriaAdicional) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no CategoriaAdicional provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), categoriaAdicionalPrimaryKeyMapping)
	sql := "DELETE FROM \"categoria_adicionais\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from categoria_adicionais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for categoria_adicionais")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q categoriaAdicionalQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no categoriaAdicionalQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from categoria_adicionais")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for categoria_adicionais")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CategoriaAdicionalSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(categoriaAdicionalBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoriaAdicionalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"categoria_adicionais\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, categoriaAdicionalPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from categoriaAdicional slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for categoria_adicionais")
	}

	if len(categoriaAdicionalAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CategoriaAdicional) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCategoriaAdicional(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CategoriaAdicionalSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CategoriaAdicionalSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoriaAdicionalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"categoria_adicionais\".* FROM \"categoria_adicionais\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, categoriaAdicionalPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in CategoriaAdicionalSlice")
	}

	*o = slice

	return nil
}

// CategoriaAdicionalExists checks if the CategoriaAdicional row exists.
func CategoriaAdicionalExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"categoria_adicionais\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if categoria_adicionais exists")
	}

	return exists, nil
}

// Exists checks if the CategoriaAdicional row exists.
func (o *CategoriaAdicional) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CategoriaAdicionalExists(ctx, exec, o.ID)
}
