-- Write your migrate up statements here
/* ------------------------------------------------------------
   0.  PRÉ-REQUISITOS
------------------------------------------------------------ */
CREATE EXTENSION IF NOT EXISTS pgcrypto;

/* ------------------------------------------------------------
   1.  TABELA DE PAGAMENTOS DO PEDIDO
------------------------------------------------------------ */
CREATE TABLE public.pedido_pagamentos (
    id                   uuid    PRIMARY KEY DEFAULT gen_random_uuid(),
    seq_id               bigint  GENERATED BY DEFAULT AS IDENTITY,
    id_pedido            uuid    NOT NULL REFERENCES public.pedidos(id) ON DELETE CASCADE,
    /* FK da parcela será criada DEPOIS (item 8) */
    id_conta_receber     uuid,
    categoria_pagamento  varchar(50),
    forma_pagamento      varchar(100) NOT NULL,
    valor_pago           numeric(10,2) NOT NULL CHECK (valor_pago > 0),
    troco                numeric(10,2) DEFAULT 0 CHECK (troco >= 0),
    autorizado_por       uuid,
    observacao           text,
    created_at           timestamptz NOT NULL DEFAULT now(),
    updated_at           timestamptz NOT NULL DEFAULT now(),
    deleted_at           timestamptz
);

CREATE UNIQUE INDEX uidx_pagamentos_seq   ON public.pedido_pagamentos(seq_id);
CREATE INDEX        idx_pagamentos_pedido ON public.pedido_pagamentos(id_pedido)
                                           WHERE deleted_at IS NULL;

/* ------------------------------------------------------------
   2.  AJUSTES NA TABELA PEDIDOS
------------------------------------------------------------ */
ALTER TABLE public.pedidos
  ADD COLUMN valor_pago numeric(10,2) DEFAULT 0 NOT NULL,
  ADD COLUMN quitado    boolean       DEFAULT false;

/* ------------------------------------------------------------
   3.  FUNÇÃO DE RECÁLCULO DO PEDIDO
        (usa valor_total + taxa_entrega)
------------------------------------------------------------ */
CREATE OR REPLACE FUNCTION public.recalcular_pagamentos(p_pedido_id uuid)
RETURNS void LANGUAGE plpgsql AS $$
DECLARE
    v_total      numeric(10,2);
    v_valor_pago numeric(10,2);
BEGIN
    /* <<< troque taxa_entrega se o campo tiver outro nome >>> */
    SELECT valor_total + COALESCE(taxa_entrega,0)
      INTO v_total
      FROM public.pedidos
     WHERE id = p_pedido_id;

    SELECT COALESCE(SUM(valor_pago - troco),0)
      INTO v_valor_pago
      FROM public.pedido_pagamentos
     WHERE id_pedido = p_pedido_id
       AND deleted_at IS NULL;

    UPDATE public.pedidos
       SET valor_pago = v_valor_pago,
           quitado    = (v_valor_pago >= v_total),
           updated_at = now()
     WHERE id = p_pedido_id;
END;
$$;

/* ------------------------------------------------------------
   4.  FUNÇÕES AUXILIARES E TRIGGERS EM pedido_pagamentos
------------------------------------------------------------ */
-- updated_at automático
CREATE OR REPLACE FUNCTION public.update_updated_at()
RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
  NEW.updated_at := now();
  RETURN NEW;
END;
$$;
CREATE TRIGGER trg_pp_upd_at
BEFORE UPDATE ON public.pedido_pagamentos
FOR EACH ROW EXECUTE FUNCTION public.update_updated_at();

-- soft-delete (supondo existir a função abaixo — adapte se necessário)
-- CREATE FUNCTION public.soft_delete_record() …;
CREATE TRIGGER trg_pp_soft_delete
BEFORE DELETE ON public.pedido_pagamentos
FOR EACH ROW EXECUTE FUNCTION public.soft_delete_record();

-- chama recálculo do pedido
CREATE OR REPLACE FUNCTION public.trg_pp_recalc_total()
RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
  PERFORM public.recalcular_pagamentos(
          CASE WHEN TG_OP = 'DELETE' THEN OLD.id_pedido ELSE NEW.id_pedido END);
  RETURN NEW;
END;
$$;
CREATE TRIGGER trg_pp_after_iu_d
AFTER INSERT OR UPDATE OR DELETE ON public.pedido_pagamentos
FOR EACH ROW EXECUTE FUNCTION public.trg_pp_recalc_total();

/* ------------------------------------------------------------
   5.  GATILHO: pagamento não pode ultrapassar total restante
------------------------------------------------------------ */
CREATE OR REPLACE FUNCTION public.enforce_pagamento_nao_ultrapassa()
RETURNS trigger LANGUAGE plpgsql AS $$
DECLARE
  v_total           numeric(10,2);
  v_pago_anteriores numeric(10,2);
  v_restante        numeric(10,2);
BEGIN
  SELECT valor_total + COALESCE(taxa_entrega,0)
    INTO v_total
    FROM public.pedidos
   WHERE id = NEW.id_pedido;

  SELECT COALESCE(SUM(valor_pago - troco),0)
    INTO v_pago_anteriores
    FROM public.pedido_pagamentos
   WHERE id_pedido = NEW.id_pedido
     AND deleted_at IS NULL
     AND (TG_OP = 'INSERT' OR id <> OLD.id);  -- se UPDATE, desconsidera a própria linha

  v_restante := v_total - v_pago_anteriores;

  IF (NEW.valor_pago - NEW.troco) > v_restante THEN
     RAISE EXCEPTION
       'Pagamento (%.2f) excede o valor restante do pedido (%.2f)',
       NEW.valor_pago - NEW.troco, v_restante
       USING ERRCODE = 'P0001';
  END IF;

  RETURN NEW;
END;
$$;

CREATE TRIGGER trg_pp_chk_restante
BEFORE INSERT OR UPDATE ON public.pedido_pagamentos
FOR EACH ROW EXECUTE FUNCTION public.enforce_pagamento_nao_ultrapassa();

/* ------------------------------------------------------------
   6.  TABELA CONTAS A RECEBER
------------------------------------------------------------ */
CREATE TABLE public.contas_receber (
    id            uuid    PRIMARY KEY DEFAULT gen_random_uuid(),
    id_pedido     uuid    NOT NULL REFERENCES public.pedidos(id) ON DELETE CASCADE,
    parcela       smallint NOT NULL CHECK (parcela > 0),
    vencimento    date     NOT NULL,
    valor_devido  numeric(10,2) NOT NULL CHECK (valor_devido > 0),
    valor_pago    numeric(10,2) DEFAULT 0 CHECK (valor_pago >= 0),
    quitado       boolean GENERATED ALWAYS AS (valor_pago >= valor_devido) STORED,
    created_at    timestamptz NOT NULL DEFAULT now(),
    updated_at    timestamptz NOT NULL DEFAULT now()
);

-- 1 parcela única por pedido/parcela
CREATE UNIQUE INDEX uidx_cr_parcela
       ON public.contas_receber(id_pedido, parcela);

-- índice UNIQUE auxiliar para FK composta
CREATE UNIQUE INDEX uidx_cr_id_pedido
       ON public.contas_receber(id, id_pedido);

/* gatilho updated_at */
CREATE OR REPLACE FUNCTION public.set_updated_at()
RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
  NEW.updated_at := now();
  RETURN NEW;
END;
$$;
CREATE TRIGGER trg_cr_set_updated_at
BEFORE UPDATE ON public.contas_receber
FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();

/* ------------------------------------------------------------
   7.  RECÁLCULO DO VALOR PAGO EM CADA PARCELA
------------------------------------------------------------ */
CREATE OR REPLACE FUNCTION public.recalcular_conta_receber(p_conta_id uuid)
RETURNS void LANGUAGE plpgsql AS $$
DECLARE
  v_pago numeric(10,2);
BEGIN
  SELECT COALESCE(SUM(valor_pago - troco),0)
    INTO v_pago
    FROM public.pedido_pagamentos
   WHERE id_conta_receber = p_conta_id
     AND deleted_at IS NULL;

  UPDATE public.contas_receber
     SET valor_pago = v_pago,
         updated_at = now()
   WHERE id = p_conta_id;
END;
$$;

CREATE OR REPLACE FUNCTION public.trg_pp_recalc_cr()
RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
  IF TG_OP = 'DELETE' THEN
     IF OLD.id_conta_receber IS NOT NULL THEN
        PERFORM public.recalcular_conta_receber(OLD.id_conta_receber);
     END IF;
  ELSE
     IF NEW.id_conta_receber IS NOT NULL THEN
        PERFORM public.recalcular_conta_receber(NEW.id_conta_receber);
     END IF;
  END IF;
  RETURN NEW;
END;
$$;
CREATE TRIGGER trg_pp_after_cr
AFTER INSERT OR UPDATE OR DELETE ON public.pedido_pagamentos
FOR EACH ROW EXECUTE FUNCTION public.trg_pp_recalc_cr();

/* ------------------------------------------------------------
   8.  FK COMPOSTA ligando pagamento → (conta, pedido)
------------------------------------------------------------ */
ALTER TABLE public.pedido_pagamentos
  ADD CONSTRAINT fk_pp_conta_pedido
      FOREIGN KEY (id_conta_receber, id_pedido)
      REFERENCES public.contas_receber (id, id_pedido)
      ON DELETE SET NULL
      DEFERRABLE INITIALLY IMMEDIATE;


---- create above / drop below ----
/* =============================================================
   ROLLBACK TOTAL – remove objetos criados no migration “up”
   ============================================================= */

---------------------------------------------------------------
-- 1.  GATILHOS (precisam ser removidos antes das funções)
---------------------------------------------------------------
-- sobre pedido_pagamentos
DROP TRIGGER IF EXISTS trg_pp_after_cr       ON public.pedido_pagamentos;
DROP TRIGGER IF EXISTS trg_pp_chk_restante   ON public.pedido_pagamentos;
DROP TRIGGER IF EXISTS trg_pp_after_iu_d     ON public.pedido_pagamentos;
DROP TRIGGER IF EXISTS trg_pp_soft_delete    ON public.pedido_pagamentos;
DROP TRIGGER IF EXISTS trg_pp_upd_at         ON public.pedido_pagamentos;

-- sobre contas_receber
DROP TRIGGER IF EXISTS trg_cr_set_updated_at ON public.contas_receber;

---------------------------------------------------------------
-- 2.  FUNÇÕES criadas no “up”
---------------------------------------------------------------
DROP FUNCTION IF EXISTS public.trg_pp_recalc_cr();
DROP FUNCTION IF EXISTS public.recalcular_conta_receber(uuid);

DROP FUNCTION IF EXISTS public.enforce_pagamento_nao_ultrapassa();

DROP FUNCTION IF EXISTS public.trg_pp_recalc_total();
DROP FUNCTION IF EXISTS public.recalcular_pagamentos(uuid);

-- *Descomente só se estas funções forem exclusivas deste recurso*
DROP FUNCTION IF EXISTS public.update_updated_at();
DROP FUNCTION IF EXISTS public.set_updated_at();

---------------------------------------------------------------
-- 3.  RESTRIÇÕES, ÍNDICES e COLUNAS adicionadas
---------------------------------------------------------------
-- FK composta pagamentos → (conta, pedido)
ALTER TABLE IF EXISTS public.pedido_pagamentos
    DROP CONSTRAINT IF EXISTS fk_pp_conta_pedido;

-- Índice auxiliar da FK composta
DROP INDEX IF EXISTS public.uidx_cr_id_pedido;

-- Coluna que apontava para a parcela
ALTER TABLE IF EXISTS public.pedido_pagamentos
    DROP COLUMN IF EXISTS id_conta_receber;

-- Colunas adicionadas em pedidos
ALTER TABLE IF EXISTS public.pedidos
    DROP COLUMN IF EXISTS valor_pago,
    DROP COLUMN IF EXISTS quitado;

-- Índices de suporte
DROP INDEX IF EXISTS public.idx_pagamentos_pedido;
DROP INDEX IF EXISTS public.uidx_pagamentos_seq;
DROP INDEX IF EXISTS public.uidx_cr_parcela;

---------------------------------------------------------------
-- 4.  TABELAS criadas
---------------------------------------------------------------
DROP TABLE IF EXISTS public.contas_receber    CASCADE;
DROP TABLE IF EXISTS public.pedido_pagamentos CASCADE;

---------------------------------------------------------------
-- 5.  EXTENSÃO pgcrypto
--    (remova **apenas** se ela não for usada em mais nada)
---------------------------------------------------------------
-- DROP EXTENSION IF EXISTS pgcrypto;


-- Write your migrate down statements here. If this migration is irreversible
-- Then delete the separator line above.
