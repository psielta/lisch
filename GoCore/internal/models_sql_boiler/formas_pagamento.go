// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FormaPagamento is an object representing the database table.
type FormaPagamento struct {
	ID     int16      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Codigo string     `boil:"codigo" json:"codigo" toml:"codigo" yaml:"codigo"`
	Nome   string     `boil:"nome" json:"nome" toml:"nome" yaml:"nome"`
	Tipo   string     `boil:"tipo" json:"tipo" toml:"tipo" yaml:"tipo"`
	Ativo  int16      `boil:"ativo" json:"ativo" toml:"ativo" yaml:"ativo"`
	Ordem  null.Int16 `boil:"ordem" json:"ordem,omitempty" toml:"ordem" yaml:"ordem,omitempty"`

	R *formaPagamentoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L formaPagamentoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FormaPagamentoColumns = struct {
	ID     string
	Codigo string
	Nome   string
	Tipo   string
	Ativo  string
	Ordem  string
}{
	ID:     "id",
	Codigo: "codigo",
	Nome:   "nome",
	Tipo:   "tipo",
	Ativo:  "ativo",
	Ordem:  "ordem",
}

var FormaPagamentoTableColumns = struct {
	ID     string
	Codigo string
	Nome   string
	Tipo   string
	Ativo  string
	Ordem  string
}{
	ID:     "formas_pagamento.id",
	Codigo: "formas_pagamento.codigo",
	Nome:   "formas_pagamento.nome",
	Tipo:   "formas_pagamento.tipo",
	Ativo:  "formas_pagamento.ativo",
	Ordem:  "formas_pagamento.ordem",
}

// Generated where

var FormaPagamentoWhere = struct {
	ID     whereHelperint16
	Codigo whereHelperstring
	Nome   whereHelperstring
	Tipo   whereHelperstring
	Ativo  whereHelperint16
	Ordem  whereHelpernull_Int16
}{
	ID:     whereHelperint16{field: "\"formas_pagamento\".\"id\""},
	Codigo: whereHelperstring{field: "\"formas_pagamento\".\"codigo\""},
	Nome:   whereHelperstring{field: "\"formas_pagamento\".\"nome\""},
	Tipo:   whereHelperstring{field: "\"formas_pagamento\".\"tipo\""},
	Ativo:  whereHelperint16{field: "\"formas_pagamento\".\"ativo\""},
	Ordem:  whereHelpernull_Int16{field: "\"formas_pagamento\".\"ordem\""},
}

// FormaPagamentoRels is where relationship names are stored.
var FormaPagamentoRels = struct {
	IDFormaPagamentoCaixaFechamentoFormas string
	IDFormaPagamentoCaixaMovimentacoes    string
}{
	IDFormaPagamentoCaixaFechamentoFormas: "IDFormaPagamentoCaixaFechamentoFormas",
	IDFormaPagamentoCaixaMovimentacoes:    "IDFormaPagamentoCaixaMovimentacoes",
}

// formaPagamentoR is where relationships are stored.
type formaPagamentoR struct {
	IDFormaPagamentoCaixaFechamentoFormas CaixaFechamentoFormaSlice `boil:"IDFormaPagamentoCaixaFechamentoFormas" json:"IDFormaPagamentoCaixaFechamentoFormas" toml:"IDFormaPagamentoCaixaFechamentoFormas" yaml:"IDFormaPagamentoCaixaFechamentoFormas"`
	IDFormaPagamentoCaixaMovimentacoes    CaixaMovimentacaoSlice    `boil:"IDFormaPagamentoCaixaMovimentacoes" json:"IDFormaPagamentoCaixaMovimentacoes" toml:"IDFormaPagamentoCaixaMovimentacoes" yaml:"IDFormaPagamentoCaixaMovimentacoes"`
}

// NewStruct creates a new relationship struct
func (*formaPagamentoR) NewStruct() *formaPagamentoR {
	return &formaPagamentoR{}
}

func (r *formaPagamentoR) GetIDFormaPagamentoCaixaFechamentoFormas() CaixaFechamentoFormaSlice {
	if r == nil {
		return nil
	}
	return r.IDFormaPagamentoCaixaFechamentoFormas
}

func (r *formaPagamentoR) GetIDFormaPagamentoCaixaMovimentacoes() CaixaMovimentacaoSlice {
	if r == nil {
		return nil
	}
	return r.IDFormaPagamentoCaixaMovimentacoes
}

// formaPagamentoL is where Load methods for each relationship are stored.
type formaPagamentoL struct{}

var (
	formaPagamentoAllColumns            = []string{"id", "codigo", "nome", "tipo", "ativo", "ordem"}
	formaPagamentoColumnsWithoutDefault = []string{"id", "codigo", "nome", "tipo"}
	formaPagamentoColumnsWithDefault    = []string{"ativo", "ordem"}
	formaPagamentoPrimaryKeyColumns     = []string{"id"}
	formaPagamentoGeneratedColumns      = []string{}
)

type (
	// FormaPagamentoSlice is an alias for a slice of pointers to FormaPagamento.
	// This should almost always be used instead of []FormaPagamento.
	FormaPagamentoSlice []*FormaPagamento
	// FormaPagamentoHook is the signature for custom FormaPagamento hook methods
	FormaPagamentoHook func(context.Context, boil.ContextExecutor, *FormaPagamento) error

	formaPagamentoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	formaPagamentoType                 = reflect.TypeOf(&FormaPagamento{})
	formaPagamentoMapping              = queries.MakeStructMapping(formaPagamentoType)
	formaPagamentoPrimaryKeyMapping, _ = queries.BindMapping(formaPagamentoType, formaPagamentoMapping, formaPagamentoPrimaryKeyColumns)
	formaPagamentoInsertCacheMut       sync.RWMutex
	formaPagamentoInsertCache          = make(map[string]insertCache)
	formaPagamentoUpdateCacheMut       sync.RWMutex
	formaPagamentoUpdateCache          = make(map[string]updateCache)
	formaPagamentoUpsertCacheMut       sync.RWMutex
	formaPagamentoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var formaPagamentoAfterSelectMu sync.Mutex
var formaPagamentoAfterSelectHooks []FormaPagamentoHook

var formaPagamentoBeforeInsertMu sync.Mutex
var formaPagamentoBeforeInsertHooks []FormaPagamentoHook
var formaPagamentoAfterInsertMu sync.Mutex
var formaPagamentoAfterInsertHooks []FormaPagamentoHook

var formaPagamentoBeforeUpdateMu sync.Mutex
var formaPagamentoBeforeUpdateHooks []FormaPagamentoHook
var formaPagamentoAfterUpdateMu sync.Mutex
var formaPagamentoAfterUpdateHooks []FormaPagamentoHook

var formaPagamentoBeforeDeleteMu sync.Mutex
var formaPagamentoBeforeDeleteHooks []FormaPagamentoHook
var formaPagamentoAfterDeleteMu sync.Mutex
var formaPagamentoAfterDeleteHooks []FormaPagamentoHook

var formaPagamentoBeforeUpsertMu sync.Mutex
var formaPagamentoBeforeUpsertHooks []FormaPagamentoHook
var formaPagamentoAfterUpsertMu sync.Mutex
var formaPagamentoAfterUpsertHooks []FormaPagamentoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FormaPagamento) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formaPagamentoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FormaPagamento) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formaPagamentoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FormaPagamento) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formaPagamentoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FormaPagamento) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formaPagamentoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FormaPagamento) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formaPagamentoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FormaPagamento) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formaPagamentoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FormaPagamento) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formaPagamentoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FormaPagamento) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formaPagamentoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FormaPagamento) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range formaPagamentoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFormaPagamentoHook registers your hook function for all future operations.
func AddFormaPagamentoHook(hookPoint boil.HookPoint, formaPagamentoHook FormaPagamentoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		formaPagamentoAfterSelectMu.Lock()
		formaPagamentoAfterSelectHooks = append(formaPagamentoAfterSelectHooks, formaPagamentoHook)
		formaPagamentoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		formaPagamentoBeforeInsertMu.Lock()
		formaPagamentoBeforeInsertHooks = append(formaPagamentoBeforeInsertHooks, formaPagamentoHook)
		formaPagamentoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		formaPagamentoAfterInsertMu.Lock()
		formaPagamentoAfterInsertHooks = append(formaPagamentoAfterInsertHooks, formaPagamentoHook)
		formaPagamentoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		formaPagamentoBeforeUpdateMu.Lock()
		formaPagamentoBeforeUpdateHooks = append(formaPagamentoBeforeUpdateHooks, formaPagamentoHook)
		formaPagamentoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		formaPagamentoAfterUpdateMu.Lock()
		formaPagamentoAfterUpdateHooks = append(formaPagamentoAfterUpdateHooks, formaPagamentoHook)
		formaPagamentoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		formaPagamentoBeforeDeleteMu.Lock()
		formaPagamentoBeforeDeleteHooks = append(formaPagamentoBeforeDeleteHooks, formaPagamentoHook)
		formaPagamentoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		formaPagamentoAfterDeleteMu.Lock()
		formaPagamentoAfterDeleteHooks = append(formaPagamentoAfterDeleteHooks, formaPagamentoHook)
		formaPagamentoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		formaPagamentoBeforeUpsertMu.Lock()
		formaPagamentoBeforeUpsertHooks = append(formaPagamentoBeforeUpsertHooks, formaPagamentoHook)
		formaPagamentoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		formaPagamentoAfterUpsertMu.Lock()
		formaPagamentoAfterUpsertHooks = append(formaPagamentoAfterUpsertHooks, formaPagamentoHook)
		formaPagamentoAfterUpsertMu.Unlock()
	}
}

// One returns a single formaPagamento record from the query.
func (q formaPagamentoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FormaPagamento, error) {
	o := &FormaPagamento{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for formas_pagamento")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FormaPagamento records from the query.
func (q formaPagamentoQuery) All(ctx context.Context, exec boil.ContextExecutor) (FormaPagamentoSlice, error) {
	var o []*FormaPagamento

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to FormaPagamento slice")
	}

	if len(formaPagamentoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FormaPagamento records in the query.
func (q formaPagamentoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count formas_pagamento rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q formaPagamentoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if formas_pagamento exists")
	}

	return count > 0, nil
}

// IDFormaPagamentoCaixaFechamentoFormas retrieves all the caixa_fechamento_formas's CaixaFechamentoFormas with an executor via id_forma_pagamento column.
func (o *FormaPagamento) IDFormaPagamentoCaixaFechamentoFormas(mods ...qm.QueryMod) caixaFechamentoFormaQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"caixa_fechamento_formas\".\"id_forma_pagamento\"=?", o.ID),
	)

	return CaixaFechamentoFormas(queryMods...)
}

// IDFormaPagamentoCaixaMovimentacoes retrieves all the caixa_movimentaco's CaixaMovimentacoes with an executor via id_forma_pagamento column.
func (o *FormaPagamento) IDFormaPagamentoCaixaMovimentacoes(mods ...qm.QueryMod) caixaMovimentacaoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"caixa_movimentacoes\".\"id_forma_pagamento\"=?", o.ID),
	)

	return CaixaMovimentacoes(queryMods...)
}

// LoadIDFormaPagamentoCaixaFechamentoFormas allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (formaPagamentoL) LoadIDFormaPagamentoCaixaFechamentoFormas(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFormaPagamento interface{}, mods queries.Applicator) error {
	var slice []*FormaPagamento
	var object *FormaPagamento

	if singular {
		var ok bool
		object, ok = maybeFormaPagamento.(*FormaPagamento)
		if !ok {
			object = new(FormaPagamento)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFormaPagamento)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFormaPagamento))
			}
		}
	} else {
		s, ok := maybeFormaPagamento.(*[]*FormaPagamento)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFormaPagamento)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFormaPagamento))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &formaPagamentoR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &formaPagamentoR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`caixa_fechamento_formas`),
		qm.WhereIn(`caixa_fechamento_formas.id_forma_pagamento in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load caixa_fechamento_formas")
	}

	var resultSlice []*CaixaFechamentoForma
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice caixa_fechamento_formas")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on caixa_fechamento_formas")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for caixa_fechamento_formas")
	}

	if len(caixaFechamentoFormaAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDFormaPagamentoCaixaFechamentoFormas = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &caixaFechamentoFormaR{}
			}
			foreign.R.IDFormaPagamentoFormasPagamento = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDFormaPagamento {
				local.R.IDFormaPagamentoCaixaFechamentoFormas = append(local.R.IDFormaPagamentoCaixaFechamentoFormas, foreign)
				if foreign.R == nil {
					foreign.R = &caixaFechamentoFormaR{}
				}
				foreign.R.IDFormaPagamentoFormasPagamento = local
				break
			}
		}
	}

	return nil
}

// LoadIDFormaPagamentoCaixaMovimentacoes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (formaPagamentoL) LoadIDFormaPagamentoCaixaMovimentacoes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFormaPagamento interface{}, mods queries.Applicator) error {
	var slice []*FormaPagamento
	var object *FormaPagamento

	if singular {
		var ok bool
		object, ok = maybeFormaPagamento.(*FormaPagamento)
		if !ok {
			object = new(FormaPagamento)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFormaPagamento)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFormaPagamento))
			}
		}
	} else {
		s, ok := maybeFormaPagamento.(*[]*FormaPagamento)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFormaPagamento)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFormaPagamento))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &formaPagamentoR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &formaPagamentoR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`caixa_movimentacoes`),
		qm.WhereIn(`caixa_movimentacoes.id_forma_pagamento in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load caixa_movimentacoes")
	}

	var resultSlice []*CaixaMovimentacao
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice caixa_movimentacoes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on caixa_movimentacoes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for caixa_movimentacoes")
	}

	if len(caixaMovimentacaoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDFormaPagamentoCaixaMovimentacoes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &caixaMovimentacaoR{}
			}
			foreign.R.IDFormaPagamentoFormasPagamento = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IDFormaPagamento) {
				local.R.IDFormaPagamentoCaixaMovimentacoes = append(local.R.IDFormaPagamentoCaixaMovimentacoes, foreign)
				if foreign.R == nil {
					foreign.R = &caixaMovimentacaoR{}
				}
				foreign.R.IDFormaPagamentoFormasPagamento = local
				break
			}
		}
	}

	return nil
}

// AddIDFormaPagamentoCaixaFechamentoFormas adds the given related objects to the existing relationships
// of the formas_pagamento, optionally inserting them as new records.
// Appends related to o.R.IDFormaPagamentoCaixaFechamentoFormas.
// Sets related.R.IDFormaPagamentoFormasPagamento appropriately.
func (o *FormaPagamento) AddIDFormaPagamentoCaixaFechamentoFormas(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CaixaFechamentoForma) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDFormaPagamento = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"caixa_fechamento_formas\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_forma_pagamento"}),
				strmangle.WhereClause("\"", "\"", 2, caixaFechamentoFormaPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDFormaPagamento = o.ID
		}
	}

	if o.R == nil {
		o.R = &formaPagamentoR{
			IDFormaPagamentoCaixaFechamentoFormas: related,
		}
	} else {
		o.R.IDFormaPagamentoCaixaFechamentoFormas = append(o.R.IDFormaPagamentoCaixaFechamentoFormas, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &caixaFechamentoFormaR{
				IDFormaPagamentoFormasPagamento: o,
			}
		} else {
			rel.R.IDFormaPagamentoFormasPagamento = o
		}
	}
	return nil
}

// AddIDFormaPagamentoCaixaMovimentacoes adds the given related objects to the existing relationships
// of the formas_pagamento, optionally inserting them as new records.
// Appends related to o.R.IDFormaPagamentoCaixaMovimentacoes.
// Sets related.R.IDFormaPagamentoFormasPagamento appropriately.
func (o *FormaPagamento) AddIDFormaPagamentoCaixaMovimentacoes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CaixaMovimentacao) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IDFormaPagamento, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"caixa_movimentacoes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_forma_pagamento"}),
				strmangle.WhereClause("\"", "\"", 2, caixaMovimentacaoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IDFormaPagamento, o.ID)
		}
	}

	if o.R == nil {
		o.R = &formaPagamentoR{
			IDFormaPagamentoCaixaMovimentacoes: related,
		}
	} else {
		o.R.IDFormaPagamentoCaixaMovimentacoes = append(o.R.IDFormaPagamentoCaixaMovimentacoes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &caixaMovimentacaoR{
				IDFormaPagamentoFormasPagamento: o,
			}
		} else {
			rel.R.IDFormaPagamentoFormasPagamento = o
		}
	}
	return nil
}

// SetIDFormaPagamentoCaixaMovimentacoes removes all previously related items of the
// formas_pagamento replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IDFormaPagamentoFormasPagamento's IDFormaPagamentoCaixaMovimentacoes accordingly.
// Replaces o.R.IDFormaPagamentoCaixaMovimentacoes with related.
// Sets related.R.IDFormaPagamentoFormasPagamento's IDFormaPagamentoCaixaMovimentacoes accordingly.
func (o *FormaPagamento) SetIDFormaPagamentoCaixaMovimentacoes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CaixaMovimentacao) error {
	query := "update \"caixa_movimentacoes\" set \"id_forma_pagamento\" = null where \"id_forma_pagamento\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IDFormaPagamentoCaixaMovimentacoes {
			queries.SetScanner(&rel.IDFormaPagamento, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IDFormaPagamentoFormasPagamento = nil
		}
		o.R.IDFormaPagamentoCaixaMovimentacoes = nil
	}

	return o.AddIDFormaPagamentoCaixaMovimentacoes(ctx, exec, insert, related...)
}

// RemoveIDFormaPagamentoCaixaMovimentacoes relationships from objects passed in.
// Removes related items from R.IDFormaPagamentoCaixaMovimentacoes (uses pointer comparison, removal does not keep order)
// Sets related.R.IDFormaPagamentoFormasPagamento.
func (o *FormaPagamento) RemoveIDFormaPagamentoCaixaMovimentacoes(ctx context.Context, exec boil.ContextExecutor, related ...*CaixaMovimentacao) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IDFormaPagamento, nil)
		if rel.R != nil {
			rel.R.IDFormaPagamentoFormasPagamento = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("id_forma_pagamento")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IDFormaPagamentoCaixaMovimentacoes {
			if rel != ri {
				continue
			}

			ln := len(o.R.IDFormaPagamentoCaixaMovimentacoes)
			if ln > 1 && i < ln-1 {
				o.R.IDFormaPagamentoCaixaMovimentacoes[i] = o.R.IDFormaPagamentoCaixaMovimentacoes[ln-1]
			}
			o.R.IDFormaPagamentoCaixaMovimentacoes = o.R.IDFormaPagamentoCaixaMovimentacoes[:ln-1]
			break
		}
	}

	return nil
}

// FormasPagamento retrieves all the records using an executor.
func FormasPagamento(mods ...qm.QueryMod) formaPagamentoQuery {
	mods = append(mods, qm.From("\"formas_pagamento\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"formas_pagamento\".*"})
	}

	return formaPagamentoQuery{q}
}

// FindFormaPagamento retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFormaPagamento(ctx context.Context, exec boil.ContextExecutor, iD int16, selectCols ...string) (*FormaPagamento, error) {
	formaPagamentoObj := &FormaPagamento{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"formas_pagamento\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, formaPagamentoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from formas_pagamento")
	}

	if err = formaPagamentoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return formaPagamentoObj, err
	}

	return formaPagamentoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FormaPagamento) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no formas_pagamento provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(formaPagamentoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	formaPagamentoInsertCacheMut.RLock()
	cache, cached := formaPagamentoInsertCache[key]
	formaPagamentoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			formaPagamentoAllColumns,
			formaPagamentoColumnsWithDefault,
			formaPagamentoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(formaPagamentoType, formaPagamentoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(formaPagamentoType, formaPagamentoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"formas_pagamento\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"formas_pagamento\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into formas_pagamento")
	}

	if !cached {
		formaPagamentoInsertCacheMut.Lock()
		formaPagamentoInsertCache[key] = cache
		formaPagamentoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FormaPagamento.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FormaPagamento) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	formaPagamentoUpdateCacheMut.RLock()
	cache, cached := formaPagamentoUpdateCache[key]
	formaPagamentoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			formaPagamentoAllColumns,
			formaPagamentoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update formas_pagamento, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"formas_pagamento\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, formaPagamentoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(formaPagamentoType, formaPagamentoMapping, append(wl, formaPagamentoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update formas_pagamento row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for formas_pagamento")
	}

	if !cached {
		formaPagamentoUpdateCacheMut.Lock()
		formaPagamentoUpdateCache[key] = cache
		formaPagamentoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q formaPagamentoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for formas_pagamento")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for formas_pagamento")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FormaPagamentoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), formaPagamentoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"formas_pagamento\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, formaPagamentoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in formaPagamento slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all formaPagamento")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FormaPagamento) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no formas_pagamento provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(formaPagamentoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	formaPagamentoUpsertCacheMut.RLock()
	cache, cached := formaPagamentoUpsertCache[key]
	formaPagamentoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			formaPagamentoAllColumns,
			formaPagamentoColumnsWithDefault,
			formaPagamentoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			formaPagamentoAllColumns,
			formaPagamentoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert formas_pagamento, could not build update column list")
		}

		ret := strmangle.SetComplement(formaPagamentoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(formaPagamentoPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert formas_pagamento, could not build conflict column list")
			}

			conflict = make([]string, len(formaPagamentoPrimaryKeyColumns))
			copy(conflict, formaPagamentoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"formas_pagamento\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(formaPagamentoType, formaPagamentoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(formaPagamentoType, formaPagamentoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert formas_pagamento")
	}

	if !cached {
		formaPagamentoUpsertCacheMut.Lock()
		formaPagamentoUpsertCache[key] = cache
		formaPagamentoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FormaPagamento record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FormaPagamento) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no FormaPagamento provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), formaPagamentoPrimaryKeyMapping)
	sql := "DELETE FROM \"formas_pagamento\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from formas_pagamento")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for formas_pagamento")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q formaPagamentoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no formaPagamentoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from formas_pagamento")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for formas_pagamento")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FormaPagamentoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(formaPagamentoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), formaPagamentoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"formas_pagamento\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, formaPagamentoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from formaPagamento slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for formas_pagamento")
	}

	if len(formaPagamentoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FormaPagamento) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFormaPagamento(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FormaPagamentoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FormaPagamentoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), formaPagamentoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"formas_pagamento\".* FROM \"formas_pagamento\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, formaPagamentoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in FormaPagamentoSlice")
	}

	*o = slice

	return nil
}

// FormaPagamentoExists checks if the FormaPagamento row exists.
func FormaPagamentoExists(ctx context.Context, exec boil.ContextExecutor, iD int16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"formas_pagamento\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if formas_pagamento exists")
	}

	return exists, nil
}

// Exists checks if the FormaPagamento row exists.
func (o *FormaPagamento) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FormaPagamentoExists(ctx, exec, o.ID)
}
