// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// PedidoItensView is an object representing the database table.
type PedidoItensView struct {
	ID               null.String       `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	SeqID            null.Int64        `boil:"seq_id" json:"seq_id,omitempty" toml:"seq_id" yaml:"seq_id,omitempty"`
	IDPedido         null.String       `boil:"id_pedido" json:"id_pedido,omitempty" toml:"id_pedido" yaml:"id_pedido,omitempty"`
	IDProduto        null.String       `boil:"id_produto" json:"id_produto,omitempty" toml:"id_produto" yaml:"id_produto,omitempty"`
	IDProduto2       null.String       `boil:"id_produto_2" json:"id_produto_2,omitempty" toml:"id_produto_2" yaml:"id_produto_2,omitempty"`
	IDCategoria      null.String       `boil:"id_categoria" json:"id_categoria,omitempty" toml:"id_categoria" yaml:"id_categoria,omitempty"`
	IDCategoriaOpcao null.String       `boil:"id_categoria_opcao" json:"id_categoria_opcao,omitempty" toml:"id_categoria_opcao" yaml:"id_categoria_opcao,omitempty"`
	Observacao       null.String       `boil:"observacao" json:"observacao,omitempty" toml:"observacao" yaml:"observacao,omitempty"`
	ValorUnitario    types.NullDecimal `boil:"valor_unitario" json:"valor_unitario,omitempty" toml:"valor_unitario" yaml:"valor_unitario,omitempty"`
	Quantidade       null.Int          `boil:"quantidade" json:"quantidade,omitempty" toml:"quantidade" yaml:"quantidade,omitempty"`
	CreatedAt        null.Time         `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt        null.Time         `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt        null.Time         `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
}

var PedidoItensViewColumns = struct {
	ID               string
	SeqID            string
	IDPedido         string
	IDProduto        string
	IDProduto2       string
	IDCategoria      string
	IDCategoriaOpcao string
	Observacao       string
	ValorUnitario    string
	Quantidade       string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "id",
	SeqID:            "seq_id",
	IDPedido:         "id_pedido",
	IDProduto:        "id_produto",
	IDProduto2:       "id_produto_2",
	IDCategoria:      "id_categoria",
	IDCategoriaOpcao: "id_categoria_opcao",
	Observacao:       "observacao",
	ValorUnitario:    "valor_unitario",
	Quantidade:       "quantidade",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	DeletedAt:        "deleted_at",
}

var PedidoItensViewTableColumns = struct {
	ID               string
	SeqID            string
	IDPedido         string
	IDProduto        string
	IDProduto2       string
	IDCategoria      string
	IDCategoriaOpcao string
	Observacao       string
	ValorUnitario    string
	Quantidade       string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "pedido_itens_view.id",
	SeqID:            "pedido_itens_view.seq_id",
	IDPedido:         "pedido_itens_view.id_pedido",
	IDProduto:        "pedido_itens_view.id_produto",
	IDProduto2:       "pedido_itens_view.id_produto_2",
	IDCategoria:      "pedido_itens_view.id_categoria",
	IDCategoriaOpcao: "pedido_itens_view.id_categoria_opcao",
	Observacao:       "pedido_itens_view.observacao",
	ValorUnitario:    "pedido_itens_view.valor_unitario",
	Quantidade:       "pedido_itens_view.quantidade",
	CreatedAt:        "pedido_itens_view.created_at",
	UpdatedAt:        "pedido_itens_view.updated_at",
	DeletedAt:        "pedido_itens_view.deleted_at",
}

// Generated where

var PedidoItensViewWhere = struct {
	ID               whereHelpernull_String
	SeqID            whereHelpernull_Int64
	IDPedido         whereHelpernull_String
	IDProduto        whereHelpernull_String
	IDProduto2       whereHelpernull_String
	IDCategoria      whereHelpernull_String
	IDCategoriaOpcao whereHelpernull_String
	Observacao       whereHelpernull_String
	ValorUnitario    whereHelpertypes_NullDecimal
	Quantidade       whereHelpernull_Int
	CreatedAt        whereHelpernull_Time
	UpdatedAt        whereHelpernull_Time
	DeletedAt        whereHelpernull_Time
}{
	ID:               whereHelpernull_String{field: "\"pedido_itens_view\".\"id\""},
	SeqID:            whereHelpernull_Int64{field: "\"pedido_itens_view\".\"seq_id\""},
	IDPedido:         whereHelpernull_String{field: "\"pedido_itens_view\".\"id_pedido\""},
	IDProduto:        whereHelpernull_String{field: "\"pedido_itens_view\".\"id_produto\""},
	IDProduto2:       whereHelpernull_String{field: "\"pedido_itens_view\".\"id_produto_2\""},
	IDCategoria:      whereHelpernull_String{field: "\"pedido_itens_view\".\"id_categoria\""},
	IDCategoriaOpcao: whereHelpernull_String{field: "\"pedido_itens_view\".\"id_categoria_opcao\""},
	Observacao:       whereHelpernull_String{field: "\"pedido_itens_view\".\"observacao\""},
	ValorUnitario:    whereHelpertypes_NullDecimal{field: "\"pedido_itens_view\".\"valor_unitario\""},
	Quantidade:       whereHelpernull_Int{field: "\"pedido_itens_view\".\"quantidade\""},
	CreatedAt:        whereHelpernull_Time{field: "\"pedido_itens_view\".\"created_at\""},
	UpdatedAt:        whereHelpernull_Time{field: "\"pedido_itens_view\".\"updated_at\""},
	DeletedAt:        whereHelpernull_Time{field: "\"pedido_itens_view\".\"deleted_at\""},
}

var (
	pedidoItensViewAllColumns            = []string{"id", "seq_id", "id_pedido", "id_produto", "id_produto_2", "id_categoria", "id_categoria_opcao", "observacao", "valor_unitario", "quantidade", "created_at", "updated_at", "deleted_at"}
	pedidoItensViewColumnsWithoutDefault = []string{}
	pedidoItensViewColumnsWithDefault    = []string{"id", "seq_id", "id_pedido", "id_produto", "id_produto_2", "id_categoria", "id_categoria_opcao", "observacao", "valor_unitario", "quantidade", "created_at", "updated_at", "deleted_at"}
	pedidoItensViewPrimaryKeyColumns     = []string{}
	pedidoItensViewGeneratedColumns      = []string{}
)

type (
	// PedidoItensViewSlice is an alias for a slice of pointers to PedidoItensView.
	// This should almost always be used instead of []PedidoItensView.
	PedidoItensViewSlice []*PedidoItensView
	// PedidoItensViewHook is the signature for custom PedidoItensView hook methods
	PedidoItensViewHook func(context.Context, boil.ContextExecutor, *PedidoItensView) error

	pedidoItensViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pedidoItensViewType           = reflect.TypeOf(&PedidoItensView{})
	pedidoItensViewMapping        = queries.MakeStructMapping(pedidoItensViewType)
	pedidoItensViewInsertCacheMut sync.RWMutex
	pedidoItensViewInsertCache    = make(map[string]insertCache)
	pedidoItensViewUpdateCacheMut sync.RWMutex
	pedidoItensViewUpdateCache    = make(map[string]updateCache)
	pedidoItensViewUpsertCacheMut sync.RWMutex
	pedidoItensViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var pedidoItensViewAfterSelectMu sync.Mutex
var pedidoItensViewAfterSelectHooks []PedidoItensViewHook

var pedidoItensViewBeforeInsertMu sync.Mutex
var pedidoItensViewBeforeInsertHooks []PedidoItensViewHook
var pedidoItensViewAfterInsertMu sync.Mutex
var pedidoItensViewAfterInsertHooks []PedidoItensViewHook

var pedidoItensViewBeforeUpsertMu sync.Mutex
var pedidoItensViewBeforeUpsertHooks []PedidoItensViewHook
var pedidoItensViewAfterUpsertMu sync.Mutex
var pedidoItensViewAfterUpsertHooks []PedidoItensViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PedidoItensView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItensViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PedidoItensView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItensViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PedidoItensView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItensViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PedidoItensView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItensViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PedidoItensView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItensViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPedidoItensViewHook registers your hook function for all future operations.
func AddPedidoItensViewHook(hookPoint boil.HookPoint, pedidoItensViewHook PedidoItensViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		pedidoItensViewAfterSelectMu.Lock()
		pedidoItensViewAfterSelectHooks = append(pedidoItensViewAfterSelectHooks, pedidoItensViewHook)
		pedidoItensViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		pedidoItensViewBeforeInsertMu.Lock()
		pedidoItensViewBeforeInsertHooks = append(pedidoItensViewBeforeInsertHooks, pedidoItensViewHook)
		pedidoItensViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		pedidoItensViewAfterInsertMu.Lock()
		pedidoItensViewAfterInsertHooks = append(pedidoItensViewAfterInsertHooks, pedidoItensViewHook)
		pedidoItensViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		pedidoItensViewBeforeUpsertMu.Lock()
		pedidoItensViewBeforeUpsertHooks = append(pedidoItensViewBeforeUpsertHooks, pedidoItensViewHook)
		pedidoItensViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		pedidoItensViewAfterUpsertMu.Lock()
		pedidoItensViewAfterUpsertHooks = append(pedidoItensViewAfterUpsertHooks, pedidoItensViewHook)
		pedidoItensViewAfterUpsertMu.Unlock()
	}
}

// One returns a single pedidoItensView record from the query.
func (q pedidoItensViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PedidoItensView, error) {
	o := &PedidoItensView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for pedido_itens_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PedidoItensView records from the query.
func (q pedidoItensViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (PedidoItensViewSlice, error) {
	var o []*PedidoItensView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to PedidoItensView slice")
	}

	if len(pedidoItensViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PedidoItensView records in the query.
func (q pedidoItensViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count pedido_itens_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pedidoItensViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if pedido_itens_view exists")
	}

	return count > 0, nil
}

// PedidoItensViews retrieves all the records using an executor.
func PedidoItensViews(mods ...qm.QueryMod) pedidoItensViewQuery {
	mods = append(mods, qm.From("\"pedido_itens_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"pedido_itens_view\".*"})
	}

	return pedidoItensViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PedidoItensView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no pedido_itens_view provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pedidoItensViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pedidoItensViewInsertCacheMut.RLock()
	cache, cached := pedidoItensViewInsertCache[key]
	pedidoItensViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pedidoItensViewAllColumns,
			pedidoItensViewColumnsWithDefault,
			pedidoItensViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pedidoItensViewType, pedidoItensViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pedidoItensViewType, pedidoItensViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pedido_itens_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pedido_itens_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into pedido_itens_view")
	}

	if !cached {
		pedidoItensViewInsertCacheMut.Lock()
		pedidoItensViewInsertCache[key] = cache
		pedidoItensViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PedidoItensView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no pedido_itens_view provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pedidoItensViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pedidoItensViewUpsertCacheMut.RLock()
	cache, cached := pedidoItensViewUpsertCache[key]
	pedidoItensViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			pedidoItensViewAllColumns,
			pedidoItensViewColumnsWithDefault,
			pedidoItensViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pedidoItensViewAllColumns,
			pedidoItensViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert pedido_itens_view, could not build update column list")
		}

		ret := strmangle.SetComplement(pedidoItensViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(pedidoItensViewPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert pedido_itens_view, could not build conflict column list")
			}

			conflict = make([]string, len(pedidoItensViewPrimaryKeyColumns))
			copy(conflict, pedidoItensViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pedido_itens_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(pedidoItensViewType, pedidoItensViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pedidoItensViewType, pedidoItensViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert pedido_itens_view")
	}

	if !cached {
		pedidoItensViewUpsertCacheMut.Lock()
		pedidoItensViewUpsertCache[key] = cache
		pedidoItensViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
