// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CategoriaAdicionalOpcao is an object representing the database table.
type CategoriaAdicionalOpcao struct {
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`
	// Identificador sequencial para facilitar CRUD
	SeqID                int64         `boil:"seq_id" json:"seq_id" toml:"seq_id" yaml:"seq_id"`
	IDCategoriaAdicional string        `boil:"id_categoria_adicional" json:"id_categoria_adicional" toml:"id_categoria_adicional" yaml:"id_categoria_adicional"`
	Codigo               null.String   `boil:"codigo" json:"codigo,omitempty" toml:"codigo" yaml:"codigo,omitempty"`
	Nome                 string        `boil:"nome" json:"nome" toml:"nome" yaml:"nome"`
	Valor                types.Decimal `boil:"valor" json:"valor" toml:"valor" yaml:"valor"`
	Status               int16         `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedAt            time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt            null.Time     `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *categoriaAdicionalOpcaoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L categoriaAdicionalOpcaoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CategoriaAdicionalOpcaoColumns = struct {
	ID                   string
	SeqID                string
	IDCategoriaAdicional string
	Codigo               string
	Nome                 string
	Valor                string
	Status               string
	CreatedAt            string
	UpdatedAt            string
	DeletedAt            string
}{
	ID:                   "id",
	SeqID:                "seq_id",
	IDCategoriaAdicional: "id_categoria_adicional",
	Codigo:               "codigo",
	Nome:                 "nome",
	Valor:                "valor",
	Status:               "status",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	DeletedAt:            "deleted_at",
}

var CategoriaAdicionalOpcaoTableColumns = struct {
	ID                   string
	SeqID                string
	IDCategoriaAdicional string
	Codigo               string
	Nome                 string
	Valor                string
	Status               string
	CreatedAt            string
	UpdatedAt            string
	DeletedAt            string
}{
	ID:                   "categoria_adicional_opcoes.id",
	SeqID:                "categoria_adicional_opcoes.seq_id",
	IDCategoriaAdicional: "categoria_adicional_opcoes.id_categoria_adicional",
	Codigo:               "categoria_adicional_opcoes.codigo",
	Nome:                 "categoria_adicional_opcoes.nome",
	Valor:                "categoria_adicional_opcoes.valor",
	Status:               "categoria_adicional_opcoes.status",
	CreatedAt:            "categoria_adicional_opcoes.created_at",
	UpdatedAt:            "categoria_adicional_opcoes.updated_at",
	DeletedAt:            "categoria_adicional_opcoes.deleted_at",
}

// Generated where

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CategoriaAdicionalOpcaoWhere = struct {
	ID                   whereHelperstring
	SeqID                whereHelperint64
	IDCategoriaAdicional whereHelperstring
	Codigo               whereHelpernull_String
	Nome                 whereHelperstring
	Valor                whereHelpertypes_Decimal
	Status               whereHelperint16
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpertime_Time
	DeletedAt            whereHelpernull_Time
}{
	ID:                   whereHelperstring{field: "\"categoria_adicional_opcoes\".\"id\""},
	SeqID:                whereHelperint64{field: "\"categoria_adicional_opcoes\".\"seq_id\""},
	IDCategoriaAdicional: whereHelperstring{field: "\"categoria_adicional_opcoes\".\"id_categoria_adicional\""},
	Codigo:               whereHelpernull_String{field: "\"categoria_adicional_opcoes\".\"codigo\""},
	Nome:                 whereHelperstring{field: "\"categoria_adicional_opcoes\".\"nome\""},
	Valor:                whereHelpertypes_Decimal{field: "\"categoria_adicional_opcoes\".\"valor\""},
	Status:               whereHelperint16{field: "\"categoria_adicional_opcoes\".\"status\""},
	CreatedAt:            whereHelpertime_Time{field: "\"categoria_adicional_opcoes\".\"created_at\""},
	UpdatedAt:            whereHelpertime_Time{field: "\"categoria_adicional_opcoes\".\"updated_at\""},
	DeletedAt:            whereHelpernull_Time{field: "\"categoria_adicional_opcoes\".\"deleted_at\""},
}

// CategoriaAdicionalOpcaoRels is where relationship names are stored.
var CategoriaAdicionalOpcaoRels = struct {
	IDCategoriaAdicionalCategoriaAdicionais string
	IDAdicionalOpcaoPedidoItemAdicionais    string
}{
	IDCategoriaAdicionalCategoriaAdicionais: "IDCategoriaAdicionalCategoriaAdicionais",
	IDAdicionalOpcaoPedidoItemAdicionais:    "IDAdicionalOpcaoPedidoItemAdicionais",
}

// categoriaAdicionalOpcaoR is where relationships are stored.
type categoriaAdicionalOpcaoR struct {
	IDCategoriaAdicionalCategoriaAdicionais *CategoriaAdicional       `boil:"IDCategoriaAdicionalCategoriaAdicionais" json:"IDCategoriaAdicionalCategoriaAdicionais" toml:"IDCategoriaAdicionalCategoriaAdicionais" yaml:"IDCategoriaAdicionalCategoriaAdicionais"`
	IDAdicionalOpcaoPedidoItemAdicionais    PedidoItemAdicionaisSlice `boil:"IDAdicionalOpcaoPedidoItemAdicionais" json:"IDAdicionalOpcaoPedidoItemAdicionais" toml:"IDAdicionalOpcaoPedidoItemAdicionais" yaml:"IDAdicionalOpcaoPedidoItemAdicionais"`
}

// NewStruct creates a new relationship struct
func (*categoriaAdicionalOpcaoR) NewStruct() *categoriaAdicionalOpcaoR {
	return &categoriaAdicionalOpcaoR{}
}

func (r *categoriaAdicionalOpcaoR) GetIDCategoriaAdicionalCategoriaAdicionais() *CategoriaAdicional {
	if r == nil {
		return nil
	}
	return r.IDCategoriaAdicionalCategoriaAdicionais
}

func (r *categoriaAdicionalOpcaoR) GetIDAdicionalOpcaoPedidoItemAdicionais() PedidoItemAdicionaisSlice {
	if r == nil {
		return nil
	}
	return r.IDAdicionalOpcaoPedidoItemAdicionais
}

// categoriaAdicionalOpcaoL is where Load methods for each relationship are stored.
type categoriaAdicionalOpcaoL struct{}

var (
	categoriaAdicionalOpcaoAllColumns            = []string{"id", "seq_id", "id_categoria_adicional", "codigo", "nome", "valor", "status", "created_at", "updated_at", "deleted_at"}
	categoriaAdicionalOpcaoColumnsWithoutDefault = []string{"seq_id", "id_categoria_adicional", "nome", "valor", "status"}
	categoriaAdicionalOpcaoColumnsWithDefault    = []string{"id", "codigo", "created_at", "updated_at", "deleted_at"}
	categoriaAdicionalOpcaoPrimaryKeyColumns     = []string{"id"}
	categoriaAdicionalOpcaoGeneratedColumns      = []string{}
)

type (
	// CategoriaAdicionalOpcaoSlice is an alias for a slice of pointers to CategoriaAdicionalOpcao.
	// This should almost always be used instead of []CategoriaAdicionalOpcao.
	CategoriaAdicionalOpcaoSlice []*CategoriaAdicionalOpcao
	// CategoriaAdicionalOpcaoHook is the signature for custom CategoriaAdicionalOpcao hook methods
	CategoriaAdicionalOpcaoHook func(context.Context, boil.ContextExecutor, *CategoriaAdicionalOpcao) error

	categoriaAdicionalOpcaoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	categoriaAdicionalOpcaoType                 = reflect.TypeOf(&CategoriaAdicionalOpcao{})
	categoriaAdicionalOpcaoMapping              = queries.MakeStructMapping(categoriaAdicionalOpcaoType)
	categoriaAdicionalOpcaoPrimaryKeyMapping, _ = queries.BindMapping(categoriaAdicionalOpcaoType, categoriaAdicionalOpcaoMapping, categoriaAdicionalOpcaoPrimaryKeyColumns)
	categoriaAdicionalOpcaoInsertCacheMut       sync.RWMutex
	categoriaAdicionalOpcaoInsertCache          = make(map[string]insertCache)
	categoriaAdicionalOpcaoUpdateCacheMut       sync.RWMutex
	categoriaAdicionalOpcaoUpdateCache          = make(map[string]updateCache)
	categoriaAdicionalOpcaoUpsertCacheMut       sync.RWMutex
	categoriaAdicionalOpcaoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var categoriaAdicionalOpcaoAfterSelectMu sync.Mutex
var categoriaAdicionalOpcaoAfterSelectHooks []CategoriaAdicionalOpcaoHook

var categoriaAdicionalOpcaoBeforeInsertMu sync.Mutex
var categoriaAdicionalOpcaoBeforeInsertHooks []CategoriaAdicionalOpcaoHook
var categoriaAdicionalOpcaoAfterInsertMu sync.Mutex
var categoriaAdicionalOpcaoAfterInsertHooks []CategoriaAdicionalOpcaoHook

var categoriaAdicionalOpcaoBeforeUpdateMu sync.Mutex
var categoriaAdicionalOpcaoBeforeUpdateHooks []CategoriaAdicionalOpcaoHook
var categoriaAdicionalOpcaoAfterUpdateMu sync.Mutex
var categoriaAdicionalOpcaoAfterUpdateHooks []CategoriaAdicionalOpcaoHook

var categoriaAdicionalOpcaoBeforeDeleteMu sync.Mutex
var categoriaAdicionalOpcaoBeforeDeleteHooks []CategoriaAdicionalOpcaoHook
var categoriaAdicionalOpcaoAfterDeleteMu sync.Mutex
var categoriaAdicionalOpcaoAfterDeleteHooks []CategoriaAdicionalOpcaoHook

var categoriaAdicionalOpcaoBeforeUpsertMu sync.Mutex
var categoriaAdicionalOpcaoBeforeUpsertHooks []CategoriaAdicionalOpcaoHook
var categoriaAdicionalOpcaoAfterUpsertMu sync.Mutex
var categoriaAdicionalOpcaoAfterUpsertHooks []CategoriaAdicionalOpcaoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CategoriaAdicionalOpcao) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalOpcaoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CategoriaAdicionalOpcao) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalOpcaoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CategoriaAdicionalOpcao) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalOpcaoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CategoriaAdicionalOpcao) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalOpcaoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CategoriaAdicionalOpcao) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalOpcaoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CategoriaAdicionalOpcao) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalOpcaoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CategoriaAdicionalOpcao) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalOpcaoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CategoriaAdicionalOpcao) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalOpcaoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CategoriaAdicionalOpcao) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalOpcaoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCategoriaAdicionalOpcaoHook registers your hook function for all future operations.
func AddCategoriaAdicionalOpcaoHook(hookPoint boil.HookPoint, categoriaAdicionalOpcaoHook CategoriaAdicionalOpcaoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		categoriaAdicionalOpcaoAfterSelectMu.Lock()
		categoriaAdicionalOpcaoAfterSelectHooks = append(categoriaAdicionalOpcaoAfterSelectHooks, categoriaAdicionalOpcaoHook)
		categoriaAdicionalOpcaoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		categoriaAdicionalOpcaoBeforeInsertMu.Lock()
		categoriaAdicionalOpcaoBeforeInsertHooks = append(categoriaAdicionalOpcaoBeforeInsertHooks, categoriaAdicionalOpcaoHook)
		categoriaAdicionalOpcaoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		categoriaAdicionalOpcaoAfterInsertMu.Lock()
		categoriaAdicionalOpcaoAfterInsertHooks = append(categoriaAdicionalOpcaoAfterInsertHooks, categoriaAdicionalOpcaoHook)
		categoriaAdicionalOpcaoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		categoriaAdicionalOpcaoBeforeUpdateMu.Lock()
		categoriaAdicionalOpcaoBeforeUpdateHooks = append(categoriaAdicionalOpcaoBeforeUpdateHooks, categoriaAdicionalOpcaoHook)
		categoriaAdicionalOpcaoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		categoriaAdicionalOpcaoAfterUpdateMu.Lock()
		categoriaAdicionalOpcaoAfterUpdateHooks = append(categoriaAdicionalOpcaoAfterUpdateHooks, categoriaAdicionalOpcaoHook)
		categoriaAdicionalOpcaoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		categoriaAdicionalOpcaoBeforeDeleteMu.Lock()
		categoriaAdicionalOpcaoBeforeDeleteHooks = append(categoriaAdicionalOpcaoBeforeDeleteHooks, categoriaAdicionalOpcaoHook)
		categoriaAdicionalOpcaoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		categoriaAdicionalOpcaoAfterDeleteMu.Lock()
		categoriaAdicionalOpcaoAfterDeleteHooks = append(categoriaAdicionalOpcaoAfterDeleteHooks, categoriaAdicionalOpcaoHook)
		categoriaAdicionalOpcaoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		categoriaAdicionalOpcaoBeforeUpsertMu.Lock()
		categoriaAdicionalOpcaoBeforeUpsertHooks = append(categoriaAdicionalOpcaoBeforeUpsertHooks, categoriaAdicionalOpcaoHook)
		categoriaAdicionalOpcaoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		categoriaAdicionalOpcaoAfterUpsertMu.Lock()
		categoriaAdicionalOpcaoAfterUpsertHooks = append(categoriaAdicionalOpcaoAfterUpsertHooks, categoriaAdicionalOpcaoHook)
		categoriaAdicionalOpcaoAfterUpsertMu.Unlock()
	}
}

// One returns a single categoriaAdicionalOpcao record from the query.
func (q categoriaAdicionalOpcaoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CategoriaAdicionalOpcao, error) {
	o := &CategoriaAdicionalOpcao{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for categoria_adicional_opcoes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CategoriaAdicionalOpcao records from the query.
func (q categoriaAdicionalOpcaoQuery) All(ctx context.Context, exec boil.ContextExecutor) (CategoriaAdicionalOpcaoSlice, error) {
	var o []*CategoriaAdicionalOpcao

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to CategoriaAdicionalOpcao slice")
	}

	if len(categoriaAdicionalOpcaoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CategoriaAdicionalOpcao records in the query.
func (q categoriaAdicionalOpcaoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count categoria_adicional_opcoes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q categoriaAdicionalOpcaoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if categoria_adicional_opcoes exists")
	}

	return count > 0, nil
}

// IDCategoriaAdicionalCategoriaAdicionais pointed to by the foreign key.
func (o *CategoriaAdicionalOpcao) IDCategoriaAdicionalCategoriaAdicionais(mods ...qm.QueryMod) categoriaAdicionalQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDCategoriaAdicional),
	}

	queryMods = append(queryMods, mods...)

	return CategoriaAdicionais(queryMods...)
}

// IDAdicionalOpcaoPedidoItemAdicionais retrieves all the pedido_item_adicionais's PedidoItemAdicionais with an executor via id_adicional_opcao column.
func (o *CategoriaAdicionalOpcao) IDAdicionalOpcaoPedidoItemAdicionais(mods ...qm.QueryMod) pedidoItemAdicionaisQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"pedido_item_adicionais\".\"id_adicional_opcao\"=?", o.ID),
	)

	return PedidoItemAdicionais(queryMods...)
}

// LoadIDCategoriaAdicionalCategoriaAdicionais allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (categoriaAdicionalOpcaoL) LoadIDCategoriaAdicionalCategoriaAdicionais(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategoriaAdicionalOpcao interface{}, mods queries.Applicator) error {
	var slice []*CategoriaAdicionalOpcao
	var object *CategoriaAdicionalOpcao

	if singular {
		var ok bool
		object, ok = maybeCategoriaAdicionalOpcao.(*CategoriaAdicionalOpcao)
		if !ok {
			object = new(CategoriaAdicionalOpcao)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategoriaAdicionalOpcao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategoriaAdicionalOpcao))
			}
		}
	} else {
		s, ok := maybeCategoriaAdicionalOpcao.(*[]*CategoriaAdicionalOpcao)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategoriaAdicionalOpcao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategoriaAdicionalOpcao))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &categoriaAdicionalOpcaoR{}
		}
		args[object.IDCategoriaAdicional] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoriaAdicionalOpcaoR{}
			}

			args[obj.IDCategoriaAdicional] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categoria_adicionais`),
		qm.WhereIn(`categoria_adicionais.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CategoriaAdicional")
	}

	var resultSlice []*CategoriaAdicional
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CategoriaAdicional")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categoria_adicionais")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categoria_adicionais")
	}

	if len(categoriaAdicionalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDCategoriaAdicionalCategoriaAdicionais = foreign
		if foreign.R == nil {
			foreign.R = &categoriaAdicionalR{}
		}
		foreign.R.IDCategoriaAdicionalCategoriaAdicionalOpcoes = append(foreign.R.IDCategoriaAdicionalCategoriaAdicionalOpcoes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDCategoriaAdicional == foreign.ID {
				local.R.IDCategoriaAdicionalCategoriaAdicionais = foreign
				if foreign.R == nil {
					foreign.R = &categoriaAdicionalR{}
				}
				foreign.R.IDCategoriaAdicionalCategoriaAdicionalOpcoes = append(foreign.R.IDCategoriaAdicionalCategoriaAdicionalOpcoes, local)
				break
			}
		}
	}

	return nil
}

// LoadIDAdicionalOpcaoPedidoItemAdicionais allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (categoriaAdicionalOpcaoL) LoadIDAdicionalOpcaoPedidoItemAdicionais(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategoriaAdicionalOpcao interface{}, mods queries.Applicator) error {
	var slice []*CategoriaAdicionalOpcao
	var object *CategoriaAdicionalOpcao

	if singular {
		var ok bool
		object, ok = maybeCategoriaAdicionalOpcao.(*CategoriaAdicionalOpcao)
		if !ok {
			object = new(CategoriaAdicionalOpcao)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategoriaAdicionalOpcao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategoriaAdicionalOpcao))
			}
		}
	} else {
		s, ok := maybeCategoriaAdicionalOpcao.(*[]*CategoriaAdicionalOpcao)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategoriaAdicionalOpcao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategoriaAdicionalOpcao))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &categoriaAdicionalOpcaoR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoriaAdicionalOpcaoR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`pedido_item_adicionais`),
		qm.WhereIn(`pedido_item_adicionais.id_adicional_opcao in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pedido_item_adicionais")
	}

	var resultSlice []*PedidoItemAdicionais
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pedido_item_adicionais")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pedido_item_adicionais")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pedido_item_adicionais")
	}

	if len(pedidoItemAdicionaisAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDAdicionalOpcaoPedidoItemAdicionais = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pedidoItemAdicionaisR{}
			}
			foreign.R.IDAdicionalOpcaoCategoriaAdicionalOpco = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDAdicionalOpcao {
				local.R.IDAdicionalOpcaoPedidoItemAdicionais = append(local.R.IDAdicionalOpcaoPedidoItemAdicionais, foreign)
				if foreign.R == nil {
					foreign.R = &pedidoItemAdicionaisR{}
				}
				foreign.R.IDAdicionalOpcaoCategoriaAdicionalOpco = local
				break
			}
		}
	}

	return nil
}

// SetIDCategoriaAdicionalCategoriaAdicionais of the categoriaAdicionalOpcao to the related item.
// Sets o.R.IDCategoriaAdicionalCategoriaAdicionais to related.
// Adds o to related.R.IDCategoriaAdicionalCategoriaAdicionalOpcoes.
func (o *CategoriaAdicionalOpcao) SetIDCategoriaAdicionalCategoriaAdicionais(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CategoriaAdicional) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"categoria_adicional_opcoes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_categoria_adicional"}),
		strmangle.WhereClause("\"", "\"", 2, categoriaAdicionalOpcaoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDCategoriaAdicional = related.ID
	if o.R == nil {
		o.R = &categoriaAdicionalOpcaoR{
			IDCategoriaAdicionalCategoriaAdicionais: related,
		}
	} else {
		o.R.IDCategoriaAdicionalCategoriaAdicionais = related
	}

	if related.R == nil {
		related.R = &categoriaAdicionalR{
			IDCategoriaAdicionalCategoriaAdicionalOpcoes: CategoriaAdicionalOpcaoSlice{o},
		}
	} else {
		related.R.IDCategoriaAdicionalCategoriaAdicionalOpcoes = append(related.R.IDCategoriaAdicionalCategoriaAdicionalOpcoes, o)
	}

	return nil
}

// AddIDAdicionalOpcaoPedidoItemAdicionais adds the given related objects to the existing relationships
// of the categoria_adicional_opco, optionally inserting them as new records.
// Appends related to o.R.IDAdicionalOpcaoPedidoItemAdicionais.
// Sets related.R.IDAdicionalOpcaoCategoriaAdicionalOpco appropriately.
func (o *CategoriaAdicionalOpcao) AddIDAdicionalOpcaoPedidoItemAdicionais(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PedidoItemAdicionais) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDAdicionalOpcao = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"pedido_item_adicionais\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_adicional_opcao"}),
				strmangle.WhereClause("\"", "\"", 2, pedidoItemAdicionaisPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDAdicionalOpcao = o.ID
		}
	}

	if o.R == nil {
		o.R = &categoriaAdicionalOpcaoR{
			IDAdicionalOpcaoPedidoItemAdicionais: related,
		}
	} else {
		o.R.IDAdicionalOpcaoPedidoItemAdicionais = append(o.R.IDAdicionalOpcaoPedidoItemAdicionais, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pedidoItemAdicionaisR{
				IDAdicionalOpcaoCategoriaAdicionalOpco: o,
			}
		} else {
			rel.R.IDAdicionalOpcaoCategoriaAdicionalOpco = o
		}
	}
	return nil
}

// CategoriaAdicionalOpcoes retrieves all the records using an executor.
func CategoriaAdicionalOpcoes(mods ...qm.QueryMod) categoriaAdicionalOpcaoQuery {
	mods = append(mods, qm.From("\"categoria_adicional_opcoes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"categoria_adicional_opcoes\".*"})
	}

	return categoriaAdicionalOpcaoQuery{q}
}

// FindCategoriaAdicionalOpcao retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCategoriaAdicionalOpcao(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CategoriaAdicionalOpcao, error) {
	categoriaAdicionalOpcaoObj := &CategoriaAdicionalOpcao{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"categoria_adicional_opcoes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, categoriaAdicionalOpcaoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from categoria_adicional_opcoes")
	}

	if err = categoriaAdicionalOpcaoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return categoriaAdicionalOpcaoObj, err
	}

	return categoriaAdicionalOpcaoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CategoriaAdicionalOpcao) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no categoria_adicional_opcoes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(categoriaAdicionalOpcaoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	categoriaAdicionalOpcaoInsertCacheMut.RLock()
	cache, cached := categoriaAdicionalOpcaoInsertCache[key]
	categoriaAdicionalOpcaoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			categoriaAdicionalOpcaoAllColumns,
			categoriaAdicionalOpcaoColumnsWithDefault,
			categoriaAdicionalOpcaoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(categoriaAdicionalOpcaoType, categoriaAdicionalOpcaoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(categoriaAdicionalOpcaoType, categoriaAdicionalOpcaoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"categoria_adicional_opcoes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"categoria_adicional_opcoes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into categoria_adicional_opcoes")
	}

	if !cached {
		categoriaAdicionalOpcaoInsertCacheMut.Lock()
		categoriaAdicionalOpcaoInsertCache[key] = cache
		categoriaAdicionalOpcaoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CategoriaAdicionalOpcao.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CategoriaAdicionalOpcao) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	categoriaAdicionalOpcaoUpdateCacheMut.RLock()
	cache, cached := categoriaAdicionalOpcaoUpdateCache[key]
	categoriaAdicionalOpcaoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			categoriaAdicionalOpcaoAllColumns,
			categoriaAdicionalOpcaoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update categoria_adicional_opcoes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"categoria_adicional_opcoes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, categoriaAdicionalOpcaoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(categoriaAdicionalOpcaoType, categoriaAdicionalOpcaoMapping, append(wl, categoriaAdicionalOpcaoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update categoria_adicional_opcoes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for categoria_adicional_opcoes")
	}

	if !cached {
		categoriaAdicionalOpcaoUpdateCacheMut.Lock()
		categoriaAdicionalOpcaoUpdateCache[key] = cache
		categoriaAdicionalOpcaoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q categoriaAdicionalOpcaoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for categoria_adicional_opcoes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for categoria_adicional_opcoes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CategoriaAdicionalOpcaoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoriaAdicionalOpcaoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"categoria_adicional_opcoes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, categoriaAdicionalOpcaoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in categoriaAdicionalOpcao slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all categoriaAdicionalOpcao")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CategoriaAdicionalOpcao) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no categoria_adicional_opcoes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(categoriaAdicionalOpcaoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	categoriaAdicionalOpcaoUpsertCacheMut.RLock()
	cache, cached := categoriaAdicionalOpcaoUpsertCache[key]
	categoriaAdicionalOpcaoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			categoriaAdicionalOpcaoAllColumns,
			categoriaAdicionalOpcaoColumnsWithDefault,
			categoriaAdicionalOpcaoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			categoriaAdicionalOpcaoAllColumns,
			categoriaAdicionalOpcaoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert categoria_adicional_opcoes, could not build update column list")
		}

		ret := strmangle.SetComplement(categoriaAdicionalOpcaoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(categoriaAdicionalOpcaoPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert categoria_adicional_opcoes, could not build conflict column list")
			}

			conflict = make([]string, len(categoriaAdicionalOpcaoPrimaryKeyColumns))
			copy(conflict, categoriaAdicionalOpcaoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"categoria_adicional_opcoes\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(categoriaAdicionalOpcaoType, categoriaAdicionalOpcaoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(categoriaAdicionalOpcaoType, categoriaAdicionalOpcaoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert categoria_adicional_opcoes")
	}

	if !cached {
		categoriaAdicionalOpcaoUpsertCacheMut.Lock()
		categoriaAdicionalOpcaoUpsertCache[key] = cache
		categoriaAdicionalOpcaoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CategoriaAdicionalOpcao record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CategoriaAdicionalOpcao) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no CategoriaAdicionalOpcao provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), categoriaAdicionalOpcaoPrimaryKeyMapping)
	sql := "DELETE FROM \"categoria_adicional_opcoes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from categoria_adicional_opcoes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for categoria_adicional_opcoes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q categoriaAdicionalOpcaoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no categoriaAdicionalOpcaoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from categoria_adicional_opcoes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for categoria_adicional_opcoes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CategoriaAdicionalOpcaoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(categoriaAdicionalOpcaoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoriaAdicionalOpcaoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"categoria_adicional_opcoes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, categoriaAdicionalOpcaoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from categoriaAdicionalOpcao slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for categoria_adicional_opcoes")
	}

	if len(categoriaAdicionalOpcaoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CategoriaAdicionalOpcao) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCategoriaAdicionalOpcao(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CategoriaAdicionalOpcaoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CategoriaAdicionalOpcaoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoriaAdicionalOpcaoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"categoria_adicional_opcoes\".* FROM \"categoria_adicional_opcoes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, categoriaAdicionalOpcaoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in CategoriaAdicionalOpcaoSlice")
	}

	*o = slice

	return nil
}

// CategoriaAdicionalOpcaoExists checks if the CategoriaAdicionalOpcao row exists.
func CategoriaAdicionalOpcaoExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"categoria_adicional_opcoes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if categoria_adicional_opcoes exists")
	}

	return exists, nil
}

// Exists checks if the CategoriaAdicionalOpcao row exists.
func (o *CategoriaAdicionalOpcao) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CategoriaAdicionalOpcaoExists(ctx, exec, o.ID)
}
