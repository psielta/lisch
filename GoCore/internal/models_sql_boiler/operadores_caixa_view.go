// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OperadoresCaixaView is an object representing the database table.
type OperadoresCaixaView struct {
	ID        null.String `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	SeqID     null.Int64  `boil:"seq_id" json:"seq_id,omitempty" toml:"seq_id" yaml:"seq_id,omitempty"`
	TenantID  null.String `boil:"tenant_id" json:"tenant_id,omitempty" toml:"tenant_id" yaml:"tenant_id,omitempty"`
	IDUsuario null.String `boil:"id_usuario" json:"id_usuario,omitempty" toml:"id_usuario" yaml:"id_usuario,omitempty"`
	Nome      null.String `boil:"nome" json:"nome,omitempty" toml:"nome" yaml:"nome,omitempty"`
	Codigo    null.String `boil:"codigo" json:"codigo,omitempty" toml:"codigo" yaml:"codigo,omitempty"`
	Ativo     null.Int16  `boil:"ativo" json:"ativo,omitempty" toml:"ativo" yaml:"ativo,omitempty"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
}

var OperadoresCaixaViewColumns = struct {
	ID        string
	SeqID     string
	TenantID  string
	IDUsuario string
	Nome      string
	Codigo    string
	Ativo     string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	SeqID:     "seq_id",
	TenantID:  "tenant_id",
	IDUsuario: "id_usuario",
	Nome:      "nome",
	Codigo:    "codigo",
	Ativo:     "ativo",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var OperadoresCaixaViewTableColumns = struct {
	ID        string
	SeqID     string
	TenantID  string
	IDUsuario string
	Nome      string
	Codigo    string
	Ativo     string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "operadores_caixa_view.id",
	SeqID:     "operadores_caixa_view.seq_id",
	TenantID:  "operadores_caixa_view.tenant_id",
	IDUsuario: "operadores_caixa_view.id_usuario",
	Nome:      "operadores_caixa_view.nome",
	Codigo:    "operadores_caixa_view.codigo",
	Ativo:     "operadores_caixa_view.ativo",
	CreatedAt: "operadores_caixa_view.created_at",
	UpdatedAt: "operadores_caixa_view.updated_at",
	DeletedAt: "operadores_caixa_view.deleted_at",
}

// Generated where

var OperadoresCaixaViewWhere = struct {
	ID        whereHelpernull_String
	SeqID     whereHelpernull_Int64
	TenantID  whereHelpernull_String
	IDUsuario whereHelpernull_String
	Nome      whereHelpernull_String
	Codigo    whereHelpernull_String
	Ativo     whereHelpernull_Int16
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelpernull_String{field: "\"operadores_caixa_view\".\"id\""},
	SeqID:     whereHelpernull_Int64{field: "\"operadores_caixa_view\".\"seq_id\""},
	TenantID:  whereHelpernull_String{field: "\"operadores_caixa_view\".\"tenant_id\""},
	IDUsuario: whereHelpernull_String{field: "\"operadores_caixa_view\".\"id_usuario\""},
	Nome:      whereHelpernull_String{field: "\"operadores_caixa_view\".\"nome\""},
	Codigo:    whereHelpernull_String{field: "\"operadores_caixa_view\".\"codigo\""},
	Ativo:     whereHelpernull_Int16{field: "\"operadores_caixa_view\".\"ativo\""},
	CreatedAt: whereHelpernull_Time{field: "\"operadores_caixa_view\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"operadores_caixa_view\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"operadores_caixa_view\".\"deleted_at\""},
}

var (
	operadoresCaixaViewAllColumns            = []string{"id", "seq_id", "tenant_id", "id_usuario", "nome", "codigo", "ativo", "created_at", "updated_at", "deleted_at"}
	operadoresCaixaViewColumnsWithoutDefault = []string{}
	operadoresCaixaViewColumnsWithDefault    = []string{"id", "seq_id", "tenant_id", "id_usuario", "nome", "codigo", "ativo", "created_at", "updated_at", "deleted_at"}
	operadoresCaixaViewPrimaryKeyColumns     = []string{}
	operadoresCaixaViewGeneratedColumns      = []string{}
)

type (
	// OperadoresCaixaViewSlice is an alias for a slice of pointers to OperadoresCaixaView.
	// This should almost always be used instead of []OperadoresCaixaView.
	OperadoresCaixaViewSlice []*OperadoresCaixaView
	// OperadoresCaixaViewHook is the signature for custom OperadoresCaixaView hook methods
	OperadoresCaixaViewHook func(context.Context, boil.ContextExecutor, *OperadoresCaixaView) error

	operadoresCaixaViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	operadoresCaixaViewType           = reflect.TypeOf(&OperadoresCaixaView{})
	operadoresCaixaViewMapping        = queries.MakeStructMapping(operadoresCaixaViewType)
	operadoresCaixaViewInsertCacheMut sync.RWMutex
	operadoresCaixaViewInsertCache    = make(map[string]insertCache)
	operadoresCaixaViewUpdateCacheMut sync.RWMutex
	operadoresCaixaViewUpdateCache    = make(map[string]updateCache)
	operadoresCaixaViewUpsertCacheMut sync.RWMutex
	operadoresCaixaViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var operadoresCaixaViewAfterSelectMu sync.Mutex
var operadoresCaixaViewAfterSelectHooks []OperadoresCaixaViewHook

var operadoresCaixaViewBeforeInsertMu sync.Mutex
var operadoresCaixaViewBeforeInsertHooks []OperadoresCaixaViewHook
var operadoresCaixaViewAfterInsertMu sync.Mutex
var operadoresCaixaViewAfterInsertHooks []OperadoresCaixaViewHook

var operadoresCaixaViewBeforeUpsertMu sync.Mutex
var operadoresCaixaViewBeforeUpsertHooks []OperadoresCaixaViewHook
var operadoresCaixaViewAfterUpsertMu sync.Mutex
var operadoresCaixaViewAfterUpsertHooks []OperadoresCaixaViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OperadoresCaixaView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operadoresCaixaViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OperadoresCaixaView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operadoresCaixaViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OperadoresCaixaView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operadoresCaixaViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OperadoresCaixaView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operadoresCaixaViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OperadoresCaixaView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operadoresCaixaViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOperadoresCaixaViewHook registers your hook function for all future operations.
func AddOperadoresCaixaViewHook(hookPoint boil.HookPoint, operadoresCaixaViewHook OperadoresCaixaViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		operadoresCaixaViewAfterSelectMu.Lock()
		operadoresCaixaViewAfterSelectHooks = append(operadoresCaixaViewAfterSelectHooks, operadoresCaixaViewHook)
		operadoresCaixaViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		operadoresCaixaViewBeforeInsertMu.Lock()
		operadoresCaixaViewBeforeInsertHooks = append(operadoresCaixaViewBeforeInsertHooks, operadoresCaixaViewHook)
		operadoresCaixaViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		operadoresCaixaViewAfterInsertMu.Lock()
		operadoresCaixaViewAfterInsertHooks = append(operadoresCaixaViewAfterInsertHooks, operadoresCaixaViewHook)
		operadoresCaixaViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		operadoresCaixaViewBeforeUpsertMu.Lock()
		operadoresCaixaViewBeforeUpsertHooks = append(operadoresCaixaViewBeforeUpsertHooks, operadoresCaixaViewHook)
		operadoresCaixaViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		operadoresCaixaViewAfterUpsertMu.Lock()
		operadoresCaixaViewAfterUpsertHooks = append(operadoresCaixaViewAfterUpsertHooks, operadoresCaixaViewHook)
		operadoresCaixaViewAfterUpsertMu.Unlock()
	}
}

// One returns a single operadoresCaixaView record from the query.
func (q operadoresCaixaViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OperadoresCaixaView, error) {
	o := &OperadoresCaixaView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for operadores_caixa_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OperadoresCaixaView records from the query.
func (q operadoresCaixaViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (OperadoresCaixaViewSlice, error) {
	var o []*OperadoresCaixaView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to OperadoresCaixaView slice")
	}

	if len(operadoresCaixaViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OperadoresCaixaView records in the query.
func (q operadoresCaixaViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count operadores_caixa_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q operadoresCaixaViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if operadores_caixa_view exists")
	}

	return count > 0, nil
}

// OperadoresCaixaViews retrieves all the records using an executor.
func OperadoresCaixaViews(mods ...qm.QueryMod) operadoresCaixaViewQuery {
	mods = append(mods, qm.From("\"operadores_caixa_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"operadores_caixa_view\".*"})
	}

	return operadoresCaixaViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OperadoresCaixaView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no operadores_caixa_view provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(operadoresCaixaViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	operadoresCaixaViewInsertCacheMut.RLock()
	cache, cached := operadoresCaixaViewInsertCache[key]
	operadoresCaixaViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			operadoresCaixaViewAllColumns,
			operadoresCaixaViewColumnsWithDefault,
			operadoresCaixaViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(operadoresCaixaViewType, operadoresCaixaViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(operadoresCaixaViewType, operadoresCaixaViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"operadores_caixa_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"operadores_caixa_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into operadores_caixa_view")
	}

	if !cached {
		operadoresCaixaViewInsertCacheMut.Lock()
		operadoresCaixaViewInsertCache[key] = cache
		operadoresCaixaViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OperadoresCaixaView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no operadores_caixa_view provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(operadoresCaixaViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	operadoresCaixaViewUpsertCacheMut.RLock()
	cache, cached := operadoresCaixaViewUpsertCache[key]
	operadoresCaixaViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			operadoresCaixaViewAllColumns,
			operadoresCaixaViewColumnsWithDefault,
			operadoresCaixaViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			operadoresCaixaViewAllColumns,
			operadoresCaixaViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert operadores_caixa_view, could not build update column list")
		}

		ret := strmangle.SetComplement(operadoresCaixaViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(operadoresCaixaViewPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert operadores_caixa_view, could not build conflict column list")
			}

			conflict = make([]string, len(operadoresCaixaViewPrimaryKeyColumns))
			copy(conflict, operadoresCaixaViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"operadores_caixa_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(operadoresCaixaViewType, operadoresCaixaViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(operadoresCaixaViewType, operadoresCaixaViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert operadores_caixa_view")
	}

	if !cached {
		operadoresCaixaViewUpsertCacheMut.Lock()
		operadoresCaixaViewUpsertCache[key] = cache
		operadoresCaixaViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
