// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Categoria is an object representing the database table.
type Categoria struct {
	// Identificador único UUID da categoria
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`
	// Identificador sequencial para facilitar CRUD
	SeqID int64 `boil:"seq_id" json:"seq_id" toml:"seq_id" yaml:"seq_id"`
	// ID do tenant ao qual a categoria pertence
	IDTenant string `boil:"id_tenant" json:"id_tenant" toml:"id_tenant" yaml:"id_tenant"`
	// Referência ao tipo de culinária da categoria
	IDCulinaria int `boil:"id_culinaria" json:"id_culinaria" toml:"id_culinaria" yaml:"id_culinaria"`
	// Nome da categoria exibido no cardápio
	Nome string `boil:"nome" json:"nome" toml:"nome" yaml:"nome"`
	// Descrição da categoria
	Descricao null.String `boil:"descricao" json:"descricao,omitempty" toml:"descricao" yaml:"descricao,omitempty"`
	// Horário de início da disponibilidade da categoria
	Inicio time.Time `boil:"inicio" json:"inicio" toml:"inicio" yaml:"inicio"`
	// Horário de fim da disponibilidade da categoria
	Fim time.Time `boil:"fim" json:"fim" toml:"fim" yaml:"fim"`
	// Status da categoria (1=ativo, 0=inativo)
	Ativo int16 `boil:"ativo" json:"ativo" toml:"ativo" yaml:"ativo"`
	// Opção para meio a meio (M=Valor médio, V=Maior valor, vazio=Não permitido)
	OpcaoMeia null.String `boil:"opcao_meia" json:"opcao_meia,omitempty" toml:"opcao_meia" yaml:"opcao_meia,omitempty"`
	// Ordem de exibição da categoria no cardápio
	Ordem             null.Int  `boil:"ordem" json:"ordem,omitempty" toml:"ordem" yaml:"ordem,omitempty"`
	DisponivelDomingo int16     `boil:"disponivel_domingo" json:"disponivel_domingo" toml:"disponivel_domingo" yaml:"disponivel_domingo"`
	DisponivelSegunda int16     `boil:"disponivel_segunda" json:"disponivel_segunda" toml:"disponivel_segunda" yaml:"disponivel_segunda"`
	DisponivelTerca   int16     `boil:"disponivel_terca" json:"disponivel_terca" toml:"disponivel_terca" yaml:"disponivel_terca"`
	DisponivelQuarta  int16     `boil:"disponivel_quarta" json:"disponivel_quarta" toml:"disponivel_quarta" yaml:"disponivel_quarta"`
	DisponivelQuinta  int16     `boil:"disponivel_quinta" json:"disponivel_quinta" toml:"disponivel_quinta" yaml:"disponivel_quinta"`
	DisponivelSexta   int16     `boil:"disponivel_sexta" json:"disponivel_sexta" toml:"disponivel_sexta" yaml:"disponivel_sexta"`
	DisponivelSabado  int16     `boil:"disponivel_sabado" json:"disponivel_sabado" toml:"disponivel_sabado" yaml:"disponivel_sabado"`
	CreatedAt         time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	// Data e hora de exclusão lógica (soft delete)
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *categoriaR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L categoriaL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CategoriaColumns = struct {
	ID                string
	SeqID             string
	IDTenant          string
	IDCulinaria       string
	Nome              string
	Descricao         string
	Inicio            string
	Fim               string
	Ativo             string
	OpcaoMeia         string
	Ordem             string
	DisponivelDomingo string
	DisponivelSegunda string
	DisponivelTerca   string
	DisponivelQuarta  string
	DisponivelQuinta  string
	DisponivelSexta   string
	DisponivelSabado  string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         string
}{
	ID:                "id",
	SeqID:             "seq_id",
	IDTenant:          "id_tenant",
	IDCulinaria:       "id_culinaria",
	Nome:              "nome",
	Descricao:         "descricao",
	Inicio:            "inicio",
	Fim:               "fim",
	Ativo:             "ativo",
	OpcaoMeia:         "opcao_meia",
	Ordem:             "ordem",
	DisponivelDomingo: "disponivel_domingo",
	DisponivelSegunda: "disponivel_segunda",
	DisponivelTerca:   "disponivel_terca",
	DisponivelQuarta:  "disponivel_quarta",
	DisponivelQuinta:  "disponivel_quinta",
	DisponivelSexta:   "disponivel_sexta",
	DisponivelSabado:  "disponivel_sabado",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	DeletedAt:         "deleted_at",
}

var CategoriaTableColumns = struct {
	ID                string
	SeqID             string
	IDTenant          string
	IDCulinaria       string
	Nome              string
	Descricao         string
	Inicio            string
	Fim               string
	Ativo             string
	OpcaoMeia         string
	Ordem             string
	DisponivelDomingo string
	DisponivelSegunda string
	DisponivelTerca   string
	DisponivelQuarta  string
	DisponivelQuinta  string
	DisponivelSexta   string
	DisponivelSabado  string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         string
}{
	ID:                "categorias.id",
	SeqID:             "categorias.seq_id",
	IDTenant:          "categorias.id_tenant",
	IDCulinaria:       "categorias.id_culinaria",
	Nome:              "categorias.nome",
	Descricao:         "categorias.descricao",
	Inicio:            "categorias.inicio",
	Fim:               "categorias.fim",
	Ativo:             "categorias.ativo",
	OpcaoMeia:         "categorias.opcao_meia",
	Ordem:             "categorias.ordem",
	DisponivelDomingo: "categorias.disponivel_domingo",
	DisponivelSegunda: "categorias.disponivel_segunda",
	DisponivelTerca:   "categorias.disponivel_terca",
	DisponivelQuarta:  "categorias.disponivel_quarta",
	DisponivelQuinta:  "categorias.disponivel_quinta",
	DisponivelSexta:   "categorias.disponivel_sexta",
	DisponivelSabado:  "categorias.disponivel_sabado",
	CreatedAt:         "categorias.created_at",
	UpdatedAt:         "categorias.updated_at",
	DeletedAt:         "categorias.deleted_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CategoriaWhere = struct {
	ID                whereHelperstring
	SeqID             whereHelperint64
	IDTenant          whereHelperstring
	IDCulinaria       whereHelperint
	Nome              whereHelperstring
	Descricao         whereHelpernull_String
	Inicio            whereHelpertime_Time
	Fim               whereHelpertime_Time
	Ativo             whereHelperint16
	OpcaoMeia         whereHelpernull_String
	Ordem             whereHelpernull_Int
	DisponivelDomingo whereHelperint16
	DisponivelSegunda whereHelperint16
	DisponivelTerca   whereHelperint16
	DisponivelQuarta  whereHelperint16
	DisponivelQuinta  whereHelperint16
	DisponivelSexta   whereHelperint16
	DisponivelSabado  whereHelperint16
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
	DeletedAt         whereHelpernull_Time
}{
	ID:                whereHelperstring{field: "\"categorias\".\"id\""},
	SeqID:             whereHelperint64{field: "\"categorias\".\"seq_id\""},
	IDTenant:          whereHelperstring{field: "\"categorias\".\"id_tenant\""},
	IDCulinaria:       whereHelperint{field: "\"categorias\".\"id_culinaria\""},
	Nome:              whereHelperstring{field: "\"categorias\".\"nome\""},
	Descricao:         whereHelpernull_String{field: "\"categorias\".\"descricao\""},
	Inicio:            whereHelpertime_Time{field: "\"categorias\".\"inicio\""},
	Fim:               whereHelpertime_Time{field: "\"categorias\".\"fim\""},
	Ativo:             whereHelperint16{field: "\"categorias\".\"ativo\""},
	OpcaoMeia:         whereHelpernull_String{field: "\"categorias\".\"opcao_meia\""},
	Ordem:             whereHelpernull_Int{field: "\"categorias\".\"ordem\""},
	DisponivelDomingo: whereHelperint16{field: "\"categorias\".\"disponivel_domingo\""},
	DisponivelSegunda: whereHelperint16{field: "\"categorias\".\"disponivel_segunda\""},
	DisponivelTerca:   whereHelperint16{field: "\"categorias\".\"disponivel_terca\""},
	DisponivelQuarta:  whereHelperint16{field: "\"categorias\".\"disponivel_quarta\""},
	DisponivelQuinta:  whereHelperint16{field: "\"categorias\".\"disponivel_quinta\""},
	DisponivelSexta:   whereHelperint16{field: "\"categorias\".\"disponivel_sexta\""},
	DisponivelSabado:  whereHelperint16{field: "\"categorias\".\"disponivel_sabado\""},
	CreatedAt:         whereHelpertime_Time{field: "\"categorias\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"categorias\".\"updated_at\""},
	DeletedAt:         whereHelpernull_Time{field: "\"categorias\".\"deleted_at\""},
}

// CategoriaRels is where relationship names are stored.
var CategoriaRels = struct {
	Culinaria            string
	Tenant               string
	CategoriaOpcoes      string
	IDCategoriumProdutos string
}{
	Culinaria:            "Culinaria",
	Tenant:               "Tenant",
	CategoriaOpcoes:      "CategoriaOpcoes",
	IDCategoriumProdutos: "IDCategoriumProdutos",
}

// categoriaR is where relationships are stored.
type categoriaR struct {
	Culinaria            *Culinaria          `boil:"Culinaria" json:"Culinaria" toml:"Culinaria" yaml:"Culinaria"`
	Tenant               *Tenant             `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
	CategoriaOpcoes      CategoriaOpcaoSlice `boil:"CategoriaOpcoes" json:"CategoriaOpcoes" toml:"CategoriaOpcoes" yaml:"CategoriaOpcoes"`
	IDCategoriumProdutos ProdutoSlice        `boil:"IDCategoriumProdutos" json:"IDCategoriumProdutos" toml:"IDCategoriumProdutos" yaml:"IDCategoriumProdutos"`
}

// NewStruct creates a new relationship struct
func (*categoriaR) NewStruct() *categoriaR {
	return &categoriaR{}
}

func (r *categoriaR) GetCulinaria() *Culinaria {
	if r == nil {
		return nil
	}
	return r.Culinaria
}

func (r *categoriaR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}
	return r.Tenant
}

func (r *categoriaR) GetCategoriaOpcoes() CategoriaOpcaoSlice {
	if r == nil {
		return nil
	}
	return r.CategoriaOpcoes
}

func (r *categoriaR) GetIDCategoriumProdutos() ProdutoSlice {
	if r == nil {
		return nil
	}
	return r.IDCategoriumProdutos
}

// categoriaL is where Load methods for each relationship are stored.
type categoriaL struct{}

var (
	categoriaAllColumns            = []string{"id", "seq_id", "id_tenant", "id_culinaria", "nome", "descricao", "inicio", "fim", "ativo", "opcao_meia", "ordem", "disponivel_domingo", "disponivel_segunda", "disponivel_terca", "disponivel_quarta", "disponivel_quinta", "disponivel_sexta", "disponivel_sabado", "created_at", "updated_at", "deleted_at"}
	categoriaColumnsWithoutDefault = []string{"id_tenant", "id_culinaria", "nome", "inicio", "fim"}
	categoriaColumnsWithDefault    = []string{"id", "seq_id", "descricao", "ativo", "opcao_meia", "ordem", "disponivel_domingo", "disponivel_segunda", "disponivel_terca", "disponivel_quarta", "disponivel_quinta", "disponivel_sexta", "disponivel_sabado", "created_at", "updated_at", "deleted_at"}
	categoriaPrimaryKeyColumns     = []string{"id"}
	categoriaGeneratedColumns      = []string{}
)

type (
	// CategoriaSlice is an alias for a slice of pointers to Categoria.
	// This should almost always be used instead of []Categoria.
	CategoriaSlice []*Categoria
	// CategoriaHook is the signature for custom Categoria hook methods
	CategoriaHook func(context.Context, boil.ContextExecutor, *Categoria) error

	categoriaQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	categoriaType                 = reflect.TypeOf(&Categoria{})
	categoriaMapping              = queries.MakeStructMapping(categoriaType)
	categoriaPrimaryKeyMapping, _ = queries.BindMapping(categoriaType, categoriaMapping, categoriaPrimaryKeyColumns)
	categoriaInsertCacheMut       sync.RWMutex
	categoriaInsertCache          = make(map[string]insertCache)
	categoriaUpdateCacheMut       sync.RWMutex
	categoriaUpdateCache          = make(map[string]updateCache)
	categoriaUpsertCacheMut       sync.RWMutex
	categoriaUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var categoriaAfterSelectMu sync.Mutex
var categoriaAfterSelectHooks []CategoriaHook

var categoriaBeforeInsertMu sync.Mutex
var categoriaBeforeInsertHooks []CategoriaHook
var categoriaAfterInsertMu sync.Mutex
var categoriaAfterInsertHooks []CategoriaHook

var categoriaBeforeUpdateMu sync.Mutex
var categoriaBeforeUpdateHooks []CategoriaHook
var categoriaAfterUpdateMu sync.Mutex
var categoriaAfterUpdateHooks []CategoriaHook

var categoriaBeforeDeleteMu sync.Mutex
var categoriaBeforeDeleteHooks []CategoriaHook
var categoriaAfterDeleteMu sync.Mutex
var categoriaAfterDeleteHooks []CategoriaHook

var categoriaBeforeUpsertMu sync.Mutex
var categoriaBeforeUpsertHooks []CategoriaHook
var categoriaAfterUpsertMu sync.Mutex
var categoriaAfterUpsertHooks []CategoriaHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Categoria) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Categoria) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Categoria) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Categoria) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Categoria) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Categoria) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Categoria) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Categoria) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Categoria) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCategoriaHook registers your hook function for all future operations.
func AddCategoriaHook(hookPoint boil.HookPoint, categoriaHook CategoriaHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		categoriaAfterSelectMu.Lock()
		categoriaAfterSelectHooks = append(categoriaAfterSelectHooks, categoriaHook)
		categoriaAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		categoriaBeforeInsertMu.Lock()
		categoriaBeforeInsertHooks = append(categoriaBeforeInsertHooks, categoriaHook)
		categoriaBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		categoriaAfterInsertMu.Lock()
		categoriaAfterInsertHooks = append(categoriaAfterInsertHooks, categoriaHook)
		categoriaAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		categoriaBeforeUpdateMu.Lock()
		categoriaBeforeUpdateHooks = append(categoriaBeforeUpdateHooks, categoriaHook)
		categoriaBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		categoriaAfterUpdateMu.Lock()
		categoriaAfterUpdateHooks = append(categoriaAfterUpdateHooks, categoriaHook)
		categoriaAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		categoriaBeforeDeleteMu.Lock()
		categoriaBeforeDeleteHooks = append(categoriaBeforeDeleteHooks, categoriaHook)
		categoriaBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		categoriaAfterDeleteMu.Lock()
		categoriaAfterDeleteHooks = append(categoriaAfterDeleteHooks, categoriaHook)
		categoriaAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		categoriaBeforeUpsertMu.Lock()
		categoriaBeforeUpsertHooks = append(categoriaBeforeUpsertHooks, categoriaHook)
		categoriaBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		categoriaAfterUpsertMu.Lock()
		categoriaAfterUpsertHooks = append(categoriaAfterUpsertHooks, categoriaHook)
		categoriaAfterUpsertMu.Unlock()
	}
}

// One returns a single categoria record from the query.
func (q categoriaQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Categoria, error) {
	o := &Categoria{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for categorias")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Categoria records from the query.
func (q categoriaQuery) All(ctx context.Context, exec boil.ContextExecutor) (CategoriaSlice, error) {
	var o []*Categoria

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to Categoria slice")
	}

	if len(categoriaAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Categoria records in the query.
func (q categoriaQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count categorias rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q categoriaQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if categorias exists")
	}

	return count > 0, nil
}

// Culinaria pointed to by the foreign key.
func (o *Categoria) Culinaria(mods ...qm.QueryMod) culinariaQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id_culinaria\" = ?", o.IDCulinaria),
	}

	queryMods = append(queryMods, mods...)

	return Culinarias(queryMods...)
}

// Tenant pointed to by the foreign key.
func (o *Categoria) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDTenant),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// CategoriaOpcoes retrieves all the categoria_opco's CategoriaOpcoes with an executor.
func (o *Categoria) CategoriaOpcoes(mods ...qm.QueryMod) categoriaOpcaoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"categoria_opcoes\".\"id_categoria\"=?", o.ID),
	)

	return CategoriaOpcoes(queryMods...)
}

// IDCategoriumProdutos retrieves all the produto's Produtos with an executor via id_categoria column.
func (o *Categoria) IDCategoriumProdutos(mods ...qm.QueryMod) produtoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"produtos\".\"id_categoria\"=?", o.ID),
	)

	return Produtos(queryMods...)
}

// LoadCulinaria allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (categoriaL) LoadCulinaria(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategoria interface{}, mods queries.Applicator) error {
	var slice []*Categoria
	var object *Categoria

	if singular {
		var ok bool
		object, ok = maybeCategoria.(*Categoria)
		if !ok {
			object = new(Categoria)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategoria)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategoria))
			}
		}
	} else {
		s, ok := maybeCategoria.(*[]*Categoria)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategoria)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategoria))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &categoriaR{}
		}
		args[object.IDCulinaria] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoriaR{}
			}

			args[obj.IDCulinaria] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`culinarias`),
		qm.WhereIn(`culinarias.id_culinaria in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Culinaria")
	}

	var resultSlice []*Culinaria
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Culinaria")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for culinarias")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for culinarias")
	}

	if len(culinariaAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Culinaria = foreign
		if foreign.R == nil {
			foreign.R = &culinariaR{}
		}
		foreign.R.Categorias = append(foreign.R.Categorias, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDCulinaria == foreign.IDCulinaria {
				local.R.Culinaria = foreign
				if foreign.R == nil {
					foreign.R = &culinariaR{}
				}
				foreign.R.Categorias = append(foreign.R.Categorias, local)
				break
			}
		}
	}

	return nil
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (categoriaL) LoadTenant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategoria interface{}, mods queries.Applicator) error {
	var slice []*Categoria
	var object *Categoria

	if singular {
		var ok bool
		object, ok = maybeCategoria.(*Categoria)
		if !ok {
			object = new(Categoria)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategoria)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategoria))
			}
		}
	} else {
		s, ok := maybeCategoria.(*[]*Categoria)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategoria)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategoria))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &categoriaR{}
		}
		args[object.IDTenant] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoriaR{}
			}

			args[obj.IDTenant] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.Categorias = append(foreign.R.Categorias, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDTenant == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.Categorias = append(foreign.R.Categorias, local)
				break
			}
		}
	}

	return nil
}

// LoadCategoriaOpcoes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (categoriaL) LoadCategoriaOpcoes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategoria interface{}, mods queries.Applicator) error {
	var slice []*Categoria
	var object *Categoria

	if singular {
		var ok bool
		object, ok = maybeCategoria.(*Categoria)
		if !ok {
			object = new(Categoria)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategoria)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategoria))
			}
		}
	} else {
		s, ok := maybeCategoria.(*[]*Categoria)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategoria)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategoria))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &categoriaR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoriaR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categoria_opcoes`),
		qm.WhereIn(`categoria_opcoes.id_categoria in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load categoria_opcoes")
	}

	var resultSlice []*CategoriaOpcao
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice categoria_opcoes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on categoria_opcoes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categoria_opcoes")
	}

	if len(categoriaOpcaoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CategoriaOpcoes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &categoriaOpcaoR{}
			}
			foreign.R.Categoria = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDCategoria {
				local.R.CategoriaOpcoes = append(local.R.CategoriaOpcoes, foreign)
				if foreign.R == nil {
					foreign.R = &categoriaOpcaoR{}
				}
				foreign.R.Categoria = local
				break
			}
		}
	}

	return nil
}

// LoadIDCategoriumProdutos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (categoriaL) LoadIDCategoriumProdutos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategoria interface{}, mods queries.Applicator) error {
	var slice []*Categoria
	var object *Categoria

	if singular {
		var ok bool
		object, ok = maybeCategoria.(*Categoria)
		if !ok {
			object = new(Categoria)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategoria)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategoria))
			}
		}
	} else {
		s, ok := maybeCategoria.(*[]*Categoria)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategoria)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategoria))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &categoriaR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoriaR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`produtos`),
		qm.WhereIn(`produtos.id_categoria in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load produtos")
	}

	var resultSlice []*Produto
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice produtos")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on produtos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for produtos")
	}

	if len(produtoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDCategoriumProdutos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &produtoR{}
			}
			foreign.R.IDCategorium = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDCategoria {
				local.R.IDCategoriumProdutos = append(local.R.IDCategoriumProdutos, foreign)
				if foreign.R == nil {
					foreign.R = &produtoR{}
				}
				foreign.R.IDCategorium = local
				break
			}
		}
	}

	return nil
}

// SetCulinaria of the categoria to the related item.
// Sets o.R.Culinaria to related.
// Adds o to related.R.Categorias.
func (o *Categoria) SetCulinaria(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Culinaria) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"categorias\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_culinaria"}),
		strmangle.WhereClause("\"", "\"", 2, categoriaPrimaryKeyColumns),
	)
	values := []interface{}{related.IDCulinaria, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDCulinaria = related.IDCulinaria
	if o.R == nil {
		o.R = &categoriaR{
			Culinaria: related,
		}
	} else {
		o.R.Culinaria = related
	}

	if related.R == nil {
		related.R = &culinariaR{
			Categorias: CategoriaSlice{o},
		}
	} else {
		related.R.Categorias = append(related.R.Categorias, o)
	}

	return nil
}

// SetTenant of the categoria to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.Categorias.
func (o *Categoria) SetTenant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"categorias\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_tenant"}),
		strmangle.WhereClause("\"", "\"", 2, categoriaPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDTenant = related.ID
	if o.R == nil {
		o.R = &categoriaR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			Categorias: CategoriaSlice{o},
		}
	} else {
		related.R.Categorias = append(related.R.Categorias, o)
	}

	return nil
}

// AddCategoriaOpcoes adds the given related objects to the existing relationships
// of the categorias, optionally inserting them as new records.
// Appends related to o.R.CategoriaOpcoes.
// Sets related.R.Categoria appropriately.
func (o *Categoria) AddCategoriaOpcoes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CategoriaOpcao) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDCategoria = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"categoria_opcoes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_categoria"}),
				strmangle.WhereClause("\"", "\"", 2, categoriaOpcaoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDCategoria = o.ID
		}
	}

	if o.R == nil {
		o.R = &categoriaR{
			CategoriaOpcoes: related,
		}
	} else {
		o.R.CategoriaOpcoes = append(o.R.CategoriaOpcoes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &categoriaOpcaoR{
				Categoria: o,
			}
		} else {
			rel.R.Categoria = o
		}
	}
	return nil
}

// AddIDCategoriumProdutos adds the given related objects to the existing relationships
// of the categorias, optionally inserting them as new records.
// Appends related to o.R.IDCategoriumProdutos.
// Sets related.R.IDCategorium appropriately.
func (o *Categoria) AddIDCategoriumProdutos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Produto) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDCategoria = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"produtos\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_categoria"}),
				strmangle.WhereClause("\"", "\"", 2, produtoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDCategoria = o.ID
		}
	}

	if o.R == nil {
		o.R = &categoriaR{
			IDCategoriumProdutos: related,
		}
	} else {
		o.R.IDCategoriumProdutos = append(o.R.IDCategoriumProdutos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &produtoR{
				IDCategorium: o,
			}
		} else {
			rel.R.IDCategorium = o
		}
	}
	return nil
}

// Categorias retrieves all the records using an executor.
func Categorias(mods ...qm.QueryMod) categoriaQuery {
	mods = append(mods, qm.From("\"categorias\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"categorias\".*"})
	}

	return categoriaQuery{q}
}

// FindCategoria retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCategoria(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Categoria, error) {
	categoriaObj := &Categoria{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"categorias\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, categoriaObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from categorias")
	}

	if err = categoriaObj.doAfterSelectHooks(ctx, exec); err != nil {
		return categoriaObj, err
	}

	return categoriaObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Categoria) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no categorias provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(categoriaColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	categoriaInsertCacheMut.RLock()
	cache, cached := categoriaInsertCache[key]
	categoriaInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			categoriaAllColumns,
			categoriaColumnsWithDefault,
			categoriaColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(categoriaType, categoriaMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(categoriaType, categoriaMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"categorias\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"categorias\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into categorias")
	}

	if !cached {
		categoriaInsertCacheMut.Lock()
		categoriaInsertCache[key] = cache
		categoriaInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Categoria.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Categoria) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	categoriaUpdateCacheMut.RLock()
	cache, cached := categoriaUpdateCache[key]
	categoriaUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			categoriaAllColumns,
			categoriaPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update categorias, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"categorias\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, categoriaPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(categoriaType, categoriaMapping, append(wl, categoriaPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update categorias row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for categorias")
	}

	if !cached {
		categoriaUpdateCacheMut.Lock()
		categoriaUpdateCache[key] = cache
		categoriaUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q categoriaQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for categorias")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for categorias")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CategoriaSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoriaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"categorias\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, categoriaPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in categoria slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all categoria")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Categoria) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no categorias provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(categoriaColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	categoriaUpsertCacheMut.RLock()
	cache, cached := categoriaUpsertCache[key]
	categoriaUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			categoriaAllColumns,
			categoriaColumnsWithDefault,
			categoriaColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			categoriaAllColumns,
			categoriaPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert categorias, could not build update column list")
		}

		ret := strmangle.SetComplement(categoriaAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(categoriaPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert categorias, could not build conflict column list")
			}

			conflict = make([]string, len(categoriaPrimaryKeyColumns))
			copy(conflict, categoriaPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"categorias\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(categoriaType, categoriaMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(categoriaType, categoriaMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert categorias")
	}

	if !cached {
		categoriaUpsertCacheMut.Lock()
		categoriaUpsertCache[key] = cache
		categoriaUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Categoria record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Categoria) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no Categoria provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), categoriaPrimaryKeyMapping)
	sql := "DELETE FROM \"categorias\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from categorias")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for categorias")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q categoriaQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no categoriaQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from categorias")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for categorias")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CategoriaSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(categoriaBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoriaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"categorias\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, categoriaPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from categoria slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for categorias")
	}

	if len(categoriaAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Categoria) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCategoria(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CategoriaSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CategoriaSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoriaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"categorias\".* FROM \"categorias\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, categoriaPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in CategoriaSlice")
	}

	*o = slice

	return nil
}

// CategoriaExists checks if the Categoria row exists.
func CategoriaExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"categorias\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if categorias exists")
	}

	return exists, nil
}

// Exists checks if the Categoria row exists.
func (o *Categoria) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CategoriaExists(ctx, exec, o.ID)
}
