// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Produto is an object representing the database table.
type Produto struct {
	// Identificador único UUID do produto.
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`
	// Identificador sequencial único do produto (para facilitar CRUD e referência legada se necessário).
	SeqID int64 `boil:"seq_id" json:"seq_id" toml:"seq_id" yaml:"seq_id"`
	// Referência à categoria à qual o produto pertence (FK para public.categorias.id).
	IDCategoria string `boil:"id_categoria" json:"id_categoria" toml:"id_categoria" yaml:"id_categoria"`
	// Nome do produto exibido no cardápio.
	Nome string `boil:"nome" json:"nome" toml:"nome" yaml:"nome"`
	// Descrição detalhada do produto.
	Descricao null.String `boil:"descricao" json:"descricao,omitempty" toml:"descricao" yaml:"descricao,omitempty"`
	// Código externo do produto, utilizado para identificação em integrações ou sistemas legados.
	CodigoExterno null.String `boil:"codigo_externo" json:"codigo_externo,omitempty" toml:"codigo_externo" yaml:"codigo_externo,omitempty"`
	// SKU (Stock Keeping Unit) do produto, para controle de inventário se aplicável.
	Sku null.String `boil:"sku" json:"sku,omitempty" toml:"sku" yaml:"sku,omitempty"`
	// Indica se o cliente pode adicionar observações a este produto no pedido (TRUE/FALSE).
	PermiteObservacao null.Bool `boil:"permite_observacao" json:"permite_observacao,omitempty" toml:"permite_observacao" yaml:"permite_observacao,omitempty"`
	// Define a ordem de exibição deste produto dentro de sua categoria no cardápio.
	Ordem null.Int `boil:"ordem" json:"ordem,omitempty" toml:"ordem" yaml:"ordem,omitempty"`
	// URL da imagem principal associada ao produto.
	ImagemURL null.String `boil:"imagem_url" json:"imagem_url,omitempty" toml:"imagem_url" yaml:"imagem_url,omitempty"`
	// Status do produto (1 = ativo, 0 = inativo).
	Status int16 `boil:"status" json:"status" toml:"status" yaml:"status"`
	// Timestamp da criação do registro do produto.
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// Timestamp da última atualização do registro do produto.
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	// Timestamp da exclusão lógica do produto (soft delete).
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *produtoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L produtoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProdutoColumns = struct {
	ID                string
	SeqID             string
	IDCategoria       string
	Nome              string
	Descricao         string
	CodigoExterno     string
	Sku               string
	PermiteObservacao string
	Ordem             string
	ImagemURL         string
	Status            string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         string
}{
	ID:                "id",
	SeqID:             "seq_id",
	IDCategoria:       "id_categoria",
	Nome:              "nome",
	Descricao:         "descricao",
	CodigoExterno:     "codigo_externo",
	Sku:               "sku",
	PermiteObservacao: "permite_observacao",
	Ordem:             "ordem",
	ImagemURL:         "imagem_url",
	Status:            "status",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	DeletedAt:         "deleted_at",
}

var ProdutoTableColumns = struct {
	ID                string
	SeqID             string
	IDCategoria       string
	Nome              string
	Descricao         string
	CodigoExterno     string
	Sku               string
	PermiteObservacao string
	Ordem             string
	ImagemURL         string
	Status            string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         string
}{
	ID:                "produtos.id",
	SeqID:             "produtos.seq_id",
	IDCategoria:       "produtos.id_categoria",
	Nome:              "produtos.nome",
	Descricao:         "produtos.descricao",
	CodigoExterno:     "produtos.codigo_externo",
	Sku:               "produtos.sku",
	PermiteObservacao: "produtos.permite_observacao",
	Ordem:             "produtos.ordem",
	ImagemURL:         "produtos.imagem_url",
	Status:            "produtos.status",
	CreatedAt:         "produtos.created_at",
	UpdatedAt:         "produtos.updated_at",
	DeletedAt:         "produtos.deleted_at",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ProdutoWhere = struct {
	ID                whereHelperstring
	SeqID             whereHelperint64
	IDCategoria       whereHelperstring
	Nome              whereHelperstring
	Descricao         whereHelpernull_String
	CodigoExterno     whereHelpernull_String
	Sku               whereHelpernull_String
	PermiteObservacao whereHelpernull_Bool
	Ordem             whereHelpernull_Int
	ImagemURL         whereHelpernull_String
	Status            whereHelperint16
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
	DeletedAt         whereHelpernull_Time
}{
	ID:                whereHelperstring{field: "\"produtos\".\"id\""},
	SeqID:             whereHelperint64{field: "\"produtos\".\"seq_id\""},
	IDCategoria:       whereHelperstring{field: "\"produtos\".\"id_categoria\""},
	Nome:              whereHelperstring{field: "\"produtos\".\"nome\""},
	Descricao:         whereHelpernull_String{field: "\"produtos\".\"descricao\""},
	CodigoExterno:     whereHelpernull_String{field: "\"produtos\".\"codigo_externo\""},
	Sku:               whereHelpernull_String{field: "\"produtos\".\"sku\""},
	PermiteObservacao: whereHelpernull_Bool{field: "\"produtos\".\"permite_observacao\""},
	Ordem:             whereHelpernull_Int{field: "\"produtos\".\"ordem\""},
	ImagemURL:         whereHelpernull_String{field: "\"produtos\".\"imagem_url\""},
	Status:            whereHelperint16{field: "\"produtos\".\"status\""},
	CreatedAt:         whereHelpertime_Time{field: "\"produtos\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"produtos\".\"updated_at\""},
	DeletedAt:         whereHelpernull_Time{field: "\"produtos\".\"deleted_at\""},
}

// ProdutoRels is where relationship names are stored.
var ProdutoRels = struct {
	IDCategorium           string
	IDProdutoProdutoPrecos string
}{
	IDCategorium:           "IDCategorium",
	IDProdutoProdutoPrecos: "IDProdutoProdutoPrecos",
}

// produtoR is where relationships are stored.
type produtoR struct {
	IDCategorium           *Categoria        `boil:"IDCategorium" json:"IDCategorium" toml:"IDCategorium" yaml:"IDCategorium"`
	IDProdutoProdutoPrecos ProdutoPrecoSlice `boil:"IDProdutoProdutoPrecos" json:"IDProdutoProdutoPrecos" toml:"IDProdutoProdutoPrecos" yaml:"IDProdutoProdutoPrecos"`
}

// NewStruct creates a new relationship struct
func (*produtoR) NewStruct() *produtoR {
	return &produtoR{}
}

func (r *produtoR) GetIDCategorium() *Categoria {
	if r == nil {
		return nil
	}
	return r.IDCategorium
}

func (r *produtoR) GetIDProdutoProdutoPrecos() ProdutoPrecoSlice {
	if r == nil {
		return nil
	}
	return r.IDProdutoProdutoPrecos
}

// produtoL is where Load methods for each relationship are stored.
type produtoL struct{}

var (
	produtoAllColumns            = []string{"id", "seq_id", "id_categoria", "nome", "descricao", "codigo_externo", "sku", "permite_observacao", "ordem", "imagem_url", "status", "created_at", "updated_at", "deleted_at"}
	produtoColumnsWithoutDefault = []string{"id_categoria", "nome"}
	produtoColumnsWithDefault    = []string{"id", "seq_id", "descricao", "codigo_externo", "sku", "permite_observacao", "ordem", "imagem_url", "status", "created_at", "updated_at", "deleted_at"}
	produtoPrimaryKeyColumns     = []string{"id"}
	produtoGeneratedColumns      = []string{}
)

type (
	// ProdutoSlice is an alias for a slice of pointers to Produto.
	// This should almost always be used instead of []Produto.
	ProdutoSlice []*Produto
	// ProdutoHook is the signature for custom Produto hook methods
	ProdutoHook func(context.Context, boil.ContextExecutor, *Produto) error

	produtoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	produtoType                 = reflect.TypeOf(&Produto{})
	produtoMapping              = queries.MakeStructMapping(produtoType)
	produtoPrimaryKeyMapping, _ = queries.BindMapping(produtoType, produtoMapping, produtoPrimaryKeyColumns)
	produtoInsertCacheMut       sync.RWMutex
	produtoInsertCache          = make(map[string]insertCache)
	produtoUpdateCacheMut       sync.RWMutex
	produtoUpdateCache          = make(map[string]updateCache)
	produtoUpsertCacheMut       sync.RWMutex
	produtoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var produtoAfterSelectMu sync.Mutex
var produtoAfterSelectHooks []ProdutoHook

var produtoBeforeInsertMu sync.Mutex
var produtoBeforeInsertHooks []ProdutoHook
var produtoAfterInsertMu sync.Mutex
var produtoAfterInsertHooks []ProdutoHook

var produtoBeforeUpdateMu sync.Mutex
var produtoBeforeUpdateHooks []ProdutoHook
var produtoAfterUpdateMu sync.Mutex
var produtoAfterUpdateHooks []ProdutoHook

var produtoBeforeDeleteMu sync.Mutex
var produtoBeforeDeleteHooks []ProdutoHook
var produtoAfterDeleteMu sync.Mutex
var produtoAfterDeleteHooks []ProdutoHook

var produtoBeforeUpsertMu sync.Mutex
var produtoBeforeUpsertHooks []ProdutoHook
var produtoAfterUpsertMu sync.Mutex
var produtoAfterUpsertHooks []ProdutoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Produto) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range produtoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Produto) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range produtoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Produto) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range produtoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Produto) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range produtoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Produto) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range produtoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Produto) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range produtoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Produto) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range produtoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Produto) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range produtoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Produto) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range produtoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProdutoHook registers your hook function for all future operations.
func AddProdutoHook(hookPoint boil.HookPoint, produtoHook ProdutoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		produtoAfterSelectMu.Lock()
		produtoAfterSelectHooks = append(produtoAfterSelectHooks, produtoHook)
		produtoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		produtoBeforeInsertMu.Lock()
		produtoBeforeInsertHooks = append(produtoBeforeInsertHooks, produtoHook)
		produtoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		produtoAfterInsertMu.Lock()
		produtoAfterInsertHooks = append(produtoAfterInsertHooks, produtoHook)
		produtoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		produtoBeforeUpdateMu.Lock()
		produtoBeforeUpdateHooks = append(produtoBeforeUpdateHooks, produtoHook)
		produtoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		produtoAfterUpdateMu.Lock()
		produtoAfterUpdateHooks = append(produtoAfterUpdateHooks, produtoHook)
		produtoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		produtoBeforeDeleteMu.Lock()
		produtoBeforeDeleteHooks = append(produtoBeforeDeleteHooks, produtoHook)
		produtoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		produtoAfterDeleteMu.Lock()
		produtoAfterDeleteHooks = append(produtoAfterDeleteHooks, produtoHook)
		produtoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		produtoBeforeUpsertMu.Lock()
		produtoBeforeUpsertHooks = append(produtoBeforeUpsertHooks, produtoHook)
		produtoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		produtoAfterUpsertMu.Lock()
		produtoAfterUpsertHooks = append(produtoAfterUpsertHooks, produtoHook)
		produtoAfterUpsertMu.Unlock()
	}
}

// One returns a single produto record from the query.
func (q produtoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Produto, error) {
	o := &Produto{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for produtos")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Produto records from the query.
func (q produtoQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProdutoSlice, error) {
	var o []*Produto

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to Produto slice")
	}

	if len(produtoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Produto records in the query.
func (q produtoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count produtos rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q produtoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if produtos exists")
	}

	return count > 0, nil
}

// IDCategorium pointed to by the foreign key.
func (o *Produto) IDCategorium(mods ...qm.QueryMod) categoriaQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDCategoria),
	}

	queryMods = append(queryMods, mods...)

	return Categorias(queryMods...)
}

// IDProdutoProdutoPrecos retrieves all the produto_preco's ProdutoPrecos with an executor via id_produto column.
func (o *Produto) IDProdutoProdutoPrecos(mods ...qm.QueryMod) produtoPrecoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"produto_precos\".\"id_produto\"=?", o.ID),
	)

	return ProdutoPrecos(queryMods...)
}

// LoadIDCategorium allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (produtoL) LoadIDCategorium(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduto interface{}, mods queries.Applicator) error {
	var slice []*Produto
	var object *Produto

	if singular {
		var ok bool
		object, ok = maybeProduto.(*Produto)
		if !ok {
			object = new(Produto)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProduto)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProduto))
			}
		}
	} else {
		s, ok := maybeProduto.(*[]*Produto)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProduto)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProduto))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &produtoR{}
		}
		args[object.IDCategoria] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &produtoR{}
			}

			args[obj.IDCategoria] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categorias`),
		qm.WhereIn(`categorias.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Categoria")
	}

	var resultSlice []*Categoria
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Categoria")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categorias")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categorias")
	}

	if len(categoriaAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDCategorium = foreign
		if foreign.R == nil {
			foreign.R = &categoriaR{}
		}
		foreign.R.IDCategoriumProdutos = append(foreign.R.IDCategoriumProdutos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDCategoria == foreign.ID {
				local.R.IDCategorium = foreign
				if foreign.R == nil {
					foreign.R = &categoriaR{}
				}
				foreign.R.IDCategoriumProdutos = append(foreign.R.IDCategoriumProdutos, local)
				break
			}
		}
	}

	return nil
}

// LoadIDProdutoProdutoPrecos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (produtoL) LoadIDProdutoProdutoPrecos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduto interface{}, mods queries.Applicator) error {
	var slice []*Produto
	var object *Produto

	if singular {
		var ok bool
		object, ok = maybeProduto.(*Produto)
		if !ok {
			object = new(Produto)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProduto)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProduto))
			}
		}
	} else {
		s, ok := maybeProduto.(*[]*Produto)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProduto)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProduto))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &produtoR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &produtoR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`produto_precos`),
		qm.WhereIn(`produto_precos.id_produto in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load produto_precos")
	}

	var resultSlice []*ProdutoPreco
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice produto_precos")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on produto_precos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for produto_precos")
	}

	if len(produtoPrecoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDProdutoProdutoPrecos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &produtoPrecoR{}
			}
			foreign.R.IDProdutoProduto = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDProduto {
				local.R.IDProdutoProdutoPrecos = append(local.R.IDProdutoProdutoPrecos, foreign)
				if foreign.R == nil {
					foreign.R = &produtoPrecoR{}
				}
				foreign.R.IDProdutoProduto = local
				break
			}
		}
	}

	return nil
}

// SetIDCategorium of the produto to the related item.
// Sets o.R.IDCategorium to related.
// Adds o to related.R.IDCategoriumProdutos.
func (o *Produto) SetIDCategorium(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Categoria) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"produtos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_categoria"}),
		strmangle.WhereClause("\"", "\"", 2, produtoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDCategoria = related.ID
	if o.R == nil {
		o.R = &produtoR{
			IDCategorium: related,
		}
	} else {
		o.R.IDCategorium = related
	}

	if related.R == nil {
		related.R = &categoriaR{
			IDCategoriumProdutos: ProdutoSlice{o},
		}
	} else {
		related.R.IDCategoriumProdutos = append(related.R.IDCategoriumProdutos, o)
	}

	return nil
}

// AddIDProdutoProdutoPrecos adds the given related objects to the existing relationships
// of the produto, optionally inserting them as new records.
// Appends related to o.R.IDProdutoProdutoPrecos.
// Sets related.R.IDProdutoProduto appropriately.
func (o *Produto) AddIDProdutoProdutoPrecos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProdutoPreco) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDProduto = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"produto_precos\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_produto"}),
				strmangle.WhereClause("\"", "\"", 2, produtoPrecoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDProduto = o.ID
		}
	}

	if o.R == nil {
		o.R = &produtoR{
			IDProdutoProdutoPrecos: related,
		}
	} else {
		o.R.IDProdutoProdutoPrecos = append(o.R.IDProdutoProdutoPrecos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &produtoPrecoR{
				IDProdutoProduto: o,
			}
		} else {
			rel.R.IDProdutoProduto = o
		}
	}
	return nil
}

// Produtos retrieves all the records using an executor.
func Produtos(mods ...qm.QueryMod) produtoQuery {
	mods = append(mods, qm.From("\"produtos\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"produtos\".*"})
	}

	return produtoQuery{q}
}

// FindProduto retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProduto(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Produto, error) {
	produtoObj := &Produto{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"produtos\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, produtoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from produtos")
	}

	if err = produtoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return produtoObj, err
	}

	return produtoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Produto) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no produtos provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(produtoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	produtoInsertCacheMut.RLock()
	cache, cached := produtoInsertCache[key]
	produtoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			produtoAllColumns,
			produtoColumnsWithDefault,
			produtoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(produtoType, produtoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(produtoType, produtoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"produtos\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"produtos\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into produtos")
	}

	if !cached {
		produtoInsertCacheMut.Lock()
		produtoInsertCache[key] = cache
		produtoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Produto.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Produto) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	produtoUpdateCacheMut.RLock()
	cache, cached := produtoUpdateCache[key]
	produtoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			produtoAllColumns,
			produtoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update produtos, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"produtos\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, produtoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(produtoType, produtoMapping, append(wl, produtoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update produtos row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for produtos")
	}

	if !cached {
		produtoUpdateCacheMut.Lock()
		produtoUpdateCache[key] = cache
		produtoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q produtoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for produtos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for produtos")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProdutoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), produtoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"produtos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, produtoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in produto slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all produto")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Produto) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no produtos provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(produtoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	produtoUpsertCacheMut.RLock()
	cache, cached := produtoUpsertCache[key]
	produtoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			produtoAllColumns,
			produtoColumnsWithDefault,
			produtoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			produtoAllColumns,
			produtoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert produtos, could not build update column list")
		}

		ret := strmangle.SetComplement(produtoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(produtoPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert produtos, could not build conflict column list")
			}

			conflict = make([]string, len(produtoPrimaryKeyColumns))
			copy(conflict, produtoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"produtos\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(produtoType, produtoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(produtoType, produtoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert produtos")
	}

	if !cached {
		produtoUpsertCacheMut.Lock()
		produtoUpsertCache[key] = cache
		produtoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Produto record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Produto) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no Produto provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), produtoPrimaryKeyMapping)
	sql := "DELETE FROM \"produtos\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from produtos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for produtos")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q produtoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no produtoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from produtos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for produtos")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProdutoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(produtoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), produtoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"produtos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, produtoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from produto slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for produtos")
	}

	if len(produtoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Produto) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProduto(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProdutoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProdutoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), produtoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"produtos\".* FROM \"produtos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, produtoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in ProdutoSlice")
	}

	*o = slice

	return nil
}

// ProdutoExists checks if the Produto row exists.
func ProdutoExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"produtos\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if produtos exists")
	}

	return exists, nil
}

// Exists checks if the Produto row exists.
func (o *Produto) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProdutoExists(ctx, exec, o.ID)
}
