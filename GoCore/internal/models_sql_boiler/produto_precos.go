// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// ProdutoPreco is an object representing the database table.
type ProdutoPreco struct {
	// Identificador único UUID para a entrada de preço.
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`
	// Identificador sequencial único para a entrada de preço (para facilitar CRUD e referência legada se necessário).
	SeqID int64 `boil:"seq_id" json:"seq_id" toml:"seq_id" yaml:"seq_id"`
	// Referência ao produto ao qual este preço pertence (FK para public.produtos.id).
	IDProduto string `boil:"id_produto" json:"id_produto" toml:"id_produto" yaml:"id_produto"`
	// Referência à opção da categoria que define esta variação de preço (FK para public.categoria_opcoes.id). Ex: "Pequeno", "Médio".
	IDCategoriaOpcao string `boil:"id_categoria_opcao" json:"id_categoria_opcao" toml:"id_categoria_opcao" yaml:"id_categoria_opcao"`
	// Código externo para esta variação de preço específica (ex: "PEQUENO_COPO_ACAI"). Mapeia para o campo "codigo" dentro do array "opcoes" no JSON do produto.
	CodigoExternoOpcaoPreco null.String `boil:"codigo_externo_opcao_preco" json:"codigo_externo_opcao_preco,omitempty" toml:"codigo_externo_opcao_preco" yaml:"codigo_externo_opcao_preco,omitempty"`
	// O preço regular desta opção do produto.
	PrecoBase types.Decimal `boil:"preco_base" json:"preco_base" toml:"preco_base" yaml:"preco_base"`
	// O preço promocional desta opção do produto, se aplicável. Corresponde a "valor2" ou "valorAtual" no JSON.
	PrecoPromocional types.NullDecimal `boil:"preco_promocional" json:"preco_promocional,omitempty" toml:"preco_promocional" yaml:"preco_promocional,omitempty"`
	// Status desta opção de preço (1 = disponível, 0 = indisponível). Corresponde ao campo "status" dentro do array "opcoes" no JSON do produto.
	Disponivel int16 `boil:"disponivel" json:"disponivel" toml:"disponivel" yaml:"disponivel"`
	// Timestamp da criação do registro de preço.
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// Timestamp da última atualização do registro de preço.
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	// Timestamp da exclusão lógica do preço (soft delete).
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *produtoPrecoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L produtoPrecoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProdutoPrecoColumns = struct {
	ID                      string
	SeqID                   string
	IDProduto               string
	IDCategoriaOpcao        string
	CodigoExternoOpcaoPreco string
	PrecoBase               string
	PrecoPromocional        string
	Disponivel              string
	CreatedAt               string
	UpdatedAt               string
	DeletedAt               string
}{
	ID:                      "id",
	SeqID:                   "seq_id",
	IDProduto:               "id_produto",
	IDCategoriaOpcao:        "id_categoria_opcao",
	CodigoExternoOpcaoPreco: "codigo_externo_opcao_preco",
	PrecoBase:               "preco_base",
	PrecoPromocional:        "preco_promocional",
	Disponivel:              "disponivel",
	CreatedAt:               "created_at",
	UpdatedAt:               "updated_at",
	DeletedAt:               "deleted_at",
}

var ProdutoPrecoTableColumns = struct {
	ID                      string
	SeqID                   string
	IDProduto               string
	IDCategoriaOpcao        string
	CodigoExternoOpcaoPreco string
	PrecoBase               string
	PrecoPromocional        string
	Disponivel              string
	CreatedAt               string
	UpdatedAt               string
	DeletedAt               string
}{
	ID:                      "produto_precos.id",
	SeqID:                   "produto_precos.seq_id",
	IDProduto:               "produto_precos.id_produto",
	IDCategoriaOpcao:        "produto_precos.id_categoria_opcao",
	CodigoExternoOpcaoPreco: "produto_precos.codigo_externo_opcao_preco",
	PrecoBase:               "produto_precos.preco_base",
	PrecoPromocional:        "produto_precos.preco_promocional",
	Disponivel:              "produto_precos.disponivel",
	CreatedAt:               "produto_precos.created_at",
	UpdatedAt:               "produto_precos.updated_at",
	DeletedAt:               "produto_precos.deleted_at",
}

// Generated where

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var ProdutoPrecoWhere = struct {
	ID                      whereHelperstring
	SeqID                   whereHelperint64
	IDProduto               whereHelperstring
	IDCategoriaOpcao        whereHelperstring
	CodigoExternoOpcaoPreco whereHelpernull_String
	PrecoBase               whereHelpertypes_Decimal
	PrecoPromocional        whereHelpertypes_NullDecimal
	Disponivel              whereHelperint16
	CreatedAt               whereHelpertime_Time
	UpdatedAt               whereHelpertime_Time
	DeletedAt               whereHelpernull_Time
}{
	ID:                      whereHelperstring{field: "\"produto_precos\".\"id\""},
	SeqID:                   whereHelperint64{field: "\"produto_precos\".\"seq_id\""},
	IDProduto:               whereHelperstring{field: "\"produto_precos\".\"id_produto\""},
	IDCategoriaOpcao:        whereHelperstring{field: "\"produto_precos\".\"id_categoria_opcao\""},
	CodigoExternoOpcaoPreco: whereHelpernull_String{field: "\"produto_precos\".\"codigo_externo_opcao_preco\""},
	PrecoBase:               whereHelpertypes_Decimal{field: "\"produto_precos\".\"preco_base\""},
	PrecoPromocional:        whereHelpertypes_NullDecimal{field: "\"produto_precos\".\"preco_promocional\""},
	Disponivel:              whereHelperint16{field: "\"produto_precos\".\"disponivel\""},
	CreatedAt:               whereHelpertime_Time{field: "\"produto_precos\".\"created_at\""},
	UpdatedAt:               whereHelpertime_Time{field: "\"produto_precos\".\"updated_at\""},
	DeletedAt:               whereHelpernull_Time{field: "\"produto_precos\".\"deleted_at\""},
}

// ProdutoPrecoRels is where relationship names are stored.
var ProdutoPrecoRels = struct {
	IDCategoriaOpcaoCategoriaOpco string
	IDProdutoProduto              string
}{
	IDCategoriaOpcaoCategoriaOpco: "IDCategoriaOpcaoCategoriaOpco",
	IDProdutoProduto:              "IDProdutoProduto",
}

// produtoPrecoR is where relationships are stored.
type produtoPrecoR struct {
	IDCategoriaOpcaoCategoriaOpco *CategoriaOpcao `boil:"IDCategoriaOpcaoCategoriaOpco" json:"IDCategoriaOpcaoCategoriaOpco" toml:"IDCategoriaOpcaoCategoriaOpco" yaml:"IDCategoriaOpcaoCategoriaOpco"`
	IDProdutoProduto              *Produto        `boil:"IDProdutoProduto" json:"IDProdutoProduto" toml:"IDProdutoProduto" yaml:"IDProdutoProduto"`
}

// NewStruct creates a new relationship struct
func (*produtoPrecoR) NewStruct() *produtoPrecoR {
	return &produtoPrecoR{}
}

func (r *produtoPrecoR) GetIDCategoriaOpcaoCategoriaOpco() *CategoriaOpcao {
	if r == nil {
		return nil
	}
	return r.IDCategoriaOpcaoCategoriaOpco
}

func (r *produtoPrecoR) GetIDProdutoProduto() *Produto {
	if r == nil {
		return nil
	}
	return r.IDProdutoProduto
}

// produtoPrecoL is where Load methods for each relationship are stored.
type produtoPrecoL struct{}

var (
	produtoPrecoAllColumns            = []string{"id", "seq_id", "id_produto", "id_categoria_opcao", "codigo_externo_opcao_preco", "preco_base", "preco_promocional", "disponivel", "created_at", "updated_at", "deleted_at"}
	produtoPrecoColumnsWithoutDefault = []string{"id_produto", "id_categoria_opcao", "preco_base"}
	produtoPrecoColumnsWithDefault    = []string{"id", "seq_id", "codigo_externo_opcao_preco", "preco_promocional", "disponivel", "created_at", "updated_at", "deleted_at"}
	produtoPrecoPrimaryKeyColumns     = []string{"id"}
	produtoPrecoGeneratedColumns      = []string{}
)

type (
	// ProdutoPrecoSlice is an alias for a slice of pointers to ProdutoPreco.
	// This should almost always be used instead of []ProdutoPreco.
	ProdutoPrecoSlice []*ProdutoPreco
	// ProdutoPrecoHook is the signature for custom ProdutoPreco hook methods
	ProdutoPrecoHook func(context.Context, boil.ContextExecutor, *ProdutoPreco) error

	produtoPrecoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	produtoPrecoType                 = reflect.TypeOf(&ProdutoPreco{})
	produtoPrecoMapping              = queries.MakeStructMapping(produtoPrecoType)
	produtoPrecoPrimaryKeyMapping, _ = queries.BindMapping(produtoPrecoType, produtoPrecoMapping, produtoPrecoPrimaryKeyColumns)
	produtoPrecoInsertCacheMut       sync.RWMutex
	produtoPrecoInsertCache          = make(map[string]insertCache)
	produtoPrecoUpdateCacheMut       sync.RWMutex
	produtoPrecoUpdateCache          = make(map[string]updateCache)
	produtoPrecoUpsertCacheMut       sync.RWMutex
	produtoPrecoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var produtoPrecoAfterSelectMu sync.Mutex
var produtoPrecoAfterSelectHooks []ProdutoPrecoHook

var produtoPrecoBeforeInsertMu sync.Mutex
var produtoPrecoBeforeInsertHooks []ProdutoPrecoHook
var produtoPrecoAfterInsertMu sync.Mutex
var produtoPrecoAfterInsertHooks []ProdutoPrecoHook

var produtoPrecoBeforeUpdateMu sync.Mutex
var produtoPrecoBeforeUpdateHooks []ProdutoPrecoHook
var produtoPrecoAfterUpdateMu sync.Mutex
var produtoPrecoAfterUpdateHooks []ProdutoPrecoHook

var produtoPrecoBeforeDeleteMu sync.Mutex
var produtoPrecoBeforeDeleteHooks []ProdutoPrecoHook
var produtoPrecoAfterDeleteMu sync.Mutex
var produtoPrecoAfterDeleteHooks []ProdutoPrecoHook

var produtoPrecoBeforeUpsertMu sync.Mutex
var produtoPrecoBeforeUpsertHooks []ProdutoPrecoHook
var produtoPrecoAfterUpsertMu sync.Mutex
var produtoPrecoAfterUpsertHooks []ProdutoPrecoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProdutoPreco) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range produtoPrecoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProdutoPreco) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range produtoPrecoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProdutoPreco) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range produtoPrecoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProdutoPreco) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range produtoPrecoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProdutoPreco) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range produtoPrecoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProdutoPreco) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range produtoPrecoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProdutoPreco) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range produtoPrecoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProdutoPreco) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range produtoPrecoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProdutoPreco) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range produtoPrecoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProdutoPrecoHook registers your hook function for all future operations.
func AddProdutoPrecoHook(hookPoint boil.HookPoint, produtoPrecoHook ProdutoPrecoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		produtoPrecoAfterSelectMu.Lock()
		produtoPrecoAfterSelectHooks = append(produtoPrecoAfterSelectHooks, produtoPrecoHook)
		produtoPrecoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		produtoPrecoBeforeInsertMu.Lock()
		produtoPrecoBeforeInsertHooks = append(produtoPrecoBeforeInsertHooks, produtoPrecoHook)
		produtoPrecoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		produtoPrecoAfterInsertMu.Lock()
		produtoPrecoAfterInsertHooks = append(produtoPrecoAfterInsertHooks, produtoPrecoHook)
		produtoPrecoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		produtoPrecoBeforeUpdateMu.Lock()
		produtoPrecoBeforeUpdateHooks = append(produtoPrecoBeforeUpdateHooks, produtoPrecoHook)
		produtoPrecoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		produtoPrecoAfterUpdateMu.Lock()
		produtoPrecoAfterUpdateHooks = append(produtoPrecoAfterUpdateHooks, produtoPrecoHook)
		produtoPrecoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		produtoPrecoBeforeDeleteMu.Lock()
		produtoPrecoBeforeDeleteHooks = append(produtoPrecoBeforeDeleteHooks, produtoPrecoHook)
		produtoPrecoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		produtoPrecoAfterDeleteMu.Lock()
		produtoPrecoAfterDeleteHooks = append(produtoPrecoAfterDeleteHooks, produtoPrecoHook)
		produtoPrecoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		produtoPrecoBeforeUpsertMu.Lock()
		produtoPrecoBeforeUpsertHooks = append(produtoPrecoBeforeUpsertHooks, produtoPrecoHook)
		produtoPrecoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		produtoPrecoAfterUpsertMu.Lock()
		produtoPrecoAfterUpsertHooks = append(produtoPrecoAfterUpsertHooks, produtoPrecoHook)
		produtoPrecoAfterUpsertMu.Unlock()
	}
}

// One returns a single produtoPreco record from the query.
func (q produtoPrecoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProdutoPreco, error) {
	o := &ProdutoPreco{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for produto_precos")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProdutoPreco records from the query.
func (q produtoPrecoQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProdutoPrecoSlice, error) {
	var o []*ProdutoPreco

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to ProdutoPreco slice")
	}

	if len(produtoPrecoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProdutoPreco records in the query.
func (q produtoPrecoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count produto_precos rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q produtoPrecoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if produto_precos exists")
	}

	return count > 0, nil
}

// IDCategoriaOpcaoCategoriaOpco pointed to by the foreign key.
func (o *ProdutoPreco) IDCategoriaOpcaoCategoriaOpco(mods ...qm.QueryMod) categoriaOpcaoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDCategoriaOpcao),
	}

	queryMods = append(queryMods, mods...)

	return CategoriaOpcoes(queryMods...)
}

// IDProdutoProduto pointed to by the foreign key.
func (o *ProdutoPreco) IDProdutoProduto(mods ...qm.QueryMod) produtoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDProduto),
	}

	queryMods = append(queryMods, mods...)

	return Produtos(queryMods...)
}

// LoadIDCategoriaOpcaoCategoriaOpco allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (produtoPrecoL) LoadIDCategoriaOpcaoCategoriaOpco(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProdutoPreco interface{}, mods queries.Applicator) error {
	var slice []*ProdutoPreco
	var object *ProdutoPreco

	if singular {
		var ok bool
		object, ok = maybeProdutoPreco.(*ProdutoPreco)
		if !ok {
			object = new(ProdutoPreco)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProdutoPreco)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProdutoPreco))
			}
		}
	} else {
		s, ok := maybeProdutoPreco.(*[]*ProdutoPreco)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProdutoPreco)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProdutoPreco))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &produtoPrecoR{}
		}
		args[object.IDCategoriaOpcao] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &produtoPrecoR{}
			}

			args[obj.IDCategoriaOpcao] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categoria_opcoes`),
		qm.WhereIn(`categoria_opcoes.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CategoriaOpcao")
	}

	var resultSlice []*CategoriaOpcao
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CategoriaOpcao")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categoria_opcoes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categoria_opcoes")
	}

	if len(categoriaOpcaoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDCategoriaOpcaoCategoriaOpco = foreign
		if foreign.R == nil {
			foreign.R = &categoriaOpcaoR{}
		}
		foreign.R.IDCategoriaOpcaoProdutoPrecos = append(foreign.R.IDCategoriaOpcaoProdutoPrecos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDCategoriaOpcao == foreign.ID {
				local.R.IDCategoriaOpcaoCategoriaOpco = foreign
				if foreign.R == nil {
					foreign.R = &categoriaOpcaoR{}
				}
				foreign.R.IDCategoriaOpcaoProdutoPrecos = append(foreign.R.IDCategoriaOpcaoProdutoPrecos, local)
				break
			}
		}
	}

	return nil
}

// LoadIDProdutoProduto allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (produtoPrecoL) LoadIDProdutoProduto(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProdutoPreco interface{}, mods queries.Applicator) error {
	var slice []*ProdutoPreco
	var object *ProdutoPreco

	if singular {
		var ok bool
		object, ok = maybeProdutoPreco.(*ProdutoPreco)
		if !ok {
			object = new(ProdutoPreco)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProdutoPreco)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProdutoPreco))
			}
		}
	} else {
		s, ok := maybeProdutoPreco.(*[]*ProdutoPreco)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProdutoPreco)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProdutoPreco))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &produtoPrecoR{}
		}
		args[object.IDProduto] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &produtoPrecoR{}
			}

			args[obj.IDProduto] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`produtos`),
		qm.WhereIn(`produtos.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Produto")
	}

	var resultSlice []*Produto
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Produto")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for produtos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for produtos")
	}

	if len(produtoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDProdutoProduto = foreign
		if foreign.R == nil {
			foreign.R = &produtoR{}
		}
		foreign.R.IDProdutoProdutoPrecos = append(foreign.R.IDProdutoProdutoPrecos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDProduto == foreign.ID {
				local.R.IDProdutoProduto = foreign
				if foreign.R == nil {
					foreign.R = &produtoR{}
				}
				foreign.R.IDProdutoProdutoPrecos = append(foreign.R.IDProdutoProdutoPrecos, local)
				break
			}
		}
	}

	return nil
}

// SetIDCategoriaOpcaoCategoriaOpco of the produtoPreco to the related item.
// Sets o.R.IDCategoriaOpcaoCategoriaOpco to related.
// Adds o to related.R.IDCategoriaOpcaoProdutoPrecos.
func (o *ProdutoPreco) SetIDCategoriaOpcaoCategoriaOpco(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CategoriaOpcao) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"produto_precos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_categoria_opcao"}),
		strmangle.WhereClause("\"", "\"", 2, produtoPrecoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDCategoriaOpcao = related.ID
	if o.R == nil {
		o.R = &produtoPrecoR{
			IDCategoriaOpcaoCategoriaOpco: related,
		}
	} else {
		o.R.IDCategoriaOpcaoCategoriaOpco = related
	}

	if related.R == nil {
		related.R = &categoriaOpcaoR{
			IDCategoriaOpcaoProdutoPrecos: ProdutoPrecoSlice{o},
		}
	} else {
		related.R.IDCategoriaOpcaoProdutoPrecos = append(related.R.IDCategoriaOpcaoProdutoPrecos, o)
	}

	return nil
}

// SetIDProdutoProduto of the produtoPreco to the related item.
// Sets o.R.IDProdutoProduto to related.
// Adds o to related.R.IDProdutoProdutoPrecos.
func (o *ProdutoPreco) SetIDProdutoProduto(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Produto) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"produto_precos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_produto"}),
		strmangle.WhereClause("\"", "\"", 2, produtoPrecoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDProduto = related.ID
	if o.R == nil {
		o.R = &produtoPrecoR{
			IDProdutoProduto: related,
		}
	} else {
		o.R.IDProdutoProduto = related
	}

	if related.R == nil {
		related.R = &produtoR{
			IDProdutoProdutoPrecos: ProdutoPrecoSlice{o},
		}
	} else {
		related.R.IDProdutoProdutoPrecos = append(related.R.IDProdutoProdutoPrecos, o)
	}

	return nil
}

// ProdutoPrecos retrieves all the records using an executor.
func ProdutoPrecos(mods ...qm.QueryMod) produtoPrecoQuery {
	mods = append(mods, qm.From("\"produto_precos\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"produto_precos\".*"})
	}

	return produtoPrecoQuery{q}
}

// FindProdutoPreco retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProdutoPreco(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ProdutoPreco, error) {
	produtoPrecoObj := &ProdutoPreco{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"produto_precos\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, produtoPrecoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from produto_precos")
	}

	if err = produtoPrecoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return produtoPrecoObj, err
	}

	return produtoPrecoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProdutoPreco) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no produto_precos provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(produtoPrecoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	produtoPrecoInsertCacheMut.RLock()
	cache, cached := produtoPrecoInsertCache[key]
	produtoPrecoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			produtoPrecoAllColumns,
			produtoPrecoColumnsWithDefault,
			produtoPrecoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(produtoPrecoType, produtoPrecoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(produtoPrecoType, produtoPrecoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"produto_precos\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"produto_precos\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into produto_precos")
	}

	if !cached {
		produtoPrecoInsertCacheMut.Lock()
		produtoPrecoInsertCache[key] = cache
		produtoPrecoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProdutoPreco.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProdutoPreco) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	produtoPrecoUpdateCacheMut.RLock()
	cache, cached := produtoPrecoUpdateCache[key]
	produtoPrecoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			produtoPrecoAllColumns,
			produtoPrecoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update produto_precos, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"produto_precos\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, produtoPrecoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(produtoPrecoType, produtoPrecoMapping, append(wl, produtoPrecoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update produto_precos row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for produto_precos")
	}

	if !cached {
		produtoPrecoUpdateCacheMut.Lock()
		produtoPrecoUpdateCache[key] = cache
		produtoPrecoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q produtoPrecoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for produto_precos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for produto_precos")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProdutoPrecoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), produtoPrecoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"produto_precos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, produtoPrecoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in produtoPreco slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all produtoPreco")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProdutoPreco) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no produto_precos provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(produtoPrecoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	produtoPrecoUpsertCacheMut.RLock()
	cache, cached := produtoPrecoUpsertCache[key]
	produtoPrecoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			produtoPrecoAllColumns,
			produtoPrecoColumnsWithDefault,
			produtoPrecoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			produtoPrecoAllColumns,
			produtoPrecoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert produto_precos, could not build update column list")
		}

		ret := strmangle.SetComplement(produtoPrecoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(produtoPrecoPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert produto_precos, could not build conflict column list")
			}

			conflict = make([]string, len(produtoPrecoPrimaryKeyColumns))
			copy(conflict, produtoPrecoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"produto_precos\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(produtoPrecoType, produtoPrecoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(produtoPrecoType, produtoPrecoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert produto_precos")
	}

	if !cached {
		produtoPrecoUpsertCacheMut.Lock()
		produtoPrecoUpsertCache[key] = cache
		produtoPrecoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProdutoPreco record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProdutoPreco) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no ProdutoPreco provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), produtoPrecoPrimaryKeyMapping)
	sql := "DELETE FROM \"produto_precos\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from produto_precos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for produto_precos")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q produtoPrecoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no produtoPrecoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from produto_precos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for produto_precos")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProdutoPrecoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(produtoPrecoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), produtoPrecoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"produto_precos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, produtoPrecoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from produtoPreco slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for produto_precos")
	}

	if len(produtoPrecoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProdutoPreco) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProdutoPreco(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProdutoPrecoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProdutoPrecoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), produtoPrecoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"produto_precos\".* FROM \"produto_precos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, produtoPrecoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in ProdutoPrecoSlice")
	}

	*o = slice

	return nil
}

// ProdutoPrecoExists checks if the ProdutoPreco row exists.
func ProdutoPrecoExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"produto_precos\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if produto_precos exists")
	}

	return exists, nil
}

// Exists checks if the ProdutoPreco row exists.
func (o *ProdutoPreco) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProdutoPrecoExists(ctx, exec, o.ID)
}
