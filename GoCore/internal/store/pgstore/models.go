// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package pgstore

import (
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// Armazena as categorias de produtos do cardápio de um tenant
type Categoria struct {
	// Identificador único UUID da categoria
	ID uuid.UUID `json:"id"`
	// Identificador sequencial para facilitar CRUD
	SeqID pgtype.Int8 `json:"seq_id"`
	// ID do tenant ao qual a categoria pertence
	IDTenant uuid.UUID `json:"id_tenant"`
	// Referência ao tipo de culinária da categoria
	IDCulinaria int32 `json:"id_culinaria"`
	// Nome da categoria exibido no cardápio
	Nome string `json:"nome"`
	// Descrição da categoria
	Descricao pgtype.Text `json:"descricao"`
	// Horário de início da disponibilidade da categoria
	Inicio pgtype.Timestamp `json:"inicio"`
	// Horário de fim da disponibilidade da categoria
	Fim pgtype.Timestamp `json:"fim"`
	// Status da categoria (1=ativo, 0=inativo)
	Ativo int16 `json:"ativo"`
	// Opção para meio a meio (M=Valor médio, V=Maior valor, vazio=Não permitido)
	OpcaoMeia pgtype.Text `json:"opcao_meia"`
	// Ordem de exibição da categoria no cardápio
	Ordem             pgtype.Int4        `json:"ordem"`
	DisponivelDomingo int16              `json:"disponivel_domingo"`
	DisponivelSegunda int16              `json:"disponivel_segunda"`
	DisponivelTerca   int16              `json:"disponivel_terca"`
	DisponivelQuarta  int16              `json:"disponivel_quarta"`
	DisponivelQuinta  int16              `json:"disponivel_quinta"`
	DisponivelSexta   int16              `json:"disponivel_sexta"`
	DisponivelSabado  int16              `json:"disponivel_sabado"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
	// Data e hora de exclusão lógica (soft delete)
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

// Tipos de adicionais disponíveis em cada categoria do cardápio
type CategoriaAdicionai struct {
	ID uuid.UUID `json:"id"`
	// Identificador sequencial para facilitar CRUD
	SeqID       int64       `json:"seq_id"`
	IDCategoria uuid.UUID   `json:"id_categoria"`
	CodigoTipo  pgtype.Text `json:"codigo_tipo"`
	Nome        string      `json:"nome"`
	// U = Único (obrigatório escolher 1) | M = Múltiplo | Q = Quantidade múltipla
	Selecao string      `json:"selecao"`
	Minimo  pgtype.Int4 `json:"minimo"`
	Limite  pgtype.Int4 `json:"limite"`
	// 1 = ativo | 0 = inativo
	Status    int16              `json:"status"`
	CreatedAt time.Time          `json:"created_at"`
	UpdatedAt time.Time          `json:"updated_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type CategoriaAdicionaisView struct {
	ID          uuid.UUID          `json:"id"`
	SeqID       int64              `json:"seq_id"`
	IDCategoria uuid.UUID          `json:"id_categoria"`
	CodigoTipo  pgtype.Text        `json:"codigo_tipo"`
	Nome        string             `json:"nome"`
	Selecao     string             `json:"selecao"`
	Minimo      pgtype.Int4        `json:"minimo"`
	Limite      pgtype.Int4        `json:"limite"`
	Status      int16              `json:"status"`
	CreatedAt   time.Time          `json:"created_at"`
	UpdatedAt   time.Time          `json:"updated_at"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
}

// Cada linha representa uma opção (ex.: “Cheddar”, “Bacon”) de um tipo de adicional
type CategoriaAdicionalOpco struct {
	ID uuid.UUID `json:"id"`
	// Identificador sequencial para facilitar CRUD
	SeqID                int64              `json:"seq_id"`
	IDCategoriaAdicional uuid.UUID          `json:"id_categoria_adicional"`
	Codigo               pgtype.Text        `json:"codigo"`
	Nome                 string             `json:"nome"`
	Valor                pgtype.Numeric     `json:"valor"`
	Status               int16              `json:"status"`
	CreatedAt            time.Time          `json:"created_at"`
	UpdatedAt            time.Time          `json:"updated_at"`
	DeletedAt            pgtype.Timestamptz `json:"deleted_at"`
}

type CategoriaAdicionalOpcoesView struct {
	ID                   uuid.UUID          `json:"id"`
	SeqID                int64              `json:"seq_id"`
	IDCategoriaAdicional uuid.UUID          `json:"id_categoria_adicional"`
	Codigo               pgtype.Text        `json:"codigo"`
	Nome                 string             `json:"nome"`
	Valor                pgtype.Numeric     `json:"valor"`
	Status               int16              `json:"status"`
	CreatedAt            time.Time          `json:"created_at"`
	UpdatedAt            time.Time          `json:"updated_at"`
	DeletedAt            pgtype.Timestamptz `json:"deleted_at"`
}

// Armazena as opções disponíveis para cada categoria (ex: tamanhos)
type CategoriaOpco struct {
	// Identificador único UUID da opção
	ID uuid.UUID `json:"id"`
	// Identificador sequencial para facilitar CRUD
	SeqID pgtype.Int8 `json:"seq_id"`
	// ID da categoria a qual esta opção pertence
	IDCategoria uuid.UUID `json:"id_categoria"`
	// Nome da opção (ex: Pequeno, Médio, Grande)
	Nome string `json:"nome"`
	// Status da opção (1=ativo, 0=inativo)
	Status    int16              `json:"status"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	// Data e hora de exclusão lógica (soft delete)
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type CategoriaOpcoesView struct {
	ID          uuid.UUID          `json:"id"`
	SeqID       pgtype.Int8        `json:"seq_id"`
	IDCategoria uuid.UUID          `json:"id_categoria"`
	Nome        string             `json:"nome"`
	Status      int16              `json:"status"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
}

type CategoriasView struct {
	ID                uuid.UUID          `json:"id"`
	SeqID             pgtype.Int8        `json:"seq_id"`
	IDTenant          uuid.UUID          `json:"id_tenant"`
	IDCulinaria       int32              `json:"id_culinaria"`
	Nome              string             `json:"nome"`
	Descricao         pgtype.Text        `json:"descricao"`
	Inicio            pgtype.Timestamp   `json:"inicio"`
	Fim               pgtype.Timestamp   `json:"fim"`
	Ativo             int16              `json:"ativo"`
	OpcaoMeia         pgtype.Text        `json:"opcao_meia"`
	Ordem             pgtype.Int4        `json:"ordem"`
	DisponivelDomingo int16              `json:"disponivel_domingo"`
	DisponivelSegunda int16              `json:"disponivel_segunda"`
	DisponivelTerca   int16              `json:"disponivel_terca"`
	DisponivelQuarta  int16              `json:"disponivel_quarta"`
	DisponivelQuinta  int16              `json:"disponivel_quinta"`
	DisponivelSexta   int16              `json:"disponivel_sexta"`
	DisponivelSabado  int16              `json:"disponivel_sabado"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
	DeletedAt         pgtype.Timestamptz `json:"deleted_at"`
}

type Cliente struct {
	ID              uuid.UUID   `json:"id"`
	TenantID        uuid.UUID   `json:"tenant_id"`
	TipoPessoa      string      `json:"tipo_pessoa"`
	NomeRazaoSocial string      `json:"nome_razao_social"`
	NomeFantasia    pgtype.Text `json:"nome_fantasia"`
	Cpf             pgtype.Text `json:"cpf"`
	Cnpj            pgtype.Text `json:"cnpj"`
	Rg              pgtype.Text `json:"rg"`
	Ie              pgtype.Text `json:"ie"`
	Im              pgtype.Text `json:"im"`
	DataNascimento  pgtype.Date `json:"data_nascimento"`
	Email           pgtype.Text `json:"email"`
	Telefone        pgtype.Text `json:"telefone"`
	Celular         pgtype.Text `json:"celular"`
	Cep             pgtype.Text `json:"cep"`
	Logradouro      pgtype.Text `json:"logradouro"`
	Numero          pgtype.Text `json:"numero"`
	Complemento     pgtype.Text `json:"complemento"`
	Bairro          pgtype.Text `json:"bairro"`
	Cidade          pgtype.Text `json:"cidade"`
	Uf              pgtype.Text `json:"uf"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
}

type Culinaria struct {
	IDCulinaria int32  `json:"id_culinaria"`
	Nome        string `json:"nome"`
	MeioMeio    int16  `json:"meio_meio"`
}

type Product struct {
	ID          uuid.UUID `json:"id"`
	SellerID    uuid.UUID `json:"seller_id"`
	ProductName string    `json:"product_name"`
	Description string    `json:"description"`
	Baseprice   float64   `json:"baseprice"`
	AuctionEnd  time.Time `json:"auction_end"`
	IsSold      bool      `json:"is_sold"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	TenantID    uuid.UUID `json:"tenant_id"`
}

// Armazena os produtos do cardápio, vinculados a uma categoria.
type Produto struct {
	// Identificador único UUID do produto.
	ID uuid.UUID `json:"id"`
	// Identificador sequencial único do produto (para facilitar CRUD e referência legada se necessário).
	SeqID pgtype.Int8 `json:"seq_id"`
	// Referência à categoria à qual o produto pertence (FK para public.categorias.id).
	IDCategoria uuid.UUID `json:"id_categoria"`
	// Nome do produto exibido no cardápio.
	Nome string `json:"nome"`
	// Descrição detalhada do produto.
	Descricao pgtype.Text `json:"descricao"`
	// Código externo do produto, utilizado para identificação em integrações ou sistemas legados.
	CodigoExterno pgtype.Text `json:"codigo_externo"`
	// SKU (Stock Keeping Unit) do produto, para controle de inventário se aplicável.
	Sku pgtype.Text `json:"sku"`
	// Indica se o cliente pode adicionar observações a este produto no pedido (TRUE/FALSE).
	PermiteObservacao pgtype.Bool `json:"permite_observacao"`
	// Define a ordem de exibição deste produto dentro de sua categoria no cardápio.
	Ordem pgtype.Int4 `json:"ordem"`
	// URL da imagem principal associada ao produto.
	ImagemUrl pgtype.Text `json:"imagem_url"`
	// Status do produto (1 = ativo, 0 = inativo).
	Status int16 `json:"status"`
	// Timestamp da criação do registro do produto.
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	// Timestamp da última atualização do registro do produto.
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	// Timestamp da exclusão lógica do produto (soft delete).
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

// Armazena as variações de preço para cada produto, baseadas nas opções de categoria.
type ProdutoPreco struct {
	// Identificador único UUID para a entrada de preço.
	ID uuid.UUID `json:"id"`
	// Identificador sequencial único para a entrada de preço (para facilitar CRUD e referência legada se necessário).
	SeqID pgtype.Int8 `json:"seq_id"`
	// Referência ao produto ao qual este preço pertence (FK para public.produtos.id).
	IDProduto uuid.UUID `json:"id_produto"`
	// Referência à opção da categoria que define esta variação de preço (FK para public.categoria_opcoes.id). Ex: "Pequeno", "Médio".
	IDCategoriaOpcao uuid.UUID `json:"id_categoria_opcao"`
	// Código externo para esta variação de preço específica (ex: "PEQUENO_COPO_ACAI"). Mapeia para o campo "codigo" dentro do array "opcoes" no JSON do produto.
	CodigoExternoOpcaoPreco pgtype.Text `json:"codigo_externo_opcao_preco"`
	// O preço regular desta opção do produto.
	PrecoBase pgtype.Numeric `json:"preco_base"`
	// O preço promocional desta opção do produto, se aplicável. Corresponde a "valor2" ou "valorAtual" no JSON.
	PrecoPromocional pgtype.Numeric `json:"preco_promocional"`
	// Status desta opção de preço (1 = disponível, 0 = indisponível). Corresponde ao campo "status" dentro do array "opcoes" no JSON do produto.
	Disponivel int16 `json:"disponivel"`
	// Timestamp da criação do registro de preço.
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	// Timestamp da última atualização do registro de preço.
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	// Timestamp da exclusão lógica do preço (soft delete).
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

type Session struct {
	Token  string    `json:"token"`
	Data   []byte    `json:"data"`
	Expiry time.Time `json:"expiry"`
}

type Tenant struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Plan      string    `json:"plan"`
	Status    string    `json:"status"`
	CreatedAt time.Time `json:"created_at"`
}

type User struct {
	ID                  uuid.UUID   `json:"id"`
	UserName            string      `json:"user_name"`
	Email               string      `json:"email"`
	PasswordHash        []byte      `json:"password_hash"`
	Bio                 string      `json:"bio"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
	TenantID            uuid.UUID   `json:"tenant_id"`
	Admin               int32       `json:"admin"`
	PermissionUsers     int32       `json:"permission_users"`
	PermissionCategoria pgtype.Int4 `json:"permission_categoria"`
	PermissionProduto   pgtype.Int4 `json:"permission_produto"`
	PermissionAdicional pgtype.Int4 `json:"permission_adicional"`
}
