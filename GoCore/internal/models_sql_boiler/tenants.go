// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Tenant is an object representing the database table.
type Tenant struct {
	ID              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name            string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Plan            string      `boil:"plan" json:"plan" toml:"plan" yaml:"plan"`
	Status          string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	IDClientePadrao null.String `boil:"id_cliente_padrao" json:"id_cliente_padrao,omitempty" toml:"id_cliente_padrao" yaml:"id_cliente_padrao,omitempty"`

	R *tenantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tenantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TenantColumns = struct {
	ID              string
	Name            string
	Plan            string
	Status          string
	CreatedAt       string
	IDClientePadrao string
}{
	ID:              "id",
	Name:            "name",
	Plan:            "plan",
	Status:          "status",
	CreatedAt:       "created_at",
	IDClientePadrao: "id_cliente_padrao",
}

var TenantTableColumns = struct {
	ID              string
	Name            string
	Plan            string
	Status          string
	CreatedAt       string
	IDClientePadrao string
}{
	ID:              "tenants.id",
	Name:            "tenants.name",
	Plan:            "tenants.plan",
	Status:          "tenants.status",
	CreatedAt:       "tenants.created_at",
	IDClientePadrao: "tenants.id_cliente_padrao",
}

// Generated where

var TenantWhere = struct {
	ID              whereHelperstring
	Name            whereHelperstring
	Plan            whereHelperstring
	Status          whereHelperstring
	CreatedAt       whereHelpertime_Time
	IDClientePadrao whereHelpernull_String
}{
	ID:              whereHelperstring{field: "\"tenants\".\"id\""},
	Name:            whereHelperstring{field: "\"tenants\".\"name\""},
	Plan:            whereHelperstring{field: "\"tenants\".\"plan\""},
	Status:          whereHelperstring{field: "\"tenants\".\"status\""},
	CreatedAt:       whereHelpertime_Time{field: "\"tenants\".\"created_at\""},
	IDClientePadrao: whereHelpernull_String{field: "\"tenants\".\"id_cliente_padrao\""},
}

// TenantRels is where relationship names are stored.
var TenantRels = struct {
	IDClientePadraoCliente string
	Categorias             string
	Clientes               string
	Pedidos                string
	Products               string
	Users                  string
}{
	IDClientePadraoCliente: "IDClientePadraoCliente",
	Categorias:             "Categorias",
	Clientes:               "Clientes",
	Pedidos:                "Pedidos",
	Products:               "Products",
	Users:                  "Users",
}

// tenantR is where relationships are stored.
type tenantR struct {
	IDClientePadraoCliente *Cliente       `boil:"IDClientePadraoCliente" json:"IDClientePadraoCliente" toml:"IDClientePadraoCliente" yaml:"IDClientePadraoCliente"`
	Categorias             CategoriaSlice `boil:"Categorias" json:"Categorias" toml:"Categorias" yaml:"Categorias"`
	Clientes               ClienteSlice   `boil:"Clientes" json:"Clientes" toml:"Clientes" yaml:"Clientes"`
	Pedidos                PedidoSlice    `boil:"Pedidos" json:"Pedidos" toml:"Pedidos" yaml:"Pedidos"`
	Products               ProductSlice   `boil:"Products" json:"Products" toml:"Products" yaml:"Products"`
	Users                  UserSlice      `boil:"Users" json:"Users" toml:"Users" yaml:"Users"`
}

// NewStruct creates a new relationship struct
func (*tenantR) NewStruct() *tenantR {
	return &tenantR{}
}

func (r *tenantR) GetIDClientePadraoCliente() *Cliente {
	if r == nil {
		return nil
	}
	return r.IDClientePadraoCliente
}

func (r *tenantR) GetCategorias() CategoriaSlice {
	if r == nil {
		return nil
	}
	return r.Categorias
}

func (r *tenantR) GetClientes() ClienteSlice {
	if r == nil {
		return nil
	}
	return r.Clientes
}

func (r *tenantR) GetPedidos() PedidoSlice {
	if r == nil {
		return nil
	}
	return r.Pedidos
}

func (r *tenantR) GetProducts() ProductSlice {
	if r == nil {
		return nil
	}
	return r.Products
}

func (r *tenantR) GetUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.Users
}

// tenantL is where Load methods for each relationship are stored.
type tenantL struct{}

var (
	tenantAllColumns            = []string{"id", "name", "plan", "status", "created_at", "id_cliente_padrao"}
	tenantColumnsWithoutDefault = []string{"name", "plan", "status"}
	tenantColumnsWithDefault    = []string{"id", "created_at", "id_cliente_padrao"}
	tenantPrimaryKeyColumns     = []string{"id"}
	tenantGeneratedColumns      = []string{}
)

type (
	// TenantSlice is an alias for a slice of pointers to Tenant.
	// This should almost always be used instead of []Tenant.
	TenantSlice []*Tenant
	// TenantHook is the signature for custom Tenant hook methods
	TenantHook func(context.Context, boil.ContextExecutor, *Tenant) error

	tenantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tenantType                 = reflect.TypeOf(&Tenant{})
	tenantMapping              = queries.MakeStructMapping(tenantType)
	tenantPrimaryKeyMapping, _ = queries.BindMapping(tenantType, tenantMapping, tenantPrimaryKeyColumns)
	tenantInsertCacheMut       sync.RWMutex
	tenantInsertCache          = make(map[string]insertCache)
	tenantUpdateCacheMut       sync.RWMutex
	tenantUpdateCache          = make(map[string]updateCache)
	tenantUpsertCacheMut       sync.RWMutex
	tenantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tenantAfterSelectMu sync.Mutex
var tenantAfterSelectHooks []TenantHook

var tenantBeforeInsertMu sync.Mutex
var tenantBeforeInsertHooks []TenantHook
var tenantAfterInsertMu sync.Mutex
var tenantAfterInsertHooks []TenantHook

var tenantBeforeUpdateMu sync.Mutex
var tenantBeforeUpdateHooks []TenantHook
var tenantAfterUpdateMu sync.Mutex
var tenantAfterUpdateHooks []TenantHook

var tenantBeforeDeleteMu sync.Mutex
var tenantBeforeDeleteHooks []TenantHook
var tenantAfterDeleteMu sync.Mutex
var tenantAfterDeleteHooks []TenantHook

var tenantBeforeUpsertMu sync.Mutex
var tenantBeforeUpsertHooks []TenantHook
var tenantAfterUpsertMu sync.Mutex
var tenantAfterUpsertHooks []TenantHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tenant) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tenant) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tenant) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tenant) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tenant) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tenant) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tenant) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tenant) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tenant) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tenantAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTenantHook registers your hook function for all future operations.
func AddTenantHook(hookPoint boil.HookPoint, tenantHook TenantHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tenantAfterSelectMu.Lock()
		tenantAfterSelectHooks = append(tenantAfterSelectHooks, tenantHook)
		tenantAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tenantBeforeInsertMu.Lock()
		tenantBeforeInsertHooks = append(tenantBeforeInsertHooks, tenantHook)
		tenantBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tenantAfterInsertMu.Lock()
		tenantAfterInsertHooks = append(tenantAfterInsertHooks, tenantHook)
		tenantAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tenantBeforeUpdateMu.Lock()
		tenantBeforeUpdateHooks = append(tenantBeforeUpdateHooks, tenantHook)
		tenantBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tenantAfterUpdateMu.Lock()
		tenantAfterUpdateHooks = append(tenantAfterUpdateHooks, tenantHook)
		tenantAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tenantBeforeDeleteMu.Lock()
		tenantBeforeDeleteHooks = append(tenantBeforeDeleteHooks, tenantHook)
		tenantBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tenantAfterDeleteMu.Lock()
		tenantAfterDeleteHooks = append(tenantAfterDeleteHooks, tenantHook)
		tenantAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tenantBeforeUpsertMu.Lock()
		tenantBeforeUpsertHooks = append(tenantBeforeUpsertHooks, tenantHook)
		tenantBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tenantAfterUpsertMu.Lock()
		tenantAfterUpsertHooks = append(tenantAfterUpsertHooks, tenantHook)
		tenantAfterUpsertMu.Unlock()
	}
}

// One returns a single tenant record from the query.
func (q tenantQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Tenant, error) {
	o := &Tenant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for tenants")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Tenant records from the query.
func (q tenantQuery) All(ctx context.Context, exec boil.ContextExecutor) (TenantSlice, error) {
	var o []*Tenant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to Tenant slice")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Tenant records in the query.
func (q tenantQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count tenants rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tenantQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if tenants exists")
	}

	return count > 0, nil
}

// IDClientePadraoCliente pointed to by the foreign key.
func (o *Tenant) IDClientePadraoCliente(mods ...qm.QueryMod) clienteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDClientePadrao),
	}

	queryMods = append(queryMods, mods...)

	return Clientes(queryMods...)
}

// Categorias retrieves all the categorias's Categorias with an executor.
func (o *Tenant) Categorias(mods ...qm.QueryMod) categoriaQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"categorias\".\"id_tenant\"=?", o.ID),
	)

	return Categorias(queryMods...)
}

// Clientes retrieves all the cliente's Clientes with an executor.
func (o *Tenant) Clientes(mods ...qm.QueryMod) clienteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"clientes\".\"tenant_id\"=?", o.ID),
	)

	return Clientes(queryMods...)
}

// Pedidos retrieves all the pedido's Pedidos with an executor.
func (o *Tenant) Pedidos(mods ...qm.QueryMod) pedidoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"pedidos\".\"tenant_id\"=?", o.ID),
	)

	return Pedidos(queryMods...)
}

// Products retrieves all the product's Products with an executor.
func (o *Tenant) Products(mods ...qm.QueryMod) productQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"products\".\"tenant_id\"=?", o.ID),
	)

	return Products(queryMods...)
}

// Users retrieves all the user's Users with an executor.
func (o *Tenant) Users(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"users\".\"tenant_id\"=?", o.ID),
	)

	return Users(queryMods...)
}

// LoadIDClientePadraoCliente allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tenantL) LoadIDClientePadraoCliente(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTenant interface{}, mods queries.Applicator) error {
	var slice []*Tenant
	var object *Tenant

	if singular {
		var ok bool
		object, ok = maybeTenant.(*Tenant)
		if !ok {
			object = new(Tenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenant))
			}
		}
	} else {
		s, ok := maybeTenant.(*[]*Tenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		if !queries.IsNil(object.IDClientePadrao) {
			args[object.IDClientePadrao] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}

			if !queries.IsNil(obj.IDClientePadrao) {
				args[obj.IDClientePadrao] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`clientes`),
		qm.WhereIn(`clientes.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Cliente")
	}

	var resultSlice []*Cliente
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Cliente")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for clientes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for clientes")
	}

	if len(clienteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDClientePadraoCliente = foreign
		if foreign.R == nil {
			foreign.R = &clienteR{}
		}
		foreign.R.IDClientePadraoTenants = append(foreign.R.IDClientePadraoTenants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IDClientePadrao, foreign.ID) {
				local.R.IDClientePadraoCliente = foreign
				if foreign.R == nil {
					foreign.R = &clienteR{}
				}
				foreign.R.IDClientePadraoTenants = append(foreign.R.IDClientePadraoTenants, local)
				break
			}
		}
	}

	return nil
}

// LoadCategorias allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tenantL) LoadCategorias(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTenant interface{}, mods queries.Applicator) error {
	var slice []*Tenant
	var object *Tenant

	if singular {
		var ok bool
		object, ok = maybeTenant.(*Tenant)
		if !ok {
			object = new(Tenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenant))
			}
		}
	} else {
		s, ok := maybeTenant.(*[]*Tenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categorias`),
		qm.WhereIn(`categorias.id_tenant in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load categorias")
	}

	var resultSlice []*Categoria
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice categorias")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on categorias")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categorias")
	}

	if len(categoriaAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Categorias = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &categoriaR{}
			}
			foreign.R.Tenant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDTenant {
				local.R.Categorias = append(local.R.Categorias, foreign)
				if foreign.R == nil {
					foreign.R = &categoriaR{}
				}
				foreign.R.Tenant = local
				break
			}
		}
	}

	return nil
}

// LoadClientes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tenantL) LoadClientes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTenant interface{}, mods queries.Applicator) error {
	var slice []*Tenant
	var object *Tenant

	if singular {
		var ok bool
		object, ok = maybeTenant.(*Tenant)
		if !ok {
			object = new(Tenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenant))
			}
		}
	} else {
		s, ok := maybeTenant.(*[]*Tenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`clientes`),
		qm.WhereIn(`clientes.tenant_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load clientes")
	}

	var resultSlice []*Cliente
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice clientes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on clientes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for clientes")
	}

	if len(clienteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Clientes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &clienteR{}
			}
			foreign.R.Tenant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TenantID {
				local.R.Clientes = append(local.R.Clientes, foreign)
				if foreign.R == nil {
					foreign.R = &clienteR{}
				}
				foreign.R.Tenant = local
				break
			}
		}
	}

	return nil
}

// LoadPedidos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tenantL) LoadPedidos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTenant interface{}, mods queries.Applicator) error {
	var slice []*Tenant
	var object *Tenant

	if singular {
		var ok bool
		object, ok = maybeTenant.(*Tenant)
		if !ok {
			object = new(Tenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenant))
			}
		}
	} else {
		s, ok := maybeTenant.(*[]*Tenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`pedidos`),
		qm.WhereIn(`pedidos.tenant_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pedidos")
	}

	var resultSlice []*Pedido
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pedidos")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pedidos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pedidos")
	}

	if len(pedidoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Pedidos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pedidoR{}
			}
			foreign.R.Tenant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TenantID {
				local.R.Pedidos = append(local.R.Pedidos, foreign)
				if foreign.R == nil {
					foreign.R = &pedidoR{}
				}
				foreign.R.Tenant = local
				break
			}
		}
	}

	return nil
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tenantL) LoadProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTenant interface{}, mods queries.Applicator) error {
	var slice []*Tenant
	var object *Tenant

	if singular {
		var ok bool
		object, ok = maybeTenant.(*Tenant)
		if !ok {
			object = new(Tenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenant))
			}
		}
	} else {
		s, ok := maybeTenant.(*[]*Tenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.tenant_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load products")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Products = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productR{}
			}
			foreign.R.Tenant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TenantID {
				local.R.Products = append(local.R.Products, foreign)
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.Tenant = local
				break
			}
		}
	}

	return nil
}

// LoadUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tenantL) LoadUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTenant interface{}, mods queries.Applicator) error {
	var slice []*Tenant
	var object *Tenant

	if singular {
		var ok bool
		object, ok = maybeTenant.(*Tenant)
		if !ok {
			object = new(Tenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTenant))
			}
		}
	} else {
		s, ok := maybeTenant.(*[]*Tenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTenant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tenantR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tenantR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.tenant_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Users = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.Tenant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TenantID {
				local.R.Users = append(local.R.Users, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Tenant = local
				break
			}
		}
	}

	return nil
}

// SetIDClientePadraoCliente of the tenant to the related item.
// Sets o.R.IDClientePadraoCliente to related.
// Adds o to related.R.IDClientePadraoTenants.
func (o *Tenant) SetIDClientePadraoCliente(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Cliente) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tenants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_cliente_padrao"}),
		strmangle.WhereClause("\"", "\"", 2, tenantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IDClientePadrao, related.ID)
	if o.R == nil {
		o.R = &tenantR{
			IDClientePadraoCliente: related,
		}
	} else {
		o.R.IDClientePadraoCliente = related
	}

	if related.R == nil {
		related.R = &clienteR{
			IDClientePadraoTenants: TenantSlice{o},
		}
	} else {
		related.R.IDClientePadraoTenants = append(related.R.IDClientePadraoTenants, o)
	}

	return nil
}

// RemoveIDClientePadraoCliente relationship.
// Sets o.R.IDClientePadraoCliente to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Tenant) RemoveIDClientePadraoCliente(ctx context.Context, exec boil.ContextExecutor, related *Cliente) error {
	var err error

	queries.SetScanner(&o.IDClientePadrao, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("id_cliente_padrao")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IDClientePadraoCliente = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IDClientePadraoTenants {
		if queries.Equal(o.IDClientePadrao, ri.IDClientePadrao) {
			continue
		}

		ln := len(related.R.IDClientePadraoTenants)
		if ln > 1 && i < ln-1 {
			related.R.IDClientePadraoTenants[i] = related.R.IDClientePadraoTenants[ln-1]
		}
		related.R.IDClientePadraoTenants = related.R.IDClientePadraoTenants[:ln-1]
		break
	}
	return nil
}

// AddCategorias adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Categorias.
// Sets related.R.Tenant appropriately.
func (o *Tenant) AddCategorias(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Categoria) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDTenant = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"categorias\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_tenant"}),
				strmangle.WhereClause("\"", "\"", 2, categoriaPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDTenant = o.ID
		}
	}

	if o.R == nil {
		o.R = &tenantR{
			Categorias: related,
		}
	} else {
		o.R.Categorias = append(o.R.Categorias, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &categoriaR{
				Tenant: o,
			}
		} else {
			rel.R.Tenant = o
		}
	}
	return nil
}

// AddClientes adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Clientes.
// Sets related.R.Tenant appropriately.
func (o *Tenant) AddClientes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Cliente) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TenantID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"clientes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
				strmangle.WhereClause("\"", "\"", 2, clientePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TenantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tenantR{
			Clientes: related,
		}
	} else {
		o.R.Clientes = append(o.R.Clientes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &clienteR{
				Tenant: o,
			}
		} else {
			rel.R.Tenant = o
		}
	}
	return nil
}

// AddPedidos adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Pedidos.
// Sets related.R.Tenant appropriately.
func (o *Tenant) AddPedidos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Pedido) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TenantID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"pedidos\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
				strmangle.WhereClause("\"", "\"", 2, pedidoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TenantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tenantR{
			Pedidos: related,
		}
	} else {
		o.R.Pedidos = append(o.R.Pedidos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pedidoR{
				Tenant: o,
			}
		} else {
			rel.R.Tenant = o
		}
	}
	return nil
}

// AddProducts adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Tenant appropriately.
func (o *Tenant) AddProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TenantID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
				strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TenantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tenantR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				Tenant: o,
			}
		} else {
			rel.R.Tenant = o
		}
	}
	return nil
}

// AddUsers adds the given related objects to the existing relationships
// of the tenant, optionally inserting them as new records.
// Appends related to o.R.Users.
// Sets related.R.Tenant appropriately.
func (o *Tenant) AddUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TenantID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TenantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tenantR{
			Users: related,
		}
	} else {
		o.R.Users = append(o.R.Users, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				Tenant: o,
			}
		} else {
			rel.R.Tenant = o
		}
	}
	return nil
}

// Tenants retrieves all the records using an executor.
func Tenants(mods ...qm.QueryMod) tenantQuery {
	mods = append(mods, qm.From("\"tenants\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tenants\".*"})
	}

	return tenantQuery{q}
}

// FindTenant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTenant(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Tenant, error) {
	tenantObj := &Tenant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tenants\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tenantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from tenants")
	}

	if err = tenantObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tenantObj, err
	}

	return tenantObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Tenant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no tenants provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tenantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tenantInsertCacheMut.RLock()
	cache, cached := tenantInsertCache[key]
	tenantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tenantAllColumns,
			tenantColumnsWithDefault,
			tenantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tenantType, tenantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tenantType, tenantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tenants\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tenants\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into tenants")
	}

	if !cached {
		tenantInsertCacheMut.Lock()
		tenantInsertCache[key] = cache
		tenantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Tenant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Tenant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tenantUpdateCacheMut.RLock()
	cache, cached := tenantUpdateCache[key]
	tenantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tenantAllColumns,
			tenantPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update tenants, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tenants\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tenantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tenantType, tenantMapping, append(wl, tenantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update tenants row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for tenants")
	}

	if !cached {
		tenantUpdateCacheMut.Lock()
		tenantUpdateCache[key] = cache
		tenantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tenantQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for tenants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for tenants")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TenantSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tenants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tenantPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in tenant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all tenant")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Tenant) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no tenants provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tenantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tenantUpsertCacheMut.RLock()
	cache, cached := tenantUpsertCache[key]
	tenantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			tenantAllColumns,
			tenantColumnsWithDefault,
			tenantColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tenantAllColumns,
			tenantPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert tenants, could not build update column list")
		}

		ret := strmangle.SetComplement(tenantAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(tenantPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert tenants, could not build conflict column list")
			}

			conflict = make([]string, len(tenantPrimaryKeyColumns))
			copy(conflict, tenantPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tenants\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(tenantType, tenantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tenantType, tenantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert tenants")
	}

	if !cached {
		tenantUpsertCacheMut.Lock()
		tenantUpsertCache[key] = cache
		tenantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Tenant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tenant) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no Tenant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tenantPrimaryKeyMapping)
	sql := "DELETE FROM \"tenants\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from tenants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for tenants")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tenantQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no tenantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from tenants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for tenants")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TenantSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tenantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tenants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tenantPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from tenant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for tenants")
	}

	if len(tenantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tenant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTenant(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TenantSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TenantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tenantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tenants\".* FROM \"tenants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tenantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in TenantSlice")
	}

	*o = slice

	return nil
}

// TenantExists checks if the Tenant row exists.
func TenantExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tenants\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if tenants exists")
	}

	return exists, nil
}

// Exists checks if the Tenant row exists.
func (o *Tenant) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TenantExists(ctx, exec, o.ID)
}
