// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// PedidoItem is an object representing the database table.
type PedidoItem struct {
	ID               string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	SeqID            int64         `boil:"seq_id" json:"seq_id" toml:"seq_id" yaml:"seq_id"`
	IDPedido         string        `boil:"id_pedido" json:"id_pedido" toml:"id_pedido" yaml:"id_pedido"`
	IDProduto        string        `boil:"id_produto" json:"id_produto" toml:"id_produto" yaml:"id_produto"`
	IDProduto2       null.String   `boil:"id_produto_2" json:"id_produto_2,omitempty" toml:"id_produto_2" yaml:"id_produto_2,omitempty"`
	IDCategoria      string        `boil:"id_categoria" json:"id_categoria" toml:"id_categoria" yaml:"id_categoria"`
	IDCategoriaOpcao null.String   `boil:"id_categoria_opcao" json:"id_categoria_opcao,omitempty" toml:"id_categoria_opcao" yaml:"id_categoria_opcao,omitempty"`
	Observacao       null.String   `boil:"observacao" json:"observacao,omitempty" toml:"observacao" yaml:"observacao,omitempty"`
	ValorUnitario    types.Decimal `boil:"valor_unitario" json:"valor_unitario" toml:"valor_unitario" yaml:"valor_unitario"`
	Quantidade       int           `boil:"quantidade" json:"quantidade" toml:"quantidade" yaml:"quantidade"`
	CreatedAt        time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt        null.Time     `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *pedidoItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pedidoItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PedidoItemColumns = struct {
	ID               string
	SeqID            string
	IDPedido         string
	IDProduto        string
	IDProduto2       string
	IDCategoria      string
	IDCategoriaOpcao string
	Observacao       string
	ValorUnitario    string
	Quantidade       string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "id",
	SeqID:            "seq_id",
	IDPedido:         "id_pedido",
	IDProduto:        "id_produto",
	IDProduto2:       "id_produto_2",
	IDCategoria:      "id_categoria",
	IDCategoriaOpcao: "id_categoria_opcao",
	Observacao:       "observacao",
	ValorUnitario:    "valor_unitario",
	Quantidade:       "quantidade",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	DeletedAt:        "deleted_at",
}

var PedidoItemTableColumns = struct {
	ID               string
	SeqID            string
	IDPedido         string
	IDProduto        string
	IDProduto2       string
	IDCategoria      string
	IDCategoriaOpcao string
	Observacao       string
	ValorUnitario    string
	Quantidade       string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "pedido_itens.id",
	SeqID:            "pedido_itens.seq_id",
	IDPedido:         "pedido_itens.id_pedido",
	IDProduto:        "pedido_itens.id_produto",
	IDProduto2:       "pedido_itens.id_produto_2",
	IDCategoria:      "pedido_itens.id_categoria",
	IDCategoriaOpcao: "pedido_itens.id_categoria_opcao",
	Observacao:       "pedido_itens.observacao",
	ValorUnitario:    "pedido_itens.valor_unitario",
	Quantidade:       "pedido_itens.quantidade",
	CreatedAt:        "pedido_itens.created_at",
	UpdatedAt:        "pedido_itens.updated_at",
	DeletedAt:        "pedido_itens.deleted_at",
}

// Generated where

var PedidoItemWhere = struct {
	ID               whereHelperstring
	SeqID            whereHelperint64
	IDPedido         whereHelperstring
	IDProduto        whereHelperstring
	IDProduto2       whereHelpernull_String
	IDCategoria      whereHelperstring
	IDCategoriaOpcao whereHelpernull_String
	Observacao       whereHelpernull_String
	ValorUnitario    whereHelpertypes_Decimal
	Quantidade       whereHelperint
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	DeletedAt        whereHelpernull_Time
}{
	ID:               whereHelperstring{field: "\"pedido_itens\".\"id\""},
	SeqID:            whereHelperint64{field: "\"pedido_itens\".\"seq_id\""},
	IDPedido:         whereHelperstring{field: "\"pedido_itens\".\"id_pedido\""},
	IDProduto:        whereHelperstring{field: "\"pedido_itens\".\"id_produto\""},
	IDProduto2:       whereHelpernull_String{field: "\"pedido_itens\".\"id_produto_2\""},
	IDCategoria:      whereHelperstring{field: "\"pedido_itens\".\"id_categoria\""},
	IDCategoriaOpcao: whereHelpernull_String{field: "\"pedido_itens\".\"id_categoria_opcao\""},
	Observacao:       whereHelpernull_String{field: "\"pedido_itens\".\"observacao\""},
	ValorUnitario:    whereHelpertypes_Decimal{field: "\"pedido_itens\".\"valor_unitario\""},
	Quantidade:       whereHelperint{field: "\"pedido_itens\".\"quantidade\""},
	CreatedAt:        whereHelpertime_Time{field: "\"pedido_itens\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"pedido_itens\".\"updated_at\""},
	DeletedAt:        whereHelpernull_Time{field: "\"pedido_itens\".\"deleted_at\""},
}

// PedidoItemRels is where relationship names are stored.
var PedidoItemRels = struct {
	IDCategorium                     string
	IDCategoriaOpcaoCategoriaOpco    string
	IDPedidoPedido                   string
	IDProdutoProduto                 string
	IDProduto2Produto                string
	IDPedidoItemPedidoItemAdicionais string
}{
	IDCategorium:                     "IDCategorium",
	IDCategoriaOpcaoCategoriaOpco:    "IDCategoriaOpcaoCategoriaOpco",
	IDPedidoPedido:                   "IDPedidoPedido",
	IDProdutoProduto:                 "IDProdutoProduto",
	IDProduto2Produto:                "IDProduto2Produto",
	IDPedidoItemPedidoItemAdicionais: "IDPedidoItemPedidoItemAdicionais",
}

// pedidoItemR is where relationships are stored.
type pedidoItemR struct {
	IDCategorium                     *Categoria               `boil:"IDCategorium" json:"IDCategorium" toml:"IDCategorium" yaml:"IDCategorium"`
	IDCategoriaOpcaoCategoriaOpco    *CategoriaOpcao          `boil:"IDCategoriaOpcaoCategoriaOpco" json:"IDCategoriaOpcaoCategoriaOpco" toml:"IDCategoriaOpcaoCategoriaOpco" yaml:"IDCategoriaOpcaoCategoriaOpco"`
	IDPedidoPedido                   *Pedido                  `boil:"IDPedidoPedido" json:"IDPedidoPedido" toml:"IDPedidoPedido" yaml:"IDPedidoPedido"`
	IDProdutoProduto                 *Produto                 `boil:"IDProdutoProduto" json:"IDProdutoProduto" toml:"IDProdutoProduto" yaml:"IDProdutoProduto"`
	IDProduto2Produto                *Produto                 `boil:"IDProduto2Produto" json:"IDProduto2Produto" toml:"IDProduto2Produto" yaml:"IDProduto2Produto"`
	IDPedidoItemPedidoItemAdicionais PedidoItemAdicionalSlice `boil:"IDPedidoItemPedidoItemAdicionais" json:"IDPedidoItemPedidoItemAdicionais" toml:"IDPedidoItemPedidoItemAdicionais" yaml:"IDPedidoItemPedidoItemAdicionais"`
}

// NewStruct creates a new relationship struct
func (*pedidoItemR) NewStruct() *pedidoItemR {
	return &pedidoItemR{}
}

func (r *pedidoItemR) GetIDCategorium() *Categoria {
	if r == nil {
		return nil
	}
	return r.IDCategorium
}

func (r *pedidoItemR) GetIDCategoriaOpcaoCategoriaOpco() *CategoriaOpcao {
	if r == nil {
		return nil
	}
	return r.IDCategoriaOpcaoCategoriaOpco
}

func (r *pedidoItemR) GetIDPedidoPedido() *Pedido {
	if r == nil {
		return nil
	}
	return r.IDPedidoPedido
}

func (r *pedidoItemR) GetIDProdutoProduto() *Produto {
	if r == nil {
		return nil
	}
	return r.IDProdutoProduto
}

func (r *pedidoItemR) GetIDProduto2Produto() *Produto {
	if r == nil {
		return nil
	}
	return r.IDProduto2Produto
}

func (r *pedidoItemR) GetIDPedidoItemPedidoItemAdicionais() PedidoItemAdicionalSlice {
	if r == nil {
		return nil
	}
	return r.IDPedidoItemPedidoItemAdicionais
}

// pedidoItemL is where Load methods for each relationship are stored.
type pedidoItemL struct{}

var (
	pedidoItemAllColumns            = []string{"id", "seq_id", "id_pedido", "id_produto", "id_produto_2", "id_categoria", "id_categoria_opcao", "observacao", "valor_unitario", "quantidade", "created_at", "updated_at", "deleted_at"}
	pedidoItemColumnsWithoutDefault = []string{"id_pedido", "id_produto", "id_categoria", "valor_unitario", "quantidade"}
	pedidoItemColumnsWithDefault    = []string{"id", "seq_id", "id_produto_2", "id_categoria_opcao", "observacao", "created_at", "updated_at", "deleted_at"}
	pedidoItemPrimaryKeyColumns     = []string{"id"}
	pedidoItemGeneratedColumns      = []string{}
)

type (
	// PedidoItemSlice is an alias for a slice of pointers to PedidoItem.
	// This should almost always be used instead of []PedidoItem.
	PedidoItemSlice []*PedidoItem
	// PedidoItemHook is the signature for custom PedidoItem hook methods
	PedidoItemHook func(context.Context, boil.ContextExecutor, *PedidoItem) error

	pedidoItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pedidoItemType                 = reflect.TypeOf(&PedidoItem{})
	pedidoItemMapping              = queries.MakeStructMapping(pedidoItemType)
	pedidoItemPrimaryKeyMapping, _ = queries.BindMapping(pedidoItemType, pedidoItemMapping, pedidoItemPrimaryKeyColumns)
	pedidoItemInsertCacheMut       sync.RWMutex
	pedidoItemInsertCache          = make(map[string]insertCache)
	pedidoItemUpdateCacheMut       sync.RWMutex
	pedidoItemUpdateCache          = make(map[string]updateCache)
	pedidoItemUpsertCacheMut       sync.RWMutex
	pedidoItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pedidoItemAfterSelectMu sync.Mutex
var pedidoItemAfterSelectHooks []PedidoItemHook

var pedidoItemBeforeInsertMu sync.Mutex
var pedidoItemBeforeInsertHooks []PedidoItemHook
var pedidoItemAfterInsertMu sync.Mutex
var pedidoItemAfterInsertHooks []PedidoItemHook

var pedidoItemBeforeUpdateMu sync.Mutex
var pedidoItemBeforeUpdateHooks []PedidoItemHook
var pedidoItemAfterUpdateMu sync.Mutex
var pedidoItemAfterUpdateHooks []PedidoItemHook

var pedidoItemBeforeDeleteMu sync.Mutex
var pedidoItemBeforeDeleteHooks []PedidoItemHook
var pedidoItemAfterDeleteMu sync.Mutex
var pedidoItemAfterDeleteHooks []PedidoItemHook

var pedidoItemBeforeUpsertMu sync.Mutex
var pedidoItemBeforeUpsertHooks []PedidoItemHook
var pedidoItemAfterUpsertMu sync.Mutex
var pedidoItemAfterUpsertHooks []PedidoItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PedidoItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PedidoItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PedidoItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PedidoItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PedidoItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PedidoItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PedidoItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PedidoItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PedidoItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPedidoItemHook registers your hook function for all future operations.
func AddPedidoItemHook(hookPoint boil.HookPoint, pedidoItemHook PedidoItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		pedidoItemAfterSelectMu.Lock()
		pedidoItemAfterSelectHooks = append(pedidoItemAfterSelectHooks, pedidoItemHook)
		pedidoItemAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		pedidoItemBeforeInsertMu.Lock()
		pedidoItemBeforeInsertHooks = append(pedidoItemBeforeInsertHooks, pedidoItemHook)
		pedidoItemBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		pedidoItemAfterInsertMu.Lock()
		pedidoItemAfterInsertHooks = append(pedidoItemAfterInsertHooks, pedidoItemHook)
		pedidoItemAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		pedidoItemBeforeUpdateMu.Lock()
		pedidoItemBeforeUpdateHooks = append(pedidoItemBeforeUpdateHooks, pedidoItemHook)
		pedidoItemBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		pedidoItemAfterUpdateMu.Lock()
		pedidoItemAfterUpdateHooks = append(pedidoItemAfterUpdateHooks, pedidoItemHook)
		pedidoItemAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		pedidoItemBeforeDeleteMu.Lock()
		pedidoItemBeforeDeleteHooks = append(pedidoItemBeforeDeleteHooks, pedidoItemHook)
		pedidoItemBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		pedidoItemAfterDeleteMu.Lock()
		pedidoItemAfterDeleteHooks = append(pedidoItemAfterDeleteHooks, pedidoItemHook)
		pedidoItemAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		pedidoItemBeforeUpsertMu.Lock()
		pedidoItemBeforeUpsertHooks = append(pedidoItemBeforeUpsertHooks, pedidoItemHook)
		pedidoItemBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		pedidoItemAfterUpsertMu.Lock()
		pedidoItemAfterUpsertHooks = append(pedidoItemAfterUpsertHooks, pedidoItemHook)
		pedidoItemAfterUpsertMu.Unlock()
	}
}

// One returns a single pedidoItem record from the query.
func (q pedidoItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PedidoItem, error) {
	o := &PedidoItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for pedido_itens")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PedidoItem records from the query.
func (q pedidoItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (PedidoItemSlice, error) {
	var o []*PedidoItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to PedidoItem slice")
	}

	if len(pedidoItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PedidoItem records in the query.
func (q pedidoItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count pedido_itens rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pedidoItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if pedido_itens exists")
	}

	return count > 0, nil
}

// IDCategorium pointed to by the foreign key.
func (o *PedidoItem) IDCategorium(mods ...qm.QueryMod) categoriaQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDCategoria),
	}

	queryMods = append(queryMods, mods...)

	return Categorias(queryMods...)
}

// IDCategoriaOpcaoCategoriaOpco pointed to by the foreign key.
func (o *PedidoItem) IDCategoriaOpcaoCategoriaOpco(mods ...qm.QueryMod) categoriaOpcaoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDCategoriaOpcao),
	}

	queryMods = append(queryMods, mods...)

	return CategoriaOpcoes(queryMods...)
}

// IDPedidoPedido pointed to by the foreign key.
func (o *PedidoItem) IDPedidoPedido(mods ...qm.QueryMod) pedidoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDPedido),
	}

	queryMods = append(queryMods, mods...)

	return Pedidos(queryMods...)
}

// IDProdutoProduto pointed to by the foreign key.
func (o *PedidoItem) IDProdutoProduto(mods ...qm.QueryMod) produtoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDProduto),
	}

	queryMods = append(queryMods, mods...)

	return Produtos(queryMods...)
}

// IDProduto2Produto pointed to by the foreign key.
func (o *PedidoItem) IDProduto2Produto(mods ...qm.QueryMod) produtoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDProduto2),
	}

	queryMods = append(queryMods, mods...)

	return Produtos(queryMods...)
}

// IDPedidoItemPedidoItemAdicionais retrieves all the pedido_item_adicionais's PedidoItemAdicionais with an executor via id_pedido_item column.
func (o *PedidoItem) IDPedidoItemPedidoItemAdicionais(mods ...qm.QueryMod) pedidoItemAdicionalQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"pedido_item_adicionais\".\"id_pedido_item\"=?", o.ID),
	)

	return PedidoItemAdicionais(queryMods...)
}

// LoadIDCategorium allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pedidoItemL) LoadIDCategorium(ctx context.Context, e boil.ContextExecutor, singular bool, maybePedidoItem interface{}, mods queries.Applicator) error {
	var slice []*PedidoItem
	var object *PedidoItem

	if singular {
		var ok bool
		object, ok = maybePedidoItem.(*PedidoItem)
		if !ok {
			object = new(PedidoItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePedidoItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePedidoItem))
			}
		}
	} else {
		s, ok := maybePedidoItem.(*[]*PedidoItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePedidoItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePedidoItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pedidoItemR{}
		}
		args[object.IDCategoria] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pedidoItemR{}
			}

			args[obj.IDCategoria] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categorias`),
		qm.WhereIn(`categorias.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Categoria")
	}

	var resultSlice []*Categoria
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Categoria")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categorias")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categorias")
	}

	if len(categoriaAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDCategorium = foreign
		if foreign.R == nil {
			foreign.R = &categoriaR{}
		}
		foreign.R.IDCategoriumPedidoItens = append(foreign.R.IDCategoriumPedidoItens, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDCategoria == foreign.ID {
				local.R.IDCategorium = foreign
				if foreign.R == nil {
					foreign.R = &categoriaR{}
				}
				foreign.R.IDCategoriumPedidoItens = append(foreign.R.IDCategoriumPedidoItens, local)
				break
			}
		}
	}

	return nil
}

// LoadIDCategoriaOpcaoCategoriaOpco allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pedidoItemL) LoadIDCategoriaOpcaoCategoriaOpco(ctx context.Context, e boil.ContextExecutor, singular bool, maybePedidoItem interface{}, mods queries.Applicator) error {
	var slice []*PedidoItem
	var object *PedidoItem

	if singular {
		var ok bool
		object, ok = maybePedidoItem.(*PedidoItem)
		if !ok {
			object = new(PedidoItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePedidoItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePedidoItem))
			}
		}
	} else {
		s, ok := maybePedidoItem.(*[]*PedidoItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePedidoItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePedidoItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pedidoItemR{}
		}
		if !queries.IsNil(object.IDCategoriaOpcao) {
			args[object.IDCategoriaOpcao] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pedidoItemR{}
			}

			if !queries.IsNil(obj.IDCategoriaOpcao) {
				args[obj.IDCategoriaOpcao] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categoria_opcoes`),
		qm.WhereIn(`categoria_opcoes.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CategoriaOpcao")
	}

	var resultSlice []*CategoriaOpcao
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CategoriaOpcao")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categoria_opcoes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categoria_opcoes")
	}

	if len(categoriaOpcaoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDCategoriaOpcaoCategoriaOpco = foreign
		if foreign.R == nil {
			foreign.R = &categoriaOpcaoR{}
		}
		foreign.R.IDCategoriaOpcaoPedidoItens = append(foreign.R.IDCategoriaOpcaoPedidoItens, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IDCategoriaOpcao, foreign.ID) {
				local.R.IDCategoriaOpcaoCategoriaOpco = foreign
				if foreign.R == nil {
					foreign.R = &categoriaOpcaoR{}
				}
				foreign.R.IDCategoriaOpcaoPedidoItens = append(foreign.R.IDCategoriaOpcaoPedidoItens, local)
				break
			}
		}
	}

	return nil
}

// LoadIDPedidoPedido allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pedidoItemL) LoadIDPedidoPedido(ctx context.Context, e boil.ContextExecutor, singular bool, maybePedidoItem interface{}, mods queries.Applicator) error {
	var slice []*PedidoItem
	var object *PedidoItem

	if singular {
		var ok bool
		object, ok = maybePedidoItem.(*PedidoItem)
		if !ok {
			object = new(PedidoItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePedidoItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePedidoItem))
			}
		}
	} else {
		s, ok := maybePedidoItem.(*[]*PedidoItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePedidoItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePedidoItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pedidoItemR{}
		}
		args[object.IDPedido] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pedidoItemR{}
			}

			args[obj.IDPedido] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`pedidos`),
		qm.WhereIn(`pedidos.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pedido")
	}

	var resultSlice []*Pedido
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pedido")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pedidos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pedidos")
	}

	if len(pedidoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDPedidoPedido = foreign
		if foreign.R == nil {
			foreign.R = &pedidoR{}
		}
		foreign.R.IDPedidoPedidoItens = append(foreign.R.IDPedidoPedidoItens, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDPedido == foreign.ID {
				local.R.IDPedidoPedido = foreign
				if foreign.R == nil {
					foreign.R = &pedidoR{}
				}
				foreign.R.IDPedidoPedidoItens = append(foreign.R.IDPedidoPedidoItens, local)
				break
			}
		}
	}

	return nil
}

// LoadIDProdutoProduto allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pedidoItemL) LoadIDProdutoProduto(ctx context.Context, e boil.ContextExecutor, singular bool, maybePedidoItem interface{}, mods queries.Applicator) error {
	var slice []*PedidoItem
	var object *PedidoItem

	if singular {
		var ok bool
		object, ok = maybePedidoItem.(*PedidoItem)
		if !ok {
			object = new(PedidoItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePedidoItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePedidoItem))
			}
		}
	} else {
		s, ok := maybePedidoItem.(*[]*PedidoItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePedidoItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePedidoItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pedidoItemR{}
		}
		args[object.IDProduto] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pedidoItemR{}
			}

			args[obj.IDProduto] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`produtos`),
		qm.WhereIn(`produtos.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Produto")
	}

	var resultSlice []*Produto
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Produto")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for produtos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for produtos")
	}

	if len(produtoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDProdutoProduto = foreign
		if foreign.R == nil {
			foreign.R = &produtoR{}
		}
		foreign.R.IDProdutoPedidoItens = append(foreign.R.IDProdutoPedidoItens, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDProduto == foreign.ID {
				local.R.IDProdutoProduto = foreign
				if foreign.R == nil {
					foreign.R = &produtoR{}
				}
				foreign.R.IDProdutoPedidoItens = append(foreign.R.IDProdutoPedidoItens, local)
				break
			}
		}
	}

	return nil
}

// LoadIDProduto2Produto allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pedidoItemL) LoadIDProduto2Produto(ctx context.Context, e boil.ContextExecutor, singular bool, maybePedidoItem interface{}, mods queries.Applicator) error {
	var slice []*PedidoItem
	var object *PedidoItem

	if singular {
		var ok bool
		object, ok = maybePedidoItem.(*PedidoItem)
		if !ok {
			object = new(PedidoItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePedidoItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePedidoItem))
			}
		}
	} else {
		s, ok := maybePedidoItem.(*[]*PedidoItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePedidoItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePedidoItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pedidoItemR{}
		}
		if !queries.IsNil(object.IDProduto2) {
			args[object.IDProduto2] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pedidoItemR{}
			}

			if !queries.IsNil(obj.IDProduto2) {
				args[obj.IDProduto2] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`produtos`),
		qm.WhereIn(`produtos.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Produto")
	}

	var resultSlice []*Produto
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Produto")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for produtos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for produtos")
	}

	if len(produtoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDProduto2Produto = foreign
		if foreign.R == nil {
			foreign.R = &produtoR{}
		}
		foreign.R.IDProduto2PedidoItens = append(foreign.R.IDProduto2PedidoItens, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IDProduto2, foreign.ID) {
				local.R.IDProduto2Produto = foreign
				if foreign.R == nil {
					foreign.R = &produtoR{}
				}
				foreign.R.IDProduto2PedidoItens = append(foreign.R.IDProduto2PedidoItens, local)
				break
			}
		}
	}

	return nil
}

// LoadIDPedidoItemPedidoItemAdicionais allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pedidoItemL) LoadIDPedidoItemPedidoItemAdicionais(ctx context.Context, e boil.ContextExecutor, singular bool, maybePedidoItem interface{}, mods queries.Applicator) error {
	var slice []*PedidoItem
	var object *PedidoItem

	if singular {
		var ok bool
		object, ok = maybePedidoItem.(*PedidoItem)
		if !ok {
			object = new(PedidoItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePedidoItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePedidoItem))
			}
		}
	} else {
		s, ok := maybePedidoItem.(*[]*PedidoItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePedidoItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePedidoItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pedidoItemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pedidoItemR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`pedido_item_adicionais`),
		qm.WhereIn(`pedido_item_adicionais.id_pedido_item in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pedido_item_adicionais")
	}

	var resultSlice []*PedidoItemAdicional
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pedido_item_adicionais")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pedido_item_adicionais")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pedido_item_adicionais")
	}

	if len(pedidoItemAdicionalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDPedidoItemPedidoItemAdicionais = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pedidoItemAdicionalR{}
			}
			foreign.R.IDPedidoItemPedidoIten = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDPedidoItem {
				local.R.IDPedidoItemPedidoItemAdicionais = append(local.R.IDPedidoItemPedidoItemAdicionais, foreign)
				if foreign.R == nil {
					foreign.R = &pedidoItemAdicionalR{}
				}
				foreign.R.IDPedidoItemPedidoIten = local
				break
			}
		}
	}

	return nil
}

// SetIDCategorium of the pedidoItem to the related item.
// Sets o.R.IDCategorium to related.
// Adds o to related.R.IDCategoriumPedidoItens.
func (o *PedidoItem) SetIDCategorium(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Categoria) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pedido_itens\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_categoria"}),
		strmangle.WhereClause("\"", "\"", 2, pedidoItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDCategoria = related.ID
	if o.R == nil {
		o.R = &pedidoItemR{
			IDCategorium: related,
		}
	} else {
		o.R.IDCategorium = related
	}

	if related.R == nil {
		related.R = &categoriaR{
			IDCategoriumPedidoItens: PedidoItemSlice{o},
		}
	} else {
		related.R.IDCategoriumPedidoItens = append(related.R.IDCategoriumPedidoItens, o)
	}

	return nil
}

// SetIDCategoriaOpcaoCategoriaOpco of the pedidoItem to the related item.
// Sets o.R.IDCategoriaOpcaoCategoriaOpco to related.
// Adds o to related.R.IDCategoriaOpcaoPedidoItens.
func (o *PedidoItem) SetIDCategoriaOpcaoCategoriaOpco(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CategoriaOpcao) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pedido_itens\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_categoria_opcao"}),
		strmangle.WhereClause("\"", "\"", 2, pedidoItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IDCategoriaOpcao, related.ID)
	if o.R == nil {
		o.R = &pedidoItemR{
			IDCategoriaOpcaoCategoriaOpco: related,
		}
	} else {
		o.R.IDCategoriaOpcaoCategoriaOpco = related
	}

	if related.R == nil {
		related.R = &categoriaOpcaoR{
			IDCategoriaOpcaoPedidoItens: PedidoItemSlice{o},
		}
	} else {
		related.R.IDCategoriaOpcaoPedidoItens = append(related.R.IDCategoriaOpcaoPedidoItens, o)
	}

	return nil
}

// RemoveIDCategoriaOpcaoCategoriaOpco relationship.
// Sets o.R.IDCategoriaOpcaoCategoriaOpco to nil.
// Removes o from all passed in related items' relationships struct.
func (o *PedidoItem) RemoveIDCategoriaOpcaoCategoriaOpco(ctx context.Context, exec boil.ContextExecutor, related *CategoriaOpcao) error {
	var err error

	queries.SetScanner(&o.IDCategoriaOpcao, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("id_categoria_opcao")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IDCategoriaOpcaoCategoriaOpco = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IDCategoriaOpcaoPedidoItens {
		if queries.Equal(o.IDCategoriaOpcao, ri.IDCategoriaOpcao) {
			continue
		}

		ln := len(related.R.IDCategoriaOpcaoPedidoItens)
		if ln > 1 && i < ln-1 {
			related.R.IDCategoriaOpcaoPedidoItens[i] = related.R.IDCategoriaOpcaoPedidoItens[ln-1]
		}
		related.R.IDCategoriaOpcaoPedidoItens = related.R.IDCategoriaOpcaoPedidoItens[:ln-1]
		break
	}
	return nil
}

// SetIDPedidoPedido of the pedidoItem to the related item.
// Sets o.R.IDPedidoPedido to related.
// Adds o to related.R.IDPedidoPedidoItens.
func (o *PedidoItem) SetIDPedidoPedido(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Pedido) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pedido_itens\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_pedido"}),
		strmangle.WhereClause("\"", "\"", 2, pedidoItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDPedido = related.ID
	if o.R == nil {
		o.R = &pedidoItemR{
			IDPedidoPedido: related,
		}
	} else {
		o.R.IDPedidoPedido = related
	}

	if related.R == nil {
		related.R = &pedidoR{
			IDPedidoPedidoItens: PedidoItemSlice{o},
		}
	} else {
		related.R.IDPedidoPedidoItens = append(related.R.IDPedidoPedidoItens, o)
	}

	return nil
}

// SetIDProdutoProduto of the pedidoItem to the related item.
// Sets o.R.IDProdutoProduto to related.
// Adds o to related.R.IDProdutoPedidoItens.
func (o *PedidoItem) SetIDProdutoProduto(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Produto) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pedido_itens\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_produto"}),
		strmangle.WhereClause("\"", "\"", 2, pedidoItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDProduto = related.ID
	if o.R == nil {
		o.R = &pedidoItemR{
			IDProdutoProduto: related,
		}
	} else {
		o.R.IDProdutoProduto = related
	}

	if related.R == nil {
		related.R = &produtoR{
			IDProdutoPedidoItens: PedidoItemSlice{o},
		}
	} else {
		related.R.IDProdutoPedidoItens = append(related.R.IDProdutoPedidoItens, o)
	}

	return nil
}

// SetIDProduto2Produto of the pedidoItem to the related item.
// Sets o.R.IDProduto2Produto to related.
// Adds o to related.R.IDProduto2PedidoItens.
func (o *PedidoItem) SetIDProduto2Produto(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Produto) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pedido_itens\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_produto_2"}),
		strmangle.WhereClause("\"", "\"", 2, pedidoItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IDProduto2, related.ID)
	if o.R == nil {
		o.R = &pedidoItemR{
			IDProduto2Produto: related,
		}
	} else {
		o.R.IDProduto2Produto = related
	}

	if related.R == nil {
		related.R = &produtoR{
			IDProduto2PedidoItens: PedidoItemSlice{o},
		}
	} else {
		related.R.IDProduto2PedidoItens = append(related.R.IDProduto2PedidoItens, o)
	}

	return nil
}

// RemoveIDProduto2Produto relationship.
// Sets o.R.IDProduto2Produto to nil.
// Removes o from all passed in related items' relationships struct.
func (o *PedidoItem) RemoveIDProduto2Produto(ctx context.Context, exec boil.ContextExecutor, related *Produto) error {
	var err error

	queries.SetScanner(&o.IDProduto2, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("id_produto_2")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IDProduto2Produto = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IDProduto2PedidoItens {
		if queries.Equal(o.IDProduto2, ri.IDProduto2) {
			continue
		}

		ln := len(related.R.IDProduto2PedidoItens)
		if ln > 1 && i < ln-1 {
			related.R.IDProduto2PedidoItens[i] = related.R.IDProduto2PedidoItens[ln-1]
		}
		related.R.IDProduto2PedidoItens = related.R.IDProduto2PedidoItens[:ln-1]
		break
	}
	return nil
}

// AddIDPedidoItemPedidoItemAdicionais adds the given related objects to the existing relationships
// of the pedido_iten, optionally inserting them as new records.
// Appends related to o.R.IDPedidoItemPedidoItemAdicionais.
// Sets related.R.IDPedidoItemPedidoIten appropriately.
func (o *PedidoItem) AddIDPedidoItemPedidoItemAdicionais(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PedidoItemAdicional) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDPedidoItem = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"pedido_item_adicionais\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_pedido_item"}),
				strmangle.WhereClause("\"", "\"", 2, pedidoItemAdicionalPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDPedidoItem = o.ID
		}
	}

	if o.R == nil {
		o.R = &pedidoItemR{
			IDPedidoItemPedidoItemAdicionais: related,
		}
	} else {
		o.R.IDPedidoItemPedidoItemAdicionais = append(o.R.IDPedidoItemPedidoItemAdicionais, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pedidoItemAdicionalR{
				IDPedidoItemPedidoIten: o,
			}
		} else {
			rel.R.IDPedidoItemPedidoIten = o
		}
	}
	return nil
}

// PedidoItens retrieves all the records using an executor.
func PedidoItens(mods ...qm.QueryMod) pedidoItemQuery {
	mods = append(mods, qm.From("\"pedido_itens\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"pedido_itens\".*"})
	}

	return pedidoItemQuery{q}
}

// FindPedidoItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPedidoItem(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*PedidoItem, error) {
	pedidoItemObj := &PedidoItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pedido_itens\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pedidoItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from pedido_itens")
	}

	if err = pedidoItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return pedidoItemObj, err
	}

	return pedidoItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PedidoItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no pedido_itens provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pedidoItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pedidoItemInsertCacheMut.RLock()
	cache, cached := pedidoItemInsertCache[key]
	pedidoItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pedidoItemAllColumns,
			pedidoItemColumnsWithDefault,
			pedidoItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pedidoItemType, pedidoItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pedidoItemType, pedidoItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pedido_itens\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pedido_itens\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into pedido_itens")
	}

	if !cached {
		pedidoItemInsertCacheMut.Lock()
		pedidoItemInsertCache[key] = cache
		pedidoItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PedidoItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PedidoItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pedidoItemUpdateCacheMut.RLock()
	cache, cached := pedidoItemUpdateCache[key]
	pedidoItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pedidoItemAllColumns,
			pedidoItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update pedido_itens, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pedido_itens\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pedidoItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pedidoItemType, pedidoItemMapping, append(wl, pedidoItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update pedido_itens row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for pedido_itens")
	}

	if !cached {
		pedidoItemUpdateCacheMut.Lock()
		pedidoItemUpdateCache[key] = cache
		pedidoItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pedidoItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for pedido_itens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for pedido_itens")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PedidoItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pedidoItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pedido_itens\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pedidoItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in pedidoItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all pedidoItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PedidoItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no pedido_itens provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pedidoItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pedidoItemUpsertCacheMut.RLock()
	cache, cached := pedidoItemUpsertCache[key]
	pedidoItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			pedidoItemAllColumns,
			pedidoItemColumnsWithDefault,
			pedidoItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pedidoItemAllColumns,
			pedidoItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert pedido_itens, could not build update column list")
		}

		ret := strmangle.SetComplement(pedidoItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(pedidoItemPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert pedido_itens, could not build conflict column list")
			}

			conflict = make([]string, len(pedidoItemPrimaryKeyColumns))
			copy(conflict, pedidoItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pedido_itens\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(pedidoItemType, pedidoItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pedidoItemType, pedidoItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert pedido_itens")
	}

	if !cached {
		pedidoItemUpsertCacheMut.Lock()
		pedidoItemUpsertCache[key] = cache
		pedidoItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PedidoItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PedidoItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no PedidoItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pedidoItemPrimaryKeyMapping)
	sql := "DELETE FROM \"pedido_itens\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from pedido_itens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for pedido_itens")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pedidoItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no pedidoItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from pedido_itens")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for pedido_itens")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PedidoItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pedidoItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pedidoItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pedido_itens\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pedidoItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from pedidoItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for pedido_itens")
	}

	if len(pedidoItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PedidoItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPedidoItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PedidoItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PedidoItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pedidoItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pedido_itens\".* FROM \"pedido_itens\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pedidoItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in PedidoItemSlice")
	}

	*o = slice

	return nil
}

// PedidoItemExists checks if the PedidoItem row exists.
func PedidoItemExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pedido_itens\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if pedido_itens exists")
	}

	return exists, nil
}

// Exists checks if the PedidoItem row exists.
func (o *PedidoItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PedidoItemExists(ctx, exec, o.ID)
}
