// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Pedido is an object representing the database table.
type Pedido struct {
	ID                 string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	SeqID              int64             `boil:"seq_id" json:"seq_id" toml:"seq_id" yaml:"seq_id"`
	TenantID           string            `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	IDCliente          string            `boil:"id_cliente" json:"id_cliente" toml:"id_cliente" yaml:"id_cliente"`
	CodigoPedido       string            `boil:"codigo_pedido" json:"codigo_pedido" toml:"codigo_pedido" yaml:"codigo_pedido"`
	DataPedido         time.Time         `boil:"data_pedido" json:"data_pedido" toml:"data_pedido" yaml:"data_pedido"`
	GMT                int16             `boil:"gmt" json:"gmt" toml:"gmt" yaml:"gmt"`
	PedidoPronto       int16             `boil:"pedido_pronto" json:"pedido_pronto" toml:"pedido_pronto" yaml:"pedido_pronto"`
	DataPedidoPronto   null.Time         `boil:"data_pedido_pronto" json:"data_pedido_pronto,omitempty" toml:"data_pedido_pronto" yaml:"data_pedido_pronto,omitempty"`
	Cupom              null.String       `boil:"cupom" json:"cupom,omitempty" toml:"cupom" yaml:"cupom,omitempty"`
	TipoEntrega        string            `boil:"tipo_entrega" json:"tipo_entrega" toml:"tipo_entrega" yaml:"tipo_entrega"`
	Prazo              null.Int          `boil:"prazo" json:"prazo,omitempty" toml:"prazo" yaml:"prazo,omitempty"`
	PrazoMin           null.Int          `boil:"prazo_min" json:"prazo_min,omitempty" toml:"prazo_min" yaml:"prazo_min,omitempty"`
	PrazoMax           null.Int          `boil:"prazo_max" json:"prazo_max,omitempty" toml:"prazo_max" yaml:"prazo_max,omitempty"`
	CategoriaPagamento null.String       `boil:"categoria_pagamento" json:"categoria_pagamento,omitempty" toml:"categoria_pagamento" yaml:"categoria_pagamento,omitempty"`
	FormaPagamento     null.String       `boil:"forma_pagamento" json:"forma_pagamento,omitempty" toml:"forma_pagamento" yaml:"forma_pagamento,omitempty"`
	ValorTotal         types.Decimal     `boil:"valor_total" json:"valor_total" toml:"valor_total" yaml:"valor_total"`
	Observacao         null.String       `boil:"observacao" json:"observacao,omitempty" toml:"observacao" yaml:"observacao,omitempty"`
	TaxaEntrega        types.Decimal     `boil:"taxa_entrega" json:"taxa_entrega" toml:"taxa_entrega" yaml:"taxa_entrega"`
	NomeTaxaEntrega    null.String       `boil:"nome_taxa_entrega" json:"nome_taxa_entrega,omitempty" toml:"nome_taxa_entrega" yaml:"nome_taxa_entrega,omitempty"`
	IDStatus           int16             `boil:"id_status" json:"id_status" toml:"id_status" yaml:"id_status"`
	Lat                types.NullDecimal `boil:"lat" json:"lat,omitempty" toml:"lat" yaml:"lat,omitempty"`
	LNG                types.NullDecimal `boil:"lng" json:"lng,omitempty" toml:"lng" yaml:"lng,omitempty"`
	CreatedAt          time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt          null.Time         `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	ValorPago          types.Decimal     `boil:"valor_pago" json:"valor_pago" toml:"valor_pago" yaml:"valor_pago"`
	Quitado            null.Bool         `boil:"quitado" json:"quitado,omitempty" toml:"quitado" yaml:"quitado,omitempty"`
	TrocoPara          types.NullDecimal `boil:"troco_para" json:"troco_para,omitempty" toml:"troco_para" yaml:"troco_para,omitempty"`

	R *pedidoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pedidoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PedidoColumns = struct {
	ID                 string
	SeqID              string
	TenantID           string
	IDCliente          string
	CodigoPedido       string
	DataPedido         string
	GMT                string
	PedidoPronto       string
	DataPedidoPronto   string
	Cupom              string
	TipoEntrega        string
	Prazo              string
	PrazoMin           string
	PrazoMax           string
	CategoriaPagamento string
	FormaPagamento     string
	ValorTotal         string
	Observacao         string
	TaxaEntrega        string
	NomeTaxaEntrega    string
	IDStatus           string
	Lat                string
	LNG                string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
	ValorPago          string
	Quitado            string
	TrocoPara          string
}{
	ID:                 "id",
	SeqID:              "seq_id",
	TenantID:           "tenant_id",
	IDCliente:          "id_cliente",
	CodigoPedido:       "codigo_pedido",
	DataPedido:         "data_pedido",
	GMT:                "gmt",
	PedidoPronto:       "pedido_pronto",
	DataPedidoPronto:   "data_pedido_pronto",
	Cupom:              "cupom",
	TipoEntrega:        "tipo_entrega",
	Prazo:              "prazo",
	PrazoMin:           "prazo_min",
	PrazoMax:           "prazo_max",
	CategoriaPagamento: "categoria_pagamento",
	FormaPagamento:     "forma_pagamento",
	ValorTotal:         "valor_total",
	Observacao:         "observacao",
	TaxaEntrega:        "taxa_entrega",
	NomeTaxaEntrega:    "nome_taxa_entrega",
	IDStatus:           "id_status",
	Lat:                "lat",
	LNG:                "lng",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
	ValorPago:          "valor_pago",
	Quitado:            "quitado",
	TrocoPara:          "troco_para",
}

var PedidoTableColumns = struct {
	ID                 string
	SeqID              string
	TenantID           string
	IDCliente          string
	CodigoPedido       string
	DataPedido         string
	GMT                string
	PedidoPronto       string
	DataPedidoPronto   string
	Cupom              string
	TipoEntrega        string
	Prazo              string
	PrazoMin           string
	PrazoMax           string
	CategoriaPagamento string
	FormaPagamento     string
	ValorTotal         string
	Observacao         string
	TaxaEntrega        string
	NomeTaxaEntrega    string
	IDStatus           string
	Lat                string
	LNG                string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
	ValorPago          string
	Quitado            string
	TrocoPara          string
}{
	ID:                 "pedidos.id",
	SeqID:              "pedidos.seq_id",
	TenantID:           "pedidos.tenant_id",
	IDCliente:          "pedidos.id_cliente",
	CodigoPedido:       "pedidos.codigo_pedido",
	DataPedido:         "pedidos.data_pedido",
	GMT:                "pedidos.gmt",
	PedidoPronto:       "pedidos.pedido_pronto",
	DataPedidoPronto:   "pedidos.data_pedido_pronto",
	Cupom:              "pedidos.cupom",
	TipoEntrega:        "pedidos.tipo_entrega",
	Prazo:              "pedidos.prazo",
	PrazoMin:           "pedidos.prazo_min",
	PrazoMax:           "pedidos.prazo_max",
	CategoriaPagamento: "pedidos.categoria_pagamento",
	FormaPagamento:     "pedidos.forma_pagamento",
	ValorTotal:         "pedidos.valor_total",
	Observacao:         "pedidos.observacao",
	TaxaEntrega:        "pedidos.taxa_entrega",
	NomeTaxaEntrega:    "pedidos.nome_taxa_entrega",
	IDStatus:           "pedidos.id_status",
	Lat:                "pedidos.lat",
	LNG:                "pedidos.lng",
	CreatedAt:          "pedidos.created_at",
	UpdatedAt:          "pedidos.updated_at",
	DeletedAt:          "pedidos.deleted_at",
	ValorPago:          "pedidos.valor_pago",
	Quitado:            "pedidos.quitado",
	TrocoPara:          "pedidos.troco_para",
}

// Generated where

var PedidoWhere = struct {
	ID                 whereHelperstring
	SeqID              whereHelperint64
	TenantID           whereHelperstring
	IDCliente          whereHelperstring
	CodigoPedido       whereHelperstring
	DataPedido         whereHelpertime_Time
	GMT                whereHelperint16
	PedidoPronto       whereHelperint16
	DataPedidoPronto   whereHelpernull_Time
	Cupom              whereHelpernull_String
	TipoEntrega        whereHelperstring
	Prazo              whereHelpernull_Int
	PrazoMin           whereHelpernull_Int
	PrazoMax           whereHelpernull_Int
	CategoriaPagamento whereHelpernull_String
	FormaPagamento     whereHelpernull_String
	ValorTotal         whereHelpertypes_Decimal
	Observacao         whereHelpernull_String
	TaxaEntrega        whereHelpertypes_Decimal
	NomeTaxaEntrega    whereHelpernull_String
	IDStatus           whereHelperint16
	Lat                whereHelpertypes_NullDecimal
	LNG                whereHelpertypes_NullDecimal
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	DeletedAt          whereHelpernull_Time
	ValorPago          whereHelpertypes_Decimal
	Quitado            whereHelpernull_Bool
	TrocoPara          whereHelpertypes_NullDecimal
}{
	ID:                 whereHelperstring{field: "\"pedidos\".\"id\""},
	SeqID:              whereHelperint64{field: "\"pedidos\".\"seq_id\""},
	TenantID:           whereHelperstring{field: "\"pedidos\".\"tenant_id\""},
	IDCliente:          whereHelperstring{field: "\"pedidos\".\"id_cliente\""},
	CodigoPedido:       whereHelperstring{field: "\"pedidos\".\"codigo_pedido\""},
	DataPedido:         whereHelpertime_Time{field: "\"pedidos\".\"data_pedido\""},
	GMT:                whereHelperint16{field: "\"pedidos\".\"gmt\""},
	PedidoPronto:       whereHelperint16{field: "\"pedidos\".\"pedido_pronto\""},
	DataPedidoPronto:   whereHelpernull_Time{field: "\"pedidos\".\"data_pedido_pronto\""},
	Cupom:              whereHelpernull_String{field: "\"pedidos\".\"cupom\""},
	TipoEntrega:        whereHelperstring{field: "\"pedidos\".\"tipo_entrega\""},
	Prazo:              whereHelpernull_Int{field: "\"pedidos\".\"prazo\""},
	PrazoMin:           whereHelpernull_Int{field: "\"pedidos\".\"prazo_min\""},
	PrazoMax:           whereHelpernull_Int{field: "\"pedidos\".\"prazo_max\""},
	CategoriaPagamento: whereHelpernull_String{field: "\"pedidos\".\"categoria_pagamento\""},
	FormaPagamento:     whereHelpernull_String{field: "\"pedidos\".\"forma_pagamento\""},
	ValorTotal:         whereHelpertypes_Decimal{field: "\"pedidos\".\"valor_total\""},
	Observacao:         whereHelpernull_String{field: "\"pedidos\".\"observacao\""},
	TaxaEntrega:        whereHelpertypes_Decimal{field: "\"pedidos\".\"taxa_entrega\""},
	NomeTaxaEntrega:    whereHelpernull_String{field: "\"pedidos\".\"nome_taxa_entrega\""},
	IDStatus:           whereHelperint16{field: "\"pedidos\".\"id_status\""},
	Lat:                whereHelpertypes_NullDecimal{field: "\"pedidos\".\"lat\""},
	LNG:                whereHelpertypes_NullDecimal{field: "\"pedidos\".\"lng\""},
	CreatedAt:          whereHelpertime_Time{field: "\"pedidos\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"pedidos\".\"updated_at\""},
	DeletedAt:          whereHelpernull_Time{field: "\"pedidos\".\"deleted_at\""},
	ValorPago:          whereHelpertypes_Decimal{field: "\"pedidos\".\"valor_pago\""},
	Quitado:            whereHelpernull_Bool{field: "\"pedidos\".\"quitado\""},
	TrocoPara:          whereHelpertypes_NullDecimal{field: "\"pedidos\".\"troco_para\""},
}

// PedidoRels is where relationship names are stored.
var PedidoRels = struct {
	IDClienteCliente         string
	IDStatusPedidoStatus     string
	Tenant                   string
	IDPedidoContasRecebers   string
	IDPedidoPedidoItens      string
	IDPedidoPedidoPagamentos string
}{
	IDClienteCliente:         "IDClienteCliente",
	IDStatusPedidoStatus:     "IDStatusPedidoStatus",
	Tenant:                   "Tenant",
	IDPedidoContasRecebers:   "IDPedidoContasRecebers",
	IDPedidoPedidoItens:      "IDPedidoPedidoItens",
	IDPedidoPedidoPagamentos: "IDPedidoPedidoPagamentos",
}

// pedidoR is where relationships are stored.
type pedidoR struct {
	IDClienteCliente         *Cliente             `boil:"IDClienteCliente" json:"IDClienteCliente" toml:"IDClienteCliente" yaml:"IDClienteCliente"`
	IDStatusPedidoStatus     *PedidoStatus        `boil:"IDStatusPedidoStatus" json:"IDStatusPedidoStatus" toml:"IDStatusPedidoStatus" yaml:"IDStatusPedidoStatus"`
	Tenant                   *Tenant              `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
	IDPedidoContasRecebers   ContasReceberSlice   `boil:"IDPedidoContasRecebers" json:"IDPedidoContasRecebers" toml:"IDPedidoContasRecebers" yaml:"IDPedidoContasRecebers"`
	IDPedidoPedidoItens      PedidoItemSlice      `boil:"IDPedidoPedidoItens" json:"IDPedidoPedidoItens" toml:"IDPedidoPedidoItens" yaml:"IDPedidoPedidoItens"`
	IDPedidoPedidoPagamentos PedidoPagamentoSlice `boil:"IDPedidoPedidoPagamentos" json:"IDPedidoPedidoPagamentos" toml:"IDPedidoPedidoPagamentos" yaml:"IDPedidoPedidoPagamentos"`
}

// NewStruct creates a new relationship struct
func (*pedidoR) NewStruct() *pedidoR {
	return &pedidoR{}
}

func (r *pedidoR) GetIDClienteCliente() *Cliente {
	if r == nil {
		return nil
	}
	return r.IDClienteCliente
}

func (r *pedidoR) GetIDStatusPedidoStatus() *PedidoStatus {
	if r == nil {
		return nil
	}
	return r.IDStatusPedidoStatus
}

func (r *pedidoR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}
	return r.Tenant
}

func (r *pedidoR) GetIDPedidoContasRecebers() ContasReceberSlice {
	if r == nil {
		return nil
	}
	return r.IDPedidoContasRecebers
}

func (r *pedidoR) GetIDPedidoPedidoItens() PedidoItemSlice {
	if r == nil {
		return nil
	}
	return r.IDPedidoPedidoItens
}

func (r *pedidoR) GetIDPedidoPedidoPagamentos() PedidoPagamentoSlice {
	if r == nil {
		return nil
	}
	return r.IDPedidoPedidoPagamentos
}

// pedidoL is where Load methods for each relationship are stored.
type pedidoL struct{}

var (
	pedidoAllColumns            = []string{"id", "seq_id", "tenant_id", "id_cliente", "codigo_pedido", "data_pedido", "gmt", "pedido_pronto", "data_pedido_pronto", "cupom", "tipo_entrega", "prazo", "prazo_min", "prazo_max", "categoria_pagamento", "forma_pagamento", "valor_total", "observacao", "taxa_entrega", "nome_taxa_entrega", "id_status", "lat", "lng", "created_at", "updated_at", "deleted_at", "valor_pago", "quitado", "troco_para"}
	pedidoColumnsWithoutDefault = []string{"tenant_id", "id_cliente", "codigo_pedido", "data_pedido", "gmt", "tipo_entrega", "valor_total", "id_status"}
	pedidoColumnsWithDefault    = []string{"id", "seq_id", "pedido_pronto", "data_pedido_pronto", "cupom", "prazo", "prazo_min", "prazo_max", "categoria_pagamento", "forma_pagamento", "observacao", "taxa_entrega", "nome_taxa_entrega", "lat", "lng", "created_at", "updated_at", "deleted_at", "valor_pago", "quitado", "troco_para"}
	pedidoPrimaryKeyColumns     = []string{"id"}
	pedidoGeneratedColumns      = []string{}
)

type (
	// PedidoSlice is an alias for a slice of pointers to Pedido.
	// This should almost always be used instead of []Pedido.
	PedidoSlice []*Pedido
	// PedidoHook is the signature for custom Pedido hook methods
	PedidoHook func(context.Context, boil.ContextExecutor, *Pedido) error

	pedidoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pedidoType                 = reflect.TypeOf(&Pedido{})
	pedidoMapping              = queries.MakeStructMapping(pedidoType)
	pedidoPrimaryKeyMapping, _ = queries.BindMapping(pedidoType, pedidoMapping, pedidoPrimaryKeyColumns)
	pedidoInsertCacheMut       sync.RWMutex
	pedidoInsertCache          = make(map[string]insertCache)
	pedidoUpdateCacheMut       sync.RWMutex
	pedidoUpdateCache          = make(map[string]updateCache)
	pedidoUpsertCacheMut       sync.RWMutex
	pedidoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pedidoAfterSelectMu sync.Mutex
var pedidoAfterSelectHooks []PedidoHook

var pedidoBeforeInsertMu sync.Mutex
var pedidoBeforeInsertHooks []PedidoHook
var pedidoAfterInsertMu sync.Mutex
var pedidoAfterInsertHooks []PedidoHook

var pedidoBeforeUpdateMu sync.Mutex
var pedidoBeforeUpdateHooks []PedidoHook
var pedidoAfterUpdateMu sync.Mutex
var pedidoAfterUpdateHooks []PedidoHook

var pedidoBeforeDeleteMu sync.Mutex
var pedidoBeforeDeleteHooks []PedidoHook
var pedidoAfterDeleteMu sync.Mutex
var pedidoAfterDeleteHooks []PedidoHook

var pedidoBeforeUpsertMu sync.Mutex
var pedidoBeforeUpsertHooks []PedidoHook
var pedidoAfterUpsertMu sync.Mutex
var pedidoAfterUpsertHooks []PedidoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Pedido) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Pedido) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Pedido) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Pedido) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Pedido) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Pedido) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Pedido) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Pedido) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Pedido) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPedidoHook registers your hook function for all future operations.
func AddPedidoHook(hookPoint boil.HookPoint, pedidoHook PedidoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		pedidoAfterSelectMu.Lock()
		pedidoAfterSelectHooks = append(pedidoAfterSelectHooks, pedidoHook)
		pedidoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		pedidoBeforeInsertMu.Lock()
		pedidoBeforeInsertHooks = append(pedidoBeforeInsertHooks, pedidoHook)
		pedidoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		pedidoAfterInsertMu.Lock()
		pedidoAfterInsertHooks = append(pedidoAfterInsertHooks, pedidoHook)
		pedidoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		pedidoBeforeUpdateMu.Lock()
		pedidoBeforeUpdateHooks = append(pedidoBeforeUpdateHooks, pedidoHook)
		pedidoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		pedidoAfterUpdateMu.Lock()
		pedidoAfterUpdateHooks = append(pedidoAfterUpdateHooks, pedidoHook)
		pedidoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		pedidoBeforeDeleteMu.Lock()
		pedidoBeforeDeleteHooks = append(pedidoBeforeDeleteHooks, pedidoHook)
		pedidoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		pedidoAfterDeleteMu.Lock()
		pedidoAfterDeleteHooks = append(pedidoAfterDeleteHooks, pedidoHook)
		pedidoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		pedidoBeforeUpsertMu.Lock()
		pedidoBeforeUpsertHooks = append(pedidoBeforeUpsertHooks, pedidoHook)
		pedidoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		pedidoAfterUpsertMu.Lock()
		pedidoAfterUpsertHooks = append(pedidoAfterUpsertHooks, pedidoHook)
		pedidoAfterUpsertMu.Unlock()
	}
}

// One returns a single pedido record from the query.
func (q pedidoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Pedido, error) {
	o := &Pedido{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for pedidos")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Pedido records from the query.
func (q pedidoQuery) All(ctx context.Context, exec boil.ContextExecutor) (PedidoSlice, error) {
	var o []*Pedido

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to Pedido slice")
	}

	if len(pedidoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Pedido records in the query.
func (q pedidoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count pedidos rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pedidoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if pedidos exists")
	}

	return count > 0, nil
}

// IDClienteCliente pointed to by the foreign key.
func (o *Pedido) IDClienteCliente(mods ...qm.QueryMod) clienteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDCliente),
	}

	queryMods = append(queryMods, mods...)

	return Clientes(queryMods...)
}

// IDStatusPedidoStatus pointed to by the foreign key.
func (o *Pedido) IDStatusPedidoStatus(mods ...qm.QueryMod) pedidoStatusQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDStatus),
	}

	queryMods = append(queryMods, mods...)

	return PedidoStatuses(queryMods...)
}

// Tenant pointed to by the foreign key.
func (o *Pedido) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// IDPedidoContasRecebers retrieves all the contas_receber's ContasRecebers with an executor via id_pedido column.
func (o *Pedido) IDPedidoContasRecebers(mods ...qm.QueryMod) contasReceberQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"contas_receber\".\"id_pedido\"=?", o.ID),
	)

	return ContasRecebers(queryMods...)
}

// IDPedidoPedidoItens retrieves all the pedido_iten's PedidoItens with an executor via id_pedido column.
func (o *Pedido) IDPedidoPedidoItens(mods ...qm.QueryMod) pedidoItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"pedido_itens\".\"id_pedido\"=?", o.ID),
	)

	return PedidoItens(queryMods...)
}

// IDPedidoPedidoPagamentos retrieves all the pedido_pagamento's PedidoPagamentos with an executor via id_pedido column.
func (o *Pedido) IDPedidoPedidoPagamentos(mods ...qm.QueryMod) pedidoPagamentoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"pedido_pagamentos\".\"id_pedido\"=?", o.ID),
	)

	return PedidoPagamentos(queryMods...)
}

// LoadIDClienteCliente allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pedidoL) LoadIDClienteCliente(ctx context.Context, e boil.ContextExecutor, singular bool, maybePedido interface{}, mods queries.Applicator) error {
	var slice []*Pedido
	var object *Pedido

	if singular {
		var ok bool
		object, ok = maybePedido.(*Pedido)
		if !ok {
			object = new(Pedido)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePedido)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePedido))
			}
		}
	} else {
		s, ok := maybePedido.(*[]*Pedido)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePedido)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePedido))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pedidoR{}
		}
		args[object.IDCliente] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pedidoR{}
			}

			args[obj.IDCliente] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`clientes`),
		qm.WhereIn(`clientes.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Cliente")
	}

	var resultSlice []*Cliente
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Cliente")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for clientes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for clientes")
	}

	if len(clienteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDClienteCliente = foreign
		if foreign.R == nil {
			foreign.R = &clienteR{}
		}
		foreign.R.IDClientePedidos = append(foreign.R.IDClientePedidos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDCliente == foreign.ID {
				local.R.IDClienteCliente = foreign
				if foreign.R == nil {
					foreign.R = &clienteR{}
				}
				foreign.R.IDClientePedidos = append(foreign.R.IDClientePedidos, local)
				break
			}
		}
	}

	return nil
}

// LoadIDStatusPedidoStatus allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pedidoL) LoadIDStatusPedidoStatus(ctx context.Context, e boil.ContextExecutor, singular bool, maybePedido interface{}, mods queries.Applicator) error {
	var slice []*Pedido
	var object *Pedido

	if singular {
		var ok bool
		object, ok = maybePedido.(*Pedido)
		if !ok {
			object = new(Pedido)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePedido)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePedido))
			}
		}
	} else {
		s, ok := maybePedido.(*[]*Pedido)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePedido)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePedido))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pedidoR{}
		}
		args[object.IDStatus] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pedidoR{}
			}

			args[obj.IDStatus] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`pedido_status`),
		qm.WhereIn(`pedido_status.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PedidoStatus")
	}

	var resultSlice []*PedidoStatus
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PedidoStatus")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pedido_status")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pedido_status")
	}

	if len(pedidoStatusAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDStatusPedidoStatus = foreign
		if foreign.R == nil {
			foreign.R = &pedidoStatusR{}
		}
		foreign.R.IDStatusPedidos = append(foreign.R.IDStatusPedidos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDStatus == foreign.ID {
				local.R.IDStatusPedidoStatus = foreign
				if foreign.R == nil {
					foreign.R = &pedidoStatusR{}
				}
				foreign.R.IDStatusPedidos = append(foreign.R.IDStatusPedidos, local)
				break
			}
		}
	}

	return nil
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pedidoL) LoadTenant(ctx context.Context, e boil.ContextExecutor, singular bool, maybePedido interface{}, mods queries.Applicator) error {
	var slice []*Pedido
	var object *Pedido

	if singular {
		var ok bool
		object, ok = maybePedido.(*Pedido)
		if !ok {
			object = new(Pedido)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePedido)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePedido))
			}
		}
	} else {
		s, ok := maybePedido.(*[]*Pedido)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePedido)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePedido))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pedidoR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pedidoR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.Pedidos = append(foreign.R.Pedidos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.Pedidos = append(foreign.R.Pedidos, local)
				break
			}
		}
	}

	return nil
}

// LoadIDPedidoContasRecebers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pedidoL) LoadIDPedidoContasRecebers(ctx context.Context, e boil.ContextExecutor, singular bool, maybePedido interface{}, mods queries.Applicator) error {
	var slice []*Pedido
	var object *Pedido

	if singular {
		var ok bool
		object, ok = maybePedido.(*Pedido)
		if !ok {
			object = new(Pedido)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePedido)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePedido))
			}
		}
	} else {
		s, ok := maybePedido.(*[]*Pedido)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePedido)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePedido))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pedidoR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pedidoR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`contas_receber`),
		qm.WhereIn(`contas_receber.id_pedido in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load contas_receber")
	}

	var resultSlice []*ContasReceber
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice contas_receber")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on contas_receber")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for contas_receber")
	}

	if len(contasReceberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDPedidoContasRecebers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &contasReceberR{}
			}
			foreign.R.IDPedidoPedido = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDPedido {
				local.R.IDPedidoContasRecebers = append(local.R.IDPedidoContasRecebers, foreign)
				if foreign.R == nil {
					foreign.R = &contasReceberR{}
				}
				foreign.R.IDPedidoPedido = local
				break
			}
		}
	}

	return nil
}

// LoadIDPedidoPedidoItens allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pedidoL) LoadIDPedidoPedidoItens(ctx context.Context, e boil.ContextExecutor, singular bool, maybePedido interface{}, mods queries.Applicator) error {
	var slice []*Pedido
	var object *Pedido

	if singular {
		var ok bool
		object, ok = maybePedido.(*Pedido)
		if !ok {
			object = new(Pedido)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePedido)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePedido))
			}
		}
	} else {
		s, ok := maybePedido.(*[]*Pedido)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePedido)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePedido))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pedidoR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pedidoR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`pedido_itens`),
		qm.WhereIn(`pedido_itens.id_pedido in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pedido_itens")
	}

	var resultSlice []*PedidoItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pedido_itens")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pedido_itens")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pedido_itens")
	}

	if len(pedidoItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDPedidoPedidoItens = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pedidoItemR{}
			}
			foreign.R.IDPedidoPedido = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDPedido {
				local.R.IDPedidoPedidoItens = append(local.R.IDPedidoPedidoItens, foreign)
				if foreign.R == nil {
					foreign.R = &pedidoItemR{}
				}
				foreign.R.IDPedidoPedido = local
				break
			}
		}
	}

	return nil
}

// LoadIDPedidoPedidoPagamentos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pedidoL) LoadIDPedidoPedidoPagamentos(ctx context.Context, e boil.ContextExecutor, singular bool, maybePedido interface{}, mods queries.Applicator) error {
	var slice []*Pedido
	var object *Pedido

	if singular {
		var ok bool
		object, ok = maybePedido.(*Pedido)
		if !ok {
			object = new(Pedido)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePedido)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePedido))
			}
		}
	} else {
		s, ok := maybePedido.(*[]*Pedido)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePedido)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePedido))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pedidoR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pedidoR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`pedido_pagamentos`),
		qm.WhereIn(`pedido_pagamentos.id_pedido in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pedido_pagamentos")
	}

	var resultSlice []*PedidoPagamento
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pedido_pagamentos")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pedido_pagamentos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pedido_pagamentos")
	}

	if len(pedidoPagamentoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IDPedidoPedidoPagamentos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pedidoPagamentoR{}
			}
			foreign.R.IDPedidoPedido = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IDPedido {
				local.R.IDPedidoPedidoPagamentos = append(local.R.IDPedidoPedidoPagamentos, foreign)
				if foreign.R == nil {
					foreign.R = &pedidoPagamentoR{}
				}
				foreign.R.IDPedidoPedido = local
				break
			}
		}
	}

	return nil
}

// SetIDClienteCliente of the pedido to the related item.
// Sets o.R.IDClienteCliente to related.
// Adds o to related.R.IDClientePedidos.
func (o *Pedido) SetIDClienteCliente(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Cliente) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pedidos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_cliente"}),
		strmangle.WhereClause("\"", "\"", 2, pedidoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDCliente = related.ID
	if o.R == nil {
		o.R = &pedidoR{
			IDClienteCliente: related,
		}
	} else {
		o.R.IDClienteCliente = related
	}

	if related.R == nil {
		related.R = &clienteR{
			IDClientePedidos: PedidoSlice{o},
		}
	} else {
		related.R.IDClientePedidos = append(related.R.IDClientePedidos, o)
	}

	return nil
}

// SetIDStatusPedidoStatus of the pedido to the related item.
// Sets o.R.IDStatusPedidoStatus to related.
// Adds o to related.R.IDStatusPedidos.
func (o *Pedido) SetIDStatusPedidoStatus(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PedidoStatus) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pedidos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_status"}),
		strmangle.WhereClause("\"", "\"", 2, pedidoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDStatus = related.ID
	if o.R == nil {
		o.R = &pedidoR{
			IDStatusPedidoStatus: related,
		}
	} else {
		o.R.IDStatusPedidoStatus = related
	}

	if related.R == nil {
		related.R = &pedidoStatusR{
			IDStatusPedidos: PedidoSlice{o},
		}
	} else {
		related.R.IDStatusPedidos = append(related.R.IDStatusPedidos, o)
	}

	return nil
}

// SetTenant of the pedido to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.Pedidos.
func (o *Pedido) SetTenant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pedidos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, pedidoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &pedidoR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			Pedidos: PedidoSlice{o},
		}
	} else {
		related.R.Pedidos = append(related.R.Pedidos, o)
	}

	return nil
}

// AddIDPedidoContasRecebers adds the given related objects to the existing relationships
// of the pedido, optionally inserting them as new records.
// Appends related to o.R.IDPedidoContasRecebers.
// Sets related.R.IDPedidoPedido appropriately.
func (o *Pedido) AddIDPedidoContasRecebers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ContasReceber) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDPedido = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"contas_receber\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_pedido"}),
				strmangle.WhereClause("\"", "\"", 2, contasReceberPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDPedido = o.ID
		}
	}

	if o.R == nil {
		o.R = &pedidoR{
			IDPedidoContasRecebers: related,
		}
	} else {
		o.R.IDPedidoContasRecebers = append(o.R.IDPedidoContasRecebers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &contasReceberR{
				IDPedidoPedido: o,
			}
		} else {
			rel.R.IDPedidoPedido = o
		}
	}
	return nil
}

// AddIDPedidoPedidoItens adds the given related objects to the existing relationships
// of the pedido, optionally inserting them as new records.
// Appends related to o.R.IDPedidoPedidoItens.
// Sets related.R.IDPedidoPedido appropriately.
func (o *Pedido) AddIDPedidoPedidoItens(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PedidoItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDPedido = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"pedido_itens\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_pedido"}),
				strmangle.WhereClause("\"", "\"", 2, pedidoItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDPedido = o.ID
		}
	}

	if o.R == nil {
		o.R = &pedidoR{
			IDPedidoPedidoItens: related,
		}
	} else {
		o.R.IDPedidoPedidoItens = append(o.R.IDPedidoPedidoItens, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pedidoItemR{
				IDPedidoPedido: o,
			}
		} else {
			rel.R.IDPedidoPedido = o
		}
	}
	return nil
}

// AddIDPedidoPedidoPagamentos adds the given related objects to the existing relationships
// of the pedido, optionally inserting them as new records.
// Appends related to o.R.IDPedidoPedidoPagamentos.
// Sets related.R.IDPedidoPedido appropriately.
func (o *Pedido) AddIDPedidoPedidoPagamentos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PedidoPagamento) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDPedido = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"pedido_pagamentos\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_pedido"}),
				strmangle.WhereClause("\"", "\"", 2, pedidoPagamentoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDPedido = o.ID
		}
	}

	if o.R == nil {
		o.R = &pedidoR{
			IDPedidoPedidoPagamentos: related,
		}
	} else {
		o.R.IDPedidoPedidoPagamentos = append(o.R.IDPedidoPedidoPagamentos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pedidoPagamentoR{
				IDPedidoPedido: o,
			}
		} else {
			rel.R.IDPedidoPedido = o
		}
	}
	return nil
}

// Pedidos retrieves all the records using an executor.
func Pedidos(mods ...qm.QueryMod) pedidoQuery {
	mods = append(mods, qm.From("\"pedidos\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"pedidos\".*"})
	}

	return pedidoQuery{q}
}

// FindPedido retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPedido(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Pedido, error) {
	pedidoObj := &Pedido{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pedidos\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pedidoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from pedidos")
	}

	if err = pedidoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return pedidoObj, err
	}

	return pedidoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Pedido) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no pedidos provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pedidoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pedidoInsertCacheMut.RLock()
	cache, cached := pedidoInsertCache[key]
	pedidoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pedidoAllColumns,
			pedidoColumnsWithDefault,
			pedidoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pedidoType, pedidoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pedidoType, pedidoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pedidos\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pedidos\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into pedidos")
	}

	if !cached {
		pedidoInsertCacheMut.Lock()
		pedidoInsertCache[key] = cache
		pedidoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Pedido.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Pedido) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pedidoUpdateCacheMut.RLock()
	cache, cached := pedidoUpdateCache[key]
	pedidoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pedidoAllColumns,
			pedidoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update pedidos, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pedidos\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pedidoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pedidoType, pedidoMapping, append(wl, pedidoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update pedidos row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for pedidos")
	}

	if !cached {
		pedidoUpdateCacheMut.Lock()
		pedidoUpdateCache[key] = cache
		pedidoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pedidoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for pedidos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for pedidos")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PedidoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pedidoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pedidos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pedidoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in pedido slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all pedido")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Pedido) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no pedidos provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pedidoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pedidoUpsertCacheMut.RLock()
	cache, cached := pedidoUpsertCache[key]
	pedidoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			pedidoAllColumns,
			pedidoColumnsWithDefault,
			pedidoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pedidoAllColumns,
			pedidoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert pedidos, could not build update column list")
		}

		ret := strmangle.SetComplement(pedidoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(pedidoPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert pedidos, could not build conflict column list")
			}

			conflict = make([]string, len(pedidoPrimaryKeyColumns))
			copy(conflict, pedidoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pedidos\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(pedidoType, pedidoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pedidoType, pedidoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert pedidos")
	}

	if !cached {
		pedidoUpsertCacheMut.Lock()
		pedidoUpsertCache[key] = cache
		pedidoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Pedido record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Pedido) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no Pedido provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pedidoPrimaryKeyMapping)
	sql := "DELETE FROM \"pedidos\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from pedidos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for pedidos")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pedidoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no pedidoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from pedidos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for pedidos")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PedidoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pedidoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pedidoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pedidos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pedidoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from pedido slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for pedidos")
	}

	if len(pedidoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Pedido) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPedido(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PedidoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PedidoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pedidoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pedidos\".* FROM \"pedidos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pedidoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in PedidoSlice")
	}

	*o = slice

	return nil
}

// PedidoExists checks if the Pedido row exists.
func PedidoExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pedidos\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if pedidos exists")
	}

	return exists, nil
}

// Exists checks if the Pedido row exists.
func (o *Pedido) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PedidoExists(ctx, exec, o.ID)
}
