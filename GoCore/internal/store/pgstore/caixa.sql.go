// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: caixa.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getCaixaAbertosPorTenant = `-- name: GetCaixaAbertosPorTenant :many
SELECT id, seq_id, tenant_id, id_operador, data_abertura, data_fechamento, valor_abertura, observacao_abertura, observacao_fechamento, status, created_at, updated_at, deleted_at FROM caixas WHERE tenant_id = $1 AND status = 'A' AND deleted_at IS NULL
`

func (q *Queries) GetCaixaAbertosPorTenant(ctx context.Context, tenantID uuid.UUID) ([]Caixa, error) {
	rows, err := q.db.Query(ctx, getCaixaAbertosPorTenant, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Caixa
	for rows.Next() {
		var i Caixa
		if err := rows.Scan(
			&i.ID,
			&i.SeqID,
			&i.TenantID,
			&i.IDOperador,
			&i.DataAbertura,
			&i.DataFechamento,
			&i.ValorAbertura,
			&i.ObservacaoAbertura,
			&i.ObservacaoFechamento,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCaixa = `-- name: InsertCaixa :one
INSERT INTO caixas (tenant_id, id_operador, valor_abertura, observacao_abertura, status)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, seq_id, tenant_id, id_operador, data_abertura, data_fechamento, valor_abertura, observacao_abertura, observacao_fechamento, status, created_at, updated_at, deleted_at
`

type InsertCaixaParams struct {
	TenantID           uuid.UUID      `json:"tenant_id"`
	IDOperador         uuid.UUID      `json:"id_operador"`
	ValorAbertura      pgtype.Numeric `json:"valor_abertura"`
	ObservacaoAbertura pgtype.Text    `json:"observacao_abertura"`
	Status             StatusCaixa    `json:"status"`
}

func (q *Queries) InsertCaixa(ctx context.Context, arg InsertCaixaParams) (Caixa, error) {
	row := q.db.QueryRow(ctx, insertCaixa,
		arg.TenantID,
		arg.IDOperador,
		arg.ValorAbertura,
		arg.ObservacaoAbertura,
		arg.Status,
	)
	var i Caixa
	err := row.Scan(
		&i.ID,
		&i.SeqID,
		&i.TenantID,
		&i.IDOperador,
		&i.DataAbertura,
		&i.DataFechamento,
		&i.ValorAbertura,
		&i.ObservacaoAbertura,
		&i.ObservacaoFechamento,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
