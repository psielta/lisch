// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PedidoSeqDiarium is an object representing the database table.
type PedidoSeqDiarium struct {
	TenantID string    `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	Dia      time.Time `boil:"dia" json:"dia" toml:"dia" yaml:"dia"`
	Seq      int       `boil:"seq" json:"seq" toml:"seq" yaml:"seq"`

	R *pedidoSeqDiariumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pedidoSeqDiariumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PedidoSeqDiariumColumns = struct {
	TenantID string
	Dia      string
	Seq      string
}{
	TenantID: "tenant_id",
	Dia:      "dia",
	Seq:      "seq",
}

var PedidoSeqDiariumTableColumns = struct {
	TenantID string
	Dia      string
	Seq      string
}{
	TenantID: "pedido_seq_diaria.tenant_id",
	Dia:      "pedido_seq_diaria.dia",
	Seq:      "pedido_seq_diaria.seq",
}

// Generated where

var PedidoSeqDiariumWhere = struct {
	TenantID whereHelperstring
	Dia      whereHelpertime_Time
	Seq      whereHelperint
}{
	TenantID: whereHelperstring{field: "\"pedido_seq_diaria\".\"tenant_id\""},
	Dia:      whereHelpertime_Time{field: "\"pedido_seq_diaria\".\"dia\""},
	Seq:      whereHelperint{field: "\"pedido_seq_diaria\".\"seq\""},
}

// PedidoSeqDiariumRels is where relationship names are stored.
var PedidoSeqDiariumRels = struct {
}{}

// pedidoSeqDiariumR is where relationships are stored.
type pedidoSeqDiariumR struct {
}

// NewStruct creates a new relationship struct
func (*pedidoSeqDiariumR) NewStruct() *pedidoSeqDiariumR {
	return &pedidoSeqDiariumR{}
}

// pedidoSeqDiariumL is where Load methods for each relationship are stored.
type pedidoSeqDiariumL struct{}

var (
	pedidoSeqDiariumAllColumns            = []string{"tenant_id", "dia", "seq"}
	pedidoSeqDiariumColumnsWithoutDefault = []string{"tenant_id", "dia", "seq"}
	pedidoSeqDiariumColumnsWithDefault    = []string{}
	pedidoSeqDiariumPrimaryKeyColumns     = []string{"tenant_id", "dia"}
	pedidoSeqDiariumGeneratedColumns      = []string{}
)

type (
	// PedidoSeqDiariumSlice is an alias for a slice of pointers to PedidoSeqDiarium.
	// This should almost always be used instead of []PedidoSeqDiarium.
	PedidoSeqDiariumSlice []*PedidoSeqDiarium
	// PedidoSeqDiariumHook is the signature for custom PedidoSeqDiarium hook methods
	PedidoSeqDiariumHook func(context.Context, boil.ContextExecutor, *PedidoSeqDiarium) error

	pedidoSeqDiariumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pedidoSeqDiariumType                 = reflect.TypeOf(&PedidoSeqDiarium{})
	pedidoSeqDiariumMapping              = queries.MakeStructMapping(pedidoSeqDiariumType)
	pedidoSeqDiariumPrimaryKeyMapping, _ = queries.BindMapping(pedidoSeqDiariumType, pedidoSeqDiariumMapping, pedidoSeqDiariumPrimaryKeyColumns)
	pedidoSeqDiariumInsertCacheMut       sync.RWMutex
	pedidoSeqDiariumInsertCache          = make(map[string]insertCache)
	pedidoSeqDiariumUpdateCacheMut       sync.RWMutex
	pedidoSeqDiariumUpdateCache          = make(map[string]updateCache)
	pedidoSeqDiariumUpsertCacheMut       sync.RWMutex
	pedidoSeqDiariumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pedidoSeqDiariumAfterSelectMu sync.Mutex
var pedidoSeqDiariumAfterSelectHooks []PedidoSeqDiariumHook

var pedidoSeqDiariumBeforeInsertMu sync.Mutex
var pedidoSeqDiariumBeforeInsertHooks []PedidoSeqDiariumHook
var pedidoSeqDiariumAfterInsertMu sync.Mutex
var pedidoSeqDiariumAfterInsertHooks []PedidoSeqDiariumHook

var pedidoSeqDiariumBeforeUpdateMu sync.Mutex
var pedidoSeqDiariumBeforeUpdateHooks []PedidoSeqDiariumHook
var pedidoSeqDiariumAfterUpdateMu sync.Mutex
var pedidoSeqDiariumAfterUpdateHooks []PedidoSeqDiariumHook

var pedidoSeqDiariumBeforeDeleteMu sync.Mutex
var pedidoSeqDiariumBeforeDeleteHooks []PedidoSeqDiariumHook
var pedidoSeqDiariumAfterDeleteMu sync.Mutex
var pedidoSeqDiariumAfterDeleteHooks []PedidoSeqDiariumHook

var pedidoSeqDiariumBeforeUpsertMu sync.Mutex
var pedidoSeqDiariumBeforeUpsertHooks []PedidoSeqDiariumHook
var pedidoSeqDiariumAfterUpsertMu sync.Mutex
var pedidoSeqDiariumAfterUpsertHooks []PedidoSeqDiariumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PedidoSeqDiarium) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoSeqDiariumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PedidoSeqDiarium) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoSeqDiariumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PedidoSeqDiarium) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoSeqDiariumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PedidoSeqDiarium) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoSeqDiariumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PedidoSeqDiarium) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoSeqDiariumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PedidoSeqDiarium) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoSeqDiariumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PedidoSeqDiarium) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoSeqDiariumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PedidoSeqDiarium) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoSeqDiariumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PedidoSeqDiarium) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pedidoSeqDiariumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPedidoSeqDiariumHook registers your hook function for all future operations.
func AddPedidoSeqDiariumHook(hookPoint boil.HookPoint, pedidoSeqDiariumHook PedidoSeqDiariumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		pedidoSeqDiariumAfterSelectMu.Lock()
		pedidoSeqDiariumAfterSelectHooks = append(pedidoSeqDiariumAfterSelectHooks, pedidoSeqDiariumHook)
		pedidoSeqDiariumAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		pedidoSeqDiariumBeforeInsertMu.Lock()
		pedidoSeqDiariumBeforeInsertHooks = append(pedidoSeqDiariumBeforeInsertHooks, pedidoSeqDiariumHook)
		pedidoSeqDiariumBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		pedidoSeqDiariumAfterInsertMu.Lock()
		pedidoSeqDiariumAfterInsertHooks = append(pedidoSeqDiariumAfterInsertHooks, pedidoSeqDiariumHook)
		pedidoSeqDiariumAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		pedidoSeqDiariumBeforeUpdateMu.Lock()
		pedidoSeqDiariumBeforeUpdateHooks = append(pedidoSeqDiariumBeforeUpdateHooks, pedidoSeqDiariumHook)
		pedidoSeqDiariumBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		pedidoSeqDiariumAfterUpdateMu.Lock()
		pedidoSeqDiariumAfterUpdateHooks = append(pedidoSeqDiariumAfterUpdateHooks, pedidoSeqDiariumHook)
		pedidoSeqDiariumAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		pedidoSeqDiariumBeforeDeleteMu.Lock()
		pedidoSeqDiariumBeforeDeleteHooks = append(pedidoSeqDiariumBeforeDeleteHooks, pedidoSeqDiariumHook)
		pedidoSeqDiariumBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		pedidoSeqDiariumAfterDeleteMu.Lock()
		pedidoSeqDiariumAfterDeleteHooks = append(pedidoSeqDiariumAfterDeleteHooks, pedidoSeqDiariumHook)
		pedidoSeqDiariumAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		pedidoSeqDiariumBeforeUpsertMu.Lock()
		pedidoSeqDiariumBeforeUpsertHooks = append(pedidoSeqDiariumBeforeUpsertHooks, pedidoSeqDiariumHook)
		pedidoSeqDiariumBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		pedidoSeqDiariumAfterUpsertMu.Lock()
		pedidoSeqDiariumAfterUpsertHooks = append(pedidoSeqDiariumAfterUpsertHooks, pedidoSeqDiariumHook)
		pedidoSeqDiariumAfterUpsertMu.Unlock()
	}
}

// One returns a single pedidoSeqDiarium record from the query.
func (q pedidoSeqDiariumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PedidoSeqDiarium, error) {
	o := &PedidoSeqDiarium{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for pedido_seq_diaria")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PedidoSeqDiarium records from the query.
func (q pedidoSeqDiariumQuery) All(ctx context.Context, exec boil.ContextExecutor) (PedidoSeqDiariumSlice, error) {
	var o []*PedidoSeqDiarium

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to PedidoSeqDiarium slice")
	}

	if len(pedidoSeqDiariumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PedidoSeqDiarium records in the query.
func (q pedidoSeqDiariumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count pedido_seq_diaria rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pedidoSeqDiariumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if pedido_seq_diaria exists")
	}

	return count > 0, nil
}

// PedidoSeqDiaria retrieves all the records using an executor.
func PedidoSeqDiaria(mods ...qm.QueryMod) pedidoSeqDiariumQuery {
	mods = append(mods, qm.From("\"pedido_seq_diaria\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"pedido_seq_diaria\".*"})
	}

	return pedidoSeqDiariumQuery{q}
}

// FindPedidoSeqDiarium retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPedidoSeqDiarium(ctx context.Context, exec boil.ContextExecutor, tenantID string, dia time.Time, selectCols ...string) (*PedidoSeqDiarium, error) {
	pedidoSeqDiariumObj := &PedidoSeqDiarium{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pedido_seq_diaria\" where \"tenant_id\"=$1 AND \"dia\"=$2", sel,
	)

	q := queries.Raw(query, tenantID, dia)

	err := q.Bind(ctx, exec, pedidoSeqDiariumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from pedido_seq_diaria")
	}

	if err = pedidoSeqDiariumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return pedidoSeqDiariumObj, err
	}

	return pedidoSeqDiariumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PedidoSeqDiarium) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no pedido_seq_diaria provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pedidoSeqDiariumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pedidoSeqDiariumInsertCacheMut.RLock()
	cache, cached := pedidoSeqDiariumInsertCache[key]
	pedidoSeqDiariumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pedidoSeqDiariumAllColumns,
			pedidoSeqDiariumColumnsWithDefault,
			pedidoSeqDiariumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pedidoSeqDiariumType, pedidoSeqDiariumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pedidoSeqDiariumType, pedidoSeqDiariumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pedido_seq_diaria\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pedido_seq_diaria\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into pedido_seq_diaria")
	}

	if !cached {
		pedidoSeqDiariumInsertCacheMut.Lock()
		pedidoSeqDiariumInsertCache[key] = cache
		pedidoSeqDiariumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PedidoSeqDiarium.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PedidoSeqDiarium) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pedidoSeqDiariumUpdateCacheMut.RLock()
	cache, cached := pedidoSeqDiariumUpdateCache[key]
	pedidoSeqDiariumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pedidoSeqDiariumAllColumns,
			pedidoSeqDiariumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update pedido_seq_diaria, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pedido_seq_diaria\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pedidoSeqDiariumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pedidoSeqDiariumType, pedidoSeqDiariumMapping, append(wl, pedidoSeqDiariumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update pedido_seq_diaria row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for pedido_seq_diaria")
	}

	if !cached {
		pedidoSeqDiariumUpdateCacheMut.Lock()
		pedidoSeqDiariumUpdateCache[key] = cache
		pedidoSeqDiariumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pedidoSeqDiariumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for pedido_seq_diaria")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for pedido_seq_diaria")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PedidoSeqDiariumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pedidoSeqDiariumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pedido_seq_diaria\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pedidoSeqDiariumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in pedidoSeqDiarium slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all pedidoSeqDiarium")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PedidoSeqDiarium) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no pedido_seq_diaria provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pedidoSeqDiariumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pedidoSeqDiariumUpsertCacheMut.RLock()
	cache, cached := pedidoSeqDiariumUpsertCache[key]
	pedidoSeqDiariumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			pedidoSeqDiariumAllColumns,
			pedidoSeqDiariumColumnsWithDefault,
			pedidoSeqDiariumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pedidoSeqDiariumAllColumns,
			pedidoSeqDiariumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert pedido_seq_diaria, could not build update column list")
		}

		ret := strmangle.SetComplement(pedidoSeqDiariumAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(pedidoSeqDiariumPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert pedido_seq_diaria, could not build conflict column list")
			}

			conflict = make([]string, len(pedidoSeqDiariumPrimaryKeyColumns))
			copy(conflict, pedidoSeqDiariumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pedido_seq_diaria\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(pedidoSeqDiariumType, pedidoSeqDiariumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pedidoSeqDiariumType, pedidoSeqDiariumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert pedido_seq_diaria")
	}

	if !cached {
		pedidoSeqDiariumUpsertCacheMut.Lock()
		pedidoSeqDiariumUpsertCache[key] = cache
		pedidoSeqDiariumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PedidoSeqDiarium record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PedidoSeqDiarium) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no PedidoSeqDiarium provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pedidoSeqDiariumPrimaryKeyMapping)
	sql := "DELETE FROM \"pedido_seq_diaria\" WHERE \"tenant_id\"=$1 AND \"dia\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from pedido_seq_diaria")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for pedido_seq_diaria")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pedidoSeqDiariumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no pedidoSeqDiariumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from pedido_seq_diaria")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for pedido_seq_diaria")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PedidoSeqDiariumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pedidoSeqDiariumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pedidoSeqDiariumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pedido_seq_diaria\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pedidoSeqDiariumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from pedidoSeqDiarium slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for pedido_seq_diaria")
	}

	if len(pedidoSeqDiariumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PedidoSeqDiarium) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPedidoSeqDiarium(ctx, exec, o.TenantID, o.Dia)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PedidoSeqDiariumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PedidoSeqDiariumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pedidoSeqDiariumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pedido_seq_diaria\".* FROM \"pedido_seq_diaria\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pedidoSeqDiariumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in PedidoSeqDiariumSlice")
	}

	*o = slice

	return nil
}

// PedidoSeqDiariumExists checks if the PedidoSeqDiarium row exists.
func PedidoSeqDiariumExists(ctx context.Context, exec boil.ContextExecutor, tenantID string, dia time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pedido_seq_diaria\" where \"tenant_id\"=$1 AND \"dia\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, tenantID, dia)
	}
	row := exec.QueryRowContext(ctx, sql, tenantID, dia)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if pedido_seq_diaria exists")
	}

	return exists, nil
}

// Exists checks if the PedidoSeqDiarium row exists.
func (o *PedidoSeqDiarium) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PedidoSeqDiariumExists(ctx, exec, o.TenantID, o.Dia)
}
