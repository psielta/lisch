// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// OutboxEvent is an object representing the database table.
type OutboxEvent struct {
	ID            int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	AggregateType string      `boil:"aggregate_type" json:"aggregate_type" toml:"aggregate_type" yaml:"aggregate_type"`
	AggregateID   string      `boil:"aggregate_id" json:"aggregate_id" toml:"aggregate_id" yaml:"aggregate_id"`
	EventType     string      `boil:"event_type" json:"event_type" toml:"event_type" yaml:"event_type"`
	Payload       types.JSON  `boil:"payload" json:"payload" toml:"payload" yaml:"payload"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Processed     bool        `boil:"processed" json:"processed" toml:"processed" yaml:"processed"`
	Attempts      int         `boil:"attempts" json:"attempts" toml:"attempts" yaml:"attempts"`
	LastError     null.String `boil:"last_error" json:"last_error,omitempty" toml:"last_error" yaml:"last_error,omitempty"`
	TenantID      string      `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	UserID        string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *outboxEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L outboxEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OutboxEventColumns = struct {
	ID            string
	AggregateType string
	AggregateID   string
	EventType     string
	Payload       string
	CreatedAt     string
	Processed     string
	Attempts      string
	LastError     string
	TenantID      string
	UserID        string
}{
	ID:            "id",
	AggregateType: "aggregate_type",
	AggregateID:   "aggregate_id",
	EventType:     "event_type",
	Payload:       "payload",
	CreatedAt:     "created_at",
	Processed:     "processed",
	Attempts:      "attempts",
	LastError:     "last_error",
	TenantID:      "tenant_id",
	UserID:        "user_id",
}

var OutboxEventTableColumns = struct {
	ID            string
	AggregateType string
	AggregateID   string
	EventType     string
	Payload       string
	CreatedAt     string
	Processed     string
	Attempts      string
	LastError     string
	TenantID      string
	UserID        string
}{
	ID:            "outbox_event.id",
	AggregateType: "outbox_event.aggregate_type",
	AggregateID:   "outbox_event.aggregate_id",
	EventType:     "outbox_event.event_type",
	Payload:       "outbox_event.payload",
	CreatedAt:     "outbox_event.created_at",
	Processed:     "outbox_event.processed",
	Attempts:      "outbox_event.attempts",
	LastError:     "outbox_event.last_error",
	TenantID:      "outbox_event.tenant_id",
	UserID:        "outbox_event.user_id",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var OutboxEventWhere = struct {
	ID            whereHelperint64
	AggregateType whereHelperstring
	AggregateID   whereHelperstring
	EventType     whereHelperstring
	Payload       whereHelpertypes_JSON
	CreatedAt     whereHelpertime_Time
	Processed     whereHelperbool
	Attempts      whereHelperint
	LastError     whereHelpernull_String
	TenantID      whereHelperstring
	UserID        whereHelperstring
}{
	ID:            whereHelperint64{field: "\"outbox_event\".\"id\""},
	AggregateType: whereHelperstring{field: "\"outbox_event\".\"aggregate_type\""},
	AggregateID:   whereHelperstring{field: "\"outbox_event\".\"aggregate_id\""},
	EventType:     whereHelperstring{field: "\"outbox_event\".\"event_type\""},
	Payload:       whereHelpertypes_JSON{field: "\"outbox_event\".\"payload\""},
	CreatedAt:     whereHelpertime_Time{field: "\"outbox_event\".\"created_at\""},
	Processed:     whereHelperbool{field: "\"outbox_event\".\"processed\""},
	Attempts:      whereHelperint{field: "\"outbox_event\".\"attempts\""},
	LastError:     whereHelpernull_String{field: "\"outbox_event\".\"last_error\""},
	TenantID:      whereHelperstring{field: "\"outbox_event\".\"tenant_id\""},
	UserID:        whereHelperstring{field: "\"outbox_event\".\"user_id\""},
}

// OutboxEventRels is where relationship names are stored.
var OutboxEventRels = struct {
	Tenant string
	User   string
}{
	Tenant: "Tenant",
	User:   "User",
}

// outboxEventR is where relationships are stored.
type outboxEventR struct {
	Tenant *Tenant `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
	User   *User   `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*outboxEventR) NewStruct() *outboxEventR {
	return &outboxEventR{}
}

func (r *outboxEventR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}
	return r.Tenant
}

func (r *outboxEventR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// outboxEventL is where Load methods for each relationship are stored.
type outboxEventL struct{}

var (
	outboxEventAllColumns            = []string{"id", "aggregate_type", "aggregate_id", "event_type", "payload", "created_at", "processed", "attempts", "last_error", "tenant_id", "user_id"}
	outboxEventColumnsWithoutDefault = []string{"aggregate_type", "aggregate_id", "event_type", "payload", "tenant_id", "user_id"}
	outboxEventColumnsWithDefault    = []string{"id", "created_at", "processed", "attempts", "last_error"}
	outboxEventPrimaryKeyColumns     = []string{"id"}
	outboxEventGeneratedColumns      = []string{"id"}
)

type (
	// OutboxEventSlice is an alias for a slice of pointers to OutboxEvent.
	// This should almost always be used instead of []OutboxEvent.
	OutboxEventSlice []*OutboxEvent
	// OutboxEventHook is the signature for custom OutboxEvent hook methods
	OutboxEventHook func(context.Context, boil.ContextExecutor, *OutboxEvent) error

	outboxEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	outboxEventType                 = reflect.TypeOf(&OutboxEvent{})
	outboxEventMapping              = queries.MakeStructMapping(outboxEventType)
	outboxEventPrimaryKeyMapping, _ = queries.BindMapping(outboxEventType, outboxEventMapping, outboxEventPrimaryKeyColumns)
	outboxEventInsertCacheMut       sync.RWMutex
	outboxEventInsertCache          = make(map[string]insertCache)
	outboxEventUpdateCacheMut       sync.RWMutex
	outboxEventUpdateCache          = make(map[string]updateCache)
	outboxEventUpsertCacheMut       sync.RWMutex
	outboxEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var outboxEventAfterSelectMu sync.Mutex
var outboxEventAfterSelectHooks []OutboxEventHook

var outboxEventBeforeInsertMu sync.Mutex
var outboxEventBeforeInsertHooks []OutboxEventHook
var outboxEventAfterInsertMu sync.Mutex
var outboxEventAfterInsertHooks []OutboxEventHook

var outboxEventBeforeUpdateMu sync.Mutex
var outboxEventBeforeUpdateHooks []OutboxEventHook
var outboxEventAfterUpdateMu sync.Mutex
var outboxEventAfterUpdateHooks []OutboxEventHook

var outboxEventBeforeDeleteMu sync.Mutex
var outboxEventBeforeDeleteHooks []OutboxEventHook
var outboxEventAfterDeleteMu sync.Mutex
var outboxEventAfterDeleteHooks []OutboxEventHook

var outboxEventBeforeUpsertMu sync.Mutex
var outboxEventBeforeUpsertHooks []OutboxEventHook
var outboxEventAfterUpsertMu sync.Mutex
var outboxEventAfterUpsertHooks []OutboxEventHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OutboxEvent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outboxEventAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OutboxEvent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outboxEventBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OutboxEvent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outboxEventAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OutboxEvent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outboxEventBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OutboxEvent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outboxEventAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OutboxEvent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outboxEventBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OutboxEvent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outboxEventAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OutboxEvent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outboxEventBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OutboxEvent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range outboxEventAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOutboxEventHook registers your hook function for all future operations.
func AddOutboxEventHook(hookPoint boil.HookPoint, outboxEventHook OutboxEventHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		outboxEventAfterSelectMu.Lock()
		outboxEventAfterSelectHooks = append(outboxEventAfterSelectHooks, outboxEventHook)
		outboxEventAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		outboxEventBeforeInsertMu.Lock()
		outboxEventBeforeInsertHooks = append(outboxEventBeforeInsertHooks, outboxEventHook)
		outboxEventBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		outboxEventAfterInsertMu.Lock()
		outboxEventAfterInsertHooks = append(outboxEventAfterInsertHooks, outboxEventHook)
		outboxEventAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		outboxEventBeforeUpdateMu.Lock()
		outboxEventBeforeUpdateHooks = append(outboxEventBeforeUpdateHooks, outboxEventHook)
		outboxEventBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		outboxEventAfterUpdateMu.Lock()
		outboxEventAfterUpdateHooks = append(outboxEventAfterUpdateHooks, outboxEventHook)
		outboxEventAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		outboxEventBeforeDeleteMu.Lock()
		outboxEventBeforeDeleteHooks = append(outboxEventBeforeDeleteHooks, outboxEventHook)
		outboxEventBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		outboxEventAfterDeleteMu.Lock()
		outboxEventAfterDeleteHooks = append(outboxEventAfterDeleteHooks, outboxEventHook)
		outboxEventAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		outboxEventBeforeUpsertMu.Lock()
		outboxEventBeforeUpsertHooks = append(outboxEventBeforeUpsertHooks, outboxEventHook)
		outboxEventBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		outboxEventAfterUpsertMu.Lock()
		outboxEventAfterUpsertHooks = append(outboxEventAfterUpsertHooks, outboxEventHook)
		outboxEventAfterUpsertMu.Unlock()
	}
}

// One returns a single outboxEvent record from the query.
func (q outboxEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OutboxEvent, error) {
	o := &OutboxEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for outbox_event")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OutboxEvent records from the query.
func (q outboxEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (OutboxEventSlice, error) {
	var o []*OutboxEvent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to OutboxEvent slice")
	}

	if len(outboxEventAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OutboxEvent records in the query.
func (q outboxEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count outbox_event rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q outboxEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if outbox_event exists")
	}

	return count > 0, nil
}

// Tenant pointed to by the foreign key.
func (o *OutboxEvent) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// User pointed to by the foreign key.
func (o *OutboxEvent) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (outboxEventL) LoadTenant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOutboxEvent interface{}, mods queries.Applicator) error {
	var slice []*OutboxEvent
	var object *OutboxEvent

	if singular {
		var ok bool
		object, ok = maybeOutboxEvent.(*OutboxEvent)
		if !ok {
			object = new(OutboxEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOutboxEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOutboxEvent))
			}
		}
	} else {
		s, ok := maybeOutboxEvent.(*[]*OutboxEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOutboxEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOutboxEvent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &outboxEventR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &outboxEventR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.OutboxEvents = append(foreign.R.OutboxEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.OutboxEvents = append(foreign.R.OutboxEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (outboxEventL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOutboxEvent interface{}, mods queries.Applicator) error {
	var slice []*OutboxEvent
	var object *OutboxEvent

	if singular {
		var ok bool
		object, ok = maybeOutboxEvent.(*OutboxEvent)
		if !ok {
			object = new(OutboxEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOutboxEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOutboxEvent))
			}
		}
	} else {
		s, ok := maybeOutboxEvent.(*[]*OutboxEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOutboxEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOutboxEvent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &outboxEventR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &outboxEventR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OutboxEvents = append(foreign.R.OutboxEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OutboxEvents = append(foreign.R.OutboxEvents, local)
				break
			}
		}
	}

	return nil
}

// SetTenant of the outboxEvent to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.OutboxEvents.
func (o *OutboxEvent) SetTenant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"outbox_event\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, outboxEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &outboxEventR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			OutboxEvents: OutboxEventSlice{o},
		}
	} else {
		related.R.OutboxEvents = append(related.R.OutboxEvents, o)
	}

	return nil
}

// SetUser of the outboxEvent to the related item.
// Sets o.R.User to related.
// Adds o to related.R.OutboxEvents.
func (o *OutboxEvent) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"outbox_event\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, outboxEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &outboxEventR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			OutboxEvents: OutboxEventSlice{o},
		}
	} else {
		related.R.OutboxEvents = append(related.R.OutboxEvents, o)
	}

	return nil
}

// OutboxEvents retrieves all the records using an executor.
func OutboxEvents(mods ...qm.QueryMod) outboxEventQuery {
	mods = append(mods, qm.From("\"outbox_event\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"outbox_event\".*"})
	}

	return outboxEventQuery{q}
}

// FindOutboxEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOutboxEvent(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*OutboxEvent, error) {
	outboxEventObj := &OutboxEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"outbox_event\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, outboxEventObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from outbox_event")
	}

	if err = outboxEventObj.doAfterSelectHooks(ctx, exec); err != nil {
		return outboxEventObj, err
	}

	return outboxEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OutboxEvent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no outbox_event provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(outboxEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	outboxEventInsertCacheMut.RLock()
	cache, cached := outboxEventInsertCache[key]
	outboxEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			outboxEventAllColumns,
			outboxEventColumnsWithDefault,
			outboxEventColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, outboxEventGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(outboxEventType, outboxEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(outboxEventType, outboxEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"outbox_event\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"outbox_event\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into outbox_event")
	}

	if !cached {
		outboxEventInsertCacheMut.Lock()
		outboxEventInsertCache[key] = cache
		outboxEventInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OutboxEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OutboxEvent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	outboxEventUpdateCacheMut.RLock()
	cache, cached := outboxEventUpdateCache[key]
	outboxEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			outboxEventAllColumns,
			outboxEventPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, outboxEventGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update outbox_event, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"outbox_event\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, outboxEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(outboxEventType, outboxEventMapping, append(wl, outboxEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update outbox_event row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for outbox_event")
	}

	if !cached {
		outboxEventUpdateCacheMut.Lock()
		outboxEventUpdateCache[key] = cache
		outboxEventUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q outboxEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for outbox_event")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for outbox_event")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OutboxEventSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outboxEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"outbox_event\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, outboxEventPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in outboxEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all outboxEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OutboxEvent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no outbox_event provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(outboxEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	outboxEventUpsertCacheMut.RLock()
	cache, cached := outboxEventUpsertCache[key]
	outboxEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			outboxEventAllColumns,
			outboxEventColumnsWithDefault,
			outboxEventColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			outboxEventAllColumns,
			outboxEventPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, outboxEventGeneratedColumns)
		update = strmangle.SetComplement(update, outboxEventGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert outbox_event, could not build update column list")
		}

		ret := strmangle.SetComplement(outboxEventAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(outboxEventPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert outbox_event, could not build conflict column list")
			}

			conflict = make([]string, len(outboxEventPrimaryKeyColumns))
			copy(conflict, outboxEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"outbox_event\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(outboxEventType, outboxEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(outboxEventType, outboxEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert outbox_event")
	}

	if !cached {
		outboxEventUpsertCacheMut.Lock()
		outboxEventUpsertCache[key] = cache
		outboxEventUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OutboxEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OutboxEvent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no OutboxEvent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), outboxEventPrimaryKeyMapping)
	sql := "DELETE FROM \"outbox_event\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from outbox_event")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for outbox_event")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q outboxEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no outboxEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from outbox_event")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for outbox_event")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OutboxEventSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(outboxEventBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outboxEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"outbox_event\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, outboxEventPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from outboxEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for outbox_event")
	}

	if len(outboxEventAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OutboxEvent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOutboxEvent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OutboxEventSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OutboxEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outboxEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"outbox_event\".* FROM \"outbox_event\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, outboxEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in OutboxEventSlice")
	}

	*o = slice

	return nil
}

// OutboxEventExists checks if the OutboxEvent row exists.
func OutboxEventExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"outbox_event\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if outbox_event exists")
	}

	return exists, nil
}

// Exists checks if the OutboxEvent row exists.
func (o *OutboxEvent) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OutboxEventExists(ctx, exec, o.ID)
}
