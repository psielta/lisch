// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CategoriaAdicionalOpcoesView is an object representing the database table.
type CategoriaAdicionalOpcoesView struct {
	ID                   null.String       `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	SeqID                null.Int64        `boil:"seq_id" json:"seq_id,omitempty" toml:"seq_id" yaml:"seq_id,omitempty"`
	IDCategoriaAdicional null.String       `boil:"id_categoria_adicional" json:"id_categoria_adicional,omitempty" toml:"id_categoria_adicional" yaml:"id_categoria_adicional,omitempty"`
	Codigo               null.String       `boil:"codigo" json:"codigo,omitempty" toml:"codigo" yaml:"codigo,omitempty"`
	Nome                 null.String       `boil:"nome" json:"nome,omitempty" toml:"nome" yaml:"nome,omitempty"`
	Valor                types.NullDecimal `boil:"valor" json:"valor,omitempty" toml:"valor" yaml:"valor,omitempty"`
	Status               null.Int16        `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	CreatedAt            null.Time         `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt            null.Time         `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt            null.Time         `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
}

var CategoriaAdicionalOpcoesViewColumns = struct {
	ID                   string
	SeqID                string
	IDCategoriaAdicional string
	Codigo               string
	Nome                 string
	Valor                string
	Status               string
	CreatedAt            string
	UpdatedAt            string
	DeletedAt            string
}{
	ID:                   "id",
	SeqID:                "seq_id",
	IDCategoriaAdicional: "id_categoria_adicional",
	Codigo:               "codigo",
	Nome:                 "nome",
	Valor:                "valor",
	Status:               "status",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	DeletedAt:            "deleted_at",
}

var CategoriaAdicionalOpcoesViewTableColumns = struct {
	ID                   string
	SeqID                string
	IDCategoriaAdicional string
	Codigo               string
	Nome                 string
	Valor                string
	Status               string
	CreatedAt            string
	UpdatedAt            string
	DeletedAt            string
}{
	ID:                   "categoria_adicional_opcoes_view.id",
	SeqID:                "categoria_adicional_opcoes_view.seq_id",
	IDCategoriaAdicional: "categoria_adicional_opcoes_view.id_categoria_adicional",
	Codigo:               "categoria_adicional_opcoes_view.codigo",
	Nome:                 "categoria_adicional_opcoes_view.nome",
	Valor:                "categoria_adicional_opcoes_view.valor",
	Status:               "categoria_adicional_opcoes_view.status",
	CreatedAt:            "categoria_adicional_opcoes_view.created_at",
	UpdatedAt:            "categoria_adicional_opcoes_view.updated_at",
	DeletedAt:            "categoria_adicional_opcoes_view.deleted_at",
}

// Generated where

var CategoriaAdicionalOpcoesViewWhere = struct {
	ID                   whereHelpernull_String
	SeqID                whereHelpernull_Int64
	IDCategoriaAdicional whereHelpernull_String
	Codigo               whereHelpernull_String
	Nome                 whereHelpernull_String
	Valor                whereHelpertypes_NullDecimal
	Status               whereHelpernull_Int16
	CreatedAt            whereHelpernull_Time
	UpdatedAt            whereHelpernull_Time
	DeletedAt            whereHelpernull_Time
}{
	ID:                   whereHelpernull_String{field: "\"categoria_adicional_opcoes_view\".\"id\""},
	SeqID:                whereHelpernull_Int64{field: "\"categoria_adicional_opcoes_view\".\"seq_id\""},
	IDCategoriaAdicional: whereHelpernull_String{field: "\"categoria_adicional_opcoes_view\".\"id_categoria_adicional\""},
	Codigo:               whereHelpernull_String{field: "\"categoria_adicional_opcoes_view\".\"codigo\""},
	Nome:                 whereHelpernull_String{field: "\"categoria_adicional_opcoes_view\".\"nome\""},
	Valor:                whereHelpertypes_NullDecimal{field: "\"categoria_adicional_opcoes_view\".\"valor\""},
	Status:               whereHelpernull_Int16{field: "\"categoria_adicional_opcoes_view\".\"status\""},
	CreatedAt:            whereHelpernull_Time{field: "\"categoria_adicional_opcoes_view\".\"created_at\""},
	UpdatedAt:            whereHelpernull_Time{field: "\"categoria_adicional_opcoes_view\".\"updated_at\""},
	DeletedAt:            whereHelpernull_Time{field: "\"categoria_adicional_opcoes_view\".\"deleted_at\""},
}

var (
	categoriaAdicionalOpcoesViewAllColumns            = []string{"id", "seq_id", "id_categoria_adicional", "codigo", "nome", "valor", "status", "created_at", "updated_at", "deleted_at"}
	categoriaAdicionalOpcoesViewColumnsWithoutDefault = []string{}
	categoriaAdicionalOpcoesViewColumnsWithDefault    = []string{"id", "seq_id", "id_categoria_adicional", "codigo", "nome", "valor", "status", "created_at", "updated_at", "deleted_at"}
	categoriaAdicionalOpcoesViewPrimaryKeyColumns     = []string{}
	categoriaAdicionalOpcoesViewGeneratedColumns      = []string{}
)

type (
	// CategoriaAdicionalOpcoesViewSlice is an alias for a slice of pointers to CategoriaAdicionalOpcoesView.
	// This should almost always be used instead of []CategoriaAdicionalOpcoesView.
	CategoriaAdicionalOpcoesViewSlice []*CategoriaAdicionalOpcoesView
	// CategoriaAdicionalOpcoesViewHook is the signature for custom CategoriaAdicionalOpcoesView hook methods
	CategoriaAdicionalOpcoesViewHook func(context.Context, boil.ContextExecutor, *CategoriaAdicionalOpcoesView) error

	categoriaAdicionalOpcoesViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	categoriaAdicionalOpcoesViewType           = reflect.TypeOf(&CategoriaAdicionalOpcoesView{})
	categoriaAdicionalOpcoesViewMapping        = queries.MakeStructMapping(categoriaAdicionalOpcoesViewType)
	categoriaAdicionalOpcoesViewInsertCacheMut sync.RWMutex
	categoriaAdicionalOpcoesViewInsertCache    = make(map[string]insertCache)
	categoriaAdicionalOpcoesViewUpdateCacheMut sync.RWMutex
	categoriaAdicionalOpcoesViewUpdateCache    = make(map[string]updateCache)
	categoriaAdicionalOpcoesViewUpsertCacheMut sync.RWMutex
	categoriaAdicionalOpcoesViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var categoriaAdicionalOpcoesViewAfterSelectMu sync.Mutex
var categoriaAdicionalOpcoesViewAfterSelectHooks []CategoriaAdicionalOpcoesViewHook

var categoriaAdicionalOpcoesViewBeforeInsertMu sync.Mutex
var categoriaAdicionalOpcoesViewBeforeInsertHooks []CategoriaAdicionalOpcoesViewHook
var categoriaAdicionalOpcoesViewAfterInsertMu sync.Mutex
var categoriaAdicionalOpcoesViewAfterInsertHooks []CategoriaAdicionalOpcoesViewHook

var categoriaAdicionalOpcoesViewBeforeUpsertMu sync.Mutex
var categoriaAdicionalOpcoesViewBeforeUpsertHooks []CategoriaAdicionalOpcoesViewHook
var categoriaAdicionalOpcoesViewAfterUpsertMu sync.Mutex
var categoriaAdicionalOpcoesViewAfterUpsertHooks []CategoriaAdicionalOpcoesViewHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CategoriaAdicionalOpcoesView) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalOpcoesViewAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CategoriaAdicionalOpcoesView) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalOpcoesViewBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CategoriaAdicionalOpcoesView) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalOpcoesViewAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CategoriaAdicionalOpcoesView) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalOpcoesViewBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CategoriaAdicionalOpcoesView) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaAdicionalOpcoesViewAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCategoriaAdicionalOpcoesViewHook registers your hook function for all future operations.
func AddCategoriaAdicionalOpcoesViewHook(hookPoint boil.HookPoint, categoriaAdicionalOpcoesViewHook CategoriaAdicionalOpcoesViewHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		categoriaAdicionalOpcoesViewAfterSelectMu.Lock()
		categoriaAdicionalOpcoesViewAfterSelectHooks = append(categoriaAdicionalOpcoesViewAfterSelectHooks, categoriaAdicionalOpcoesViewHook)
		categoriaAdicionalOpcoesViewAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		categoriaAdicionalOpcoesViewBeforeInsertMu.Lock()
		categoriaAdicionalOpcoesViewBeforeInsertHooks = append(categoriaAdicionalOpcoesViewBeforeInsertHooks, categoriaAdicionalOpcoesViewHook)
		categoriaAdicionalOpcoesViewBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		categoriaAdicionalOpcoesViewAfterInsertMu.Lock()
		categoriaAdicionalOpcoesViewAfterInsertHooks = append(categoriaAdicionalOpcoesViewAfterInsertHooks, categoriaAdicionalOpcoesViewHook)
		categoriaAdicionalOpcoesViewAfterInsertMu.Unlock()
	case boil.BeforeUpsertHook:
		categoriaAdicionalOpcoesViewBeforeUpsertMu.Lock()
		categoriaAdicionalOpcoesViewBeforeUpsertHooks = append(categoriaAdicionalOpcoesViewBeforeUpsertHooks, categoriaAdicionalOpcoesViewHook)
		categoriaAdicionalOpcoesViewBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		categoriaAdicionalOpcoesViewAfterUpsertMu.Lock()
		categoriaAdicionalOpcoesViewAfterUpsertHooks = append(categoriaAdicionalOpcoesViewAfterUpsertHooks, categoriaAdicionalOpcoesViewHook)
		categoriaAdicionalOpcoesViewAfterUpsertMu.Unlock()
	}
}

// One returns a single categoriaAdicionalOpcoesView record from the query.
func (q categoriaAdicionalOpcoesViewQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CategoriaAdicionalOpcoesView, error) {
	o := &CategoriaAdicionalOpcoesView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for categoria_adicional_opcoes_view")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CategoriaAdicionalOpcoesView records from the query.
func (q categoriaAdicionalOpcoesViewQuery) All(ctx context.Context, exec boil.ContextExecutor) (CategoriaAdicionalOpcoesViewSlice, error) {
	var o []*CategoriaAdicionalOpcoesView

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to CategoriaAdicionalOpcoesView slice")
	}

	if len(categoriaAdicionalOpcoesViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CategoriaAdicionalOpcoesView records in the query.
func (q categoriaAdicionalOpcoesViewQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count categoria_adicional_opcoes_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q categoriaAdicionalOpcoesViewQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if categoria_adicional_opcoes_view exists")
	}

	return count > 0, nil
}

// CategoriaAdicionalOpcoesViews retrieves all the records using an executor.
func CategoriaAdicionalOpcoesViews(mods ...qm.QueryMod) categoriaAdicionalOpcoesViewQuery {
	mods = append(mods, qm.From("\"categoria_adicional_opcoes_view\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"categoria_adicional_opcoes_view\".*"})
	}

	return categoriaAdicionalOpcoesViewQuery{q}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CategoriaAdicionalOpcoesView) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no categoria_adicional_opcoes_view provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(categoriaAdicionalOpcoesViewColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	categoriaAdicionalOpcoesViewInsertCacheMut.RLock()
	cache, cached := categoriaAdicionalOpcoesViewInsertCache[key]
	categoriaAdicionalOpcoesViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			categoriaAdicionalOpcoesViewAllColumns,
			categoriaAdicionalOpcoesViewColumnsWithDefault,
			categoriaAdicionalOpcoesViewColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(categoriaAdicionalOpcoesViewType, categoriaAdicionalOpcoesViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(categoriaAdicionalOpcoesViewType, categoriaAdicionalOpcoesViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"categoria_adicional_opcoes_view\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"categoria_adicional_opcoes_view\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into categoria_adicional_opcoes_view")
	}

	if !cached {
		categoriaAdicionalOpcoesViewInsertCacheMut.Lock()
		categoriaAdicionalOpcoesViewInsertCache[key] = cache
		categoriaAdicionalOpcoesViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CategoriaAdicionalOpcoesView) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no categoria_adicional_opcoes_view provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(categoriaAdicionalOpcoesViewColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	categoriaAdicionalOpcoesViewUpsertCacheMut.RLock()
	cache, cached := categoriaAdicionalOpcoesViewUpsertCache[key]
	categoriaAdicionalOpcoesViewUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			categoriaAdicionalOpcoesViewAllColumns,
			categoriaAdicionalOpcoesViewColumnsWithDefault,
			categoriaAdicionalOpcoesViewColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			categoriaAdicionalOpcoesViewAllColumns,
			categoriaAdicionalOpcoesViewPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert categoria_adicional_opcoes_view, could not build update column list")
		}

		ret := strmangle.SetComplement(categoriaAdicionalOpcoesViewAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(categoriaAdicionalOpcoesViewPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert categoria_adicional_opcoes_view, could not build conflict column list")
			}

			conflict = make([]string, len(categoriaAdicionalOpcoesViewPrimaryKeyColumns))
			copy(conflict, categoriaAdicionalOpcoesViewPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"categoria_adicional_opcoes_view\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(categoriaAdicionalOpcoesViewType, categoriaAdicionalOpcoesViewMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(categoriaAdicionalOpcoesViewType, categoriaAdicionalOpcoesViewMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert categoria_adicional_opcoes_view")
	}

	if !cached {
		categoriaAdicionalOpcoesViewUpsertCacheMut.Lock()
		categoriaAdicionalOpcoesViewUpsertCache[key] = cache
		categoriaAdicionalOpcoesViewUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
