// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Culinaria is an object representing the database table.
type Culinaria struct {
	IDCulinaria int    `boil:"id_culinaria" json:"id_culinaria" toml:"id_culinaria" yaml:"id_culinaria"`
	Nome        string `boil:"nome" json:"nome" toml:"nome" yaml:"nome"`
	MeioMeio    int16  `boil:"meio_meio" json:"meio_meio" toml:"meio_meio" yaml:"meio_meio"`

	R *culinariaR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L culinariaL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CulinariaColumns = struct {
	IDCulinaria string
	Nome        string
	MeioMeio    string
}{
	IDCulinaria: "id_culinaria",
	Nome:        "nome",
	MeioMeio:    "meio_meio",
}

var CulinariaTableColumns = struct {
	IDCulinaria string
	Nome        string
	MeioMeio    string
}{
	IDCulinaria: "culinarias.id_culinaria",
	Nome:        "culinarias.nome",
	MeioMeio:    "culinarias.meio_meio",
}

// Generated where

var CulinariaWhere = struct {
	IDCulinaria whereHelperint
	Nome        whereHelperstring
	MeioMeio    whereHelperint16
}{
	IDCulinaria: whereHelperint{field: "\"culinarias\".\"id_culinaria\""},
	Nome:        whereHelperstring{field: "\"culinarias\".\"nome\""},
	MeioMeio:    whereHelperint16{field: "\"culinarias\".\"meio_meio\""},
}

// CulinariaRels is where relationship names are stored.
var CulinariaRels = struct {
	Categorias string
}{
	Categorias: "Categorias",
}

// culinariaR is where relationships are stored.
type culinariaR struct {
	Categorias CategoriaSlice `boil:"Categorias" json:"Categorias" toml:"Categorias" yaml:"Categorias"`
}

// NewStruct creates a new relationship struct
func (*culinariaR) NewStruct() *culinariaR {
	return &culinariaR{}
}

func (r *culinariaR) GetCategorias() CategoriaSlice {
	if r == nil {
		return nil
	}
	return r.Categorias
}

// culinariaL is where Load methods for each relationship are stored.
type culinariaL struct{}

var (
	culinariaAllColumns            = []string{"id_culinaria", "nome", "meio_meio"}
	culinariaColumnsWithoutDefault = []string{"id_culinaria", "nome"}
	culinariaColumnsWithDefault    = []string{"meio_meio"}
	culinariaPrimaryKeyColumns     = []string{"id_culinaria"}
	culinariaGeneratedColumns      = []string{}
)

type (
	// CulinariaSlice is an alias for a slice of pointers to Culinaria.
	// This should almost always be used instead of []Culinaria.
	CulinariaSlice []*Culinaria
	// CulinariaHook is the signature for custom Culinaria hook methods
	CulinariaHook func(context.Context, boil.ContextExecutor, *Culinaria) error

	culinariaQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	culinariaType                 = reflect.TypeOf(&Culinaria{})
	culinariaMapping              = queries.MakeStructMapping(culinariaType)
	culinariaPrimaryKeyMapping, _ = queries.BindMapping(culinariaType, culinariaMapping, culinariaPrimaryKeyColumns)
	culinariaInsertCacheMut       sync.RWMutex
	culinariaInsertCache          = make(map[string]insertCache)
	culinariaUpdateCacheMut       sync.RWMutex
	culinariaUpdateCache          = make(map[string]updateCache)
	culinariaUpsertCacheMut       sync.RWMutex
	culinariaUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var culinariaAfterSelectMu sync.Mutex
var culinariaAfterSelectHooks []CulinariaHook

var culinariaBeforeInsertMu sync.Mutex
var culinariaBeforeInsertHooks []CulinariaHook
var culinariaAfterInsertMu sync.Mutex
var culinariaAfterInsertHooks []CulinariaHook

var culinariaBeforeUpdateMu sync.Mutex
var culinariaBeforeUpdateHooks []CulinariaHook
var culinariaAfterUpdateMu sync.Mutex
var culinariaAfterUpdateHooks []CulinariaHook

var culinariaBeforeDeleteMu sync.Mutex
var culinariaBeforeDeleteHooks []CulinariaHook
var culinariaAfterDeleteMu sync.Mutex
var culinariaAfterDeleteHooks []CulinariaHook

var culinariaBeforeUpsertMu sync.Mutex
var culinariaBeforeUpsertHooks []CulinariaHook
var culinariaAfterUpsertMu sync.Mutex
var culinariaAfterUpsertHooks []CulinariaHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Culinaria) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range culinariaAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Culinaria) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range culinariaBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Culinaria) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range culinariaAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Culinaria) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range culinariaBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Culinaria) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range culinariaAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Culinaria) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range culinariaBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Culinaria) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range culinariaAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Culinaria) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range culinariaBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Culinaria) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range culinariaAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCulinariaHook registers your hook function for all future operations.
func AddCulinariaHook(hookPoint boil.HookPoint, culinariaHook CulinariaHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		culinariaAfterSelectMu.Lock()
		culinariaAfterSelectHooks = append(culinariaAfterSelectHooks, culinariaHook)
		culinariaAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		culinariaBeforeInsertMu.Lock()
		culinariaBeforeInsertHooks = append(culinariaBeforeInsertHooks, culinariaHook)
		culinariaBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		culinariaAfterInsertMu.Lock()
		culinariaAfterInsertHooks = append(culinariaAfterInsertHooks, culinariaHook)
		culinariaAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		culinariaBeforeUpdateMu.Lock()
		culinariaBeforeUpdateHooks = append(culinariaBeforeUpdateHooks, culinariaHook)
		culinariaBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		culinariaAfterUpdateMu.Lock()
		culinariaAfterUpdateHooks = append(culinariaAfterUpdateHooks, culinariaHook)
		culinariaAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		culinariaBeforeDeleteMu.Lock()
		culinariaBeforeDeleteHooks = append(culinariaBeforeDeleteHooks, culinariaHook)
		culinariaBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		culinariaAfterDeleteMu.Lock()
		culinariaAfterDeleteHooks = append(culinariaAfterDeleteHooks, culinariaHook)
		culinariaAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		culinariaBeforeUpsertMu.Lock()
		culinariaBeforeUpsertHooks = append(culinariaBeforeUpsertHooks, culinariaHook)
		culinariaBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		culinariaAfterUpsertMu.Lock()
		culinariaAfterUpsertHooks = append(culinariaAfterUpsertHooks, culinariaHook)
		culinariaAfterUpsertMu.Unlock()
	}
}

// One returns a single culinaria record from the query.
func (q culinariaQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Culinaria, error) {
	o := &Culinaria{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for culinarias")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Culinaria records from the query.
func (q culinariaQuery) All(ctx context.Context, exec boil.ContextExecutor) (CulinariaSlice, error) {
	var o []*Culinaria

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to Culinaria slice")
	}

	if len(culinariaAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Culinaria records in the query.
func (q culinariaQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count culinarias rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q culinariaQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if culinarias exists")
	}

	return count > 0, nil
}

// Categorias retrieves all the categorias's Categorias with an executor.
func (o *Culinaria) Categorias(mods ...qm.QueryMod) categoriaQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"categorias\".\"id_culinaria\"=?", o.IDCulinaria),
	)

	return Categorias(queryMods...)
}

// LoadCategorias allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (culinariaL) LoadCategorias(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCulinaria interface{}, mods queries.Applicator) error {
	var slice []*Culinaria
	var object *Culinaria

	if singular {
		var ok bool
		object, ok = maybeCulinaria.(*Culinaria)
		if !ok {
			object = new(Culinaria)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCulinaria)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCulinaria))
			}
		}
	} else {
		s, ok := maybeCulinaria.(*[]*Culinaria)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCulinaria)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCulinaria))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &culinariaR{}
		}
		args[object.IDCulinaria] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &culinariaR{}
			}
			args[obj.IDCulinaria] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categorias`),
		qm.WhereIn(`categorias.id_culinaria in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load categorias")
	}

	var resultSlice []*Categoria
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice categorias")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on categorias")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categorias")
	}

	if len(categoriaAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Categorias = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &categoriaR{}
			}
			foreign.R.Culinaria = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.IDCulinaria == foreign.IDCulinaria {
				local.R.Categorias = append(local.R.Categorias, foreign)
				if foreign.R == nil {
					foreign.R = &categoriaR{}
				}
				foreign.R.Culinaria = local
				break
			}
		}
	}

	return nil
}

// AddCategorias adds the given related objects to the existing relationships
// of the culinarias, optionally inserting them as new records.
// Appends related to o.R.Categorias.
// Sets related.R.Culinaria appropriately.
func (o *Culinaria) AddCategorias(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Categoria) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IDCulinaria = o.IDCulinaria
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"categorias\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"id_culinaria"}),
				strmangle.WhereClause("\"", "\"", 2, categoriaPrimaryKeyColumns),
			)
			values := []interface{}{o.IDCulinaria, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IDCulinaria = o.IDCulinaria
		}
	}

	if o.R == nil {
		o.R = &culinariaR{
			Categorias: related,
		}
	} else {
		o.R.Categorias = append(o.R.Categorias, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &categoriaR{
				Culinaria: o,
			}
		} else {
			rel.R.Culinaria = o
		}
	}
	return nil
}

// Culinarias retrieves all the records using an executor.
func Culinarias(mods ...qm.QueryMod) culinariaQuery {
	mods = append(mods, qm.From("\"culinarias\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"culinarias\".*"})
	}

	return culinariaQuery{q}
}

// FindCulinaria retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCulinaria(ctx context.Context, exec boil.ContextExecutor, iDCulinaria int, selectCols ...string) (*Culinaria, error) {
	culinariaObj := &Culinaria{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"culinarias\" where \"id_culinaria\"=$1", sel,
	)

	q := queries.Raw(query, iDCulinaria)

	err := q.Bind(ctx, exec, culinariaObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from culinarias")
	}

	if err = culinariaObj.doAfterSelectHooks(ctx, exec); err != nil {
		return culinariaObj, err
	}

	return culinariaObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Culinaria) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no culinarias provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(culinariaColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	culinariaInsertCacheMut.RLock()
	cache, cached := culinariaInsertCache[key]
	culinariaInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			culinariaAllColumns,
			culinariaColumnsWithDefault,
			culinariaColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(culinariaType, culinariaMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(culinariaType, culinariaMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"culinarias\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"culinarias\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into culinarias")
	}

	if !cached {
		culinariaInsertCacheMut.Lock()
		culinariaInsertCache[key] = cache
		culinariaInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Culinaria.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Culinaria) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	culinariaUpdateCacheMut.RLock()
	cache, cached := culinariaUpdateCache[key]
	culinariaUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			culinariaAllColumns,
			culinariaPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update culinarias, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"culinarias\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, culinariaPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(culinariaType, culinariaMapping, append(wl, culinariaPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update culinarias row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for culinarias")
	}

	if !cached {
		culinariaUpdateCacheMut.Lock()
		culinariaUpdateCache[key] = cache
		culinariaUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q culinariaQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for culinarias")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for culinarias")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CulinariaSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), culinariaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"culinarias\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, culinariaPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in culinaria slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all culinaria")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Culinaria) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no culinarias provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(culinariaColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	culinariaUpsertCacheMut.RLock()
	cache, cached := culinariaUpsertCache[key]
	culinariaUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			culinariaAllColumns,
			culinariaColumnsWithDefault,
			culinariaColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			culinariaAllColumns,
			culinariaPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert culinarias, could not build update column list")
		}

		ret := strmangle.SetComplement(culinariaAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(culinariaPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert culinarias, could not build conflict column list")
			}

			conflict = make([]string, len(culinariaPrimaryKeyColumns))
			copy(conflict, culinariaPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"culinarias\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(culinariaType, culinariaMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(culinariaType, culinariaMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert culinarias")
	}

	if !cached {
		culinariaUpsertCacheMut.Lock()
		culinariaUpsertCache[key] = cache
		culinariaUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Culinaria record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Culinaria) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no Culinaria provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), culinariaPrimaryKeyMapping)
	sql := "DELETE FROM \"culinarias\" WHERE \"id_culinaria\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from culinarias")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for culinarias")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q culinariaQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no culinariaQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from culinarias")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for culinarias")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CulinariaSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(culinariaBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), culinariaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"culinarias\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, culinariaPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from culinaria slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for culinarias")
	}

	if len(culinariaAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Culinaria) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCulinaria(ctx, exec, o.IDCulinaria)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CulinariaSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CulinariaSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), culinariaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"culinarias\".* FROM \"culinarias\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, culinariaPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in CulinariaSlice")
	}

	*o = slice

	return nil
}

// CulinariaExists checks if the Culinaria row exists.
func CulinariaExists(ctx context.Context, exec boil.ContextExecutor, iDCulinaria int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"culinarias\" where \"id_culinaria\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iDCulinaria)
	}
	row := exec.QueryRowContext(ctx, sql, iDCulinaria)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if culinarias exists")
	}

	return exists, nil
}

// Exists checks if the Culinaria row exists.
func (o *Culinaria) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CulinariaExists(ctx, exec, o.IDCulinaria)
}
