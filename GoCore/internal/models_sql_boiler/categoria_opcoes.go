// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CategoriaOpcao is an object representing the database table.
type CategoriaOpcao struct {
	// Identificador único UUID da opção
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`
	// Identificador sequencial para facilitar CRUD
	SeqID int64 `boil:"seq_id" json:"seq_id" toml:"seq_id" yaml:"seq_id"`
	// ID da categoria a qual esta opção pertence
	IDCategoria string `boil:"id_categoria" json:"id_categoria" toml:"id_categoria" yaml:"id_categoria"`
	// Nome da opção (ex: Pequeno, Médio, Grande)
	Nome string `boil:"nome" json:"nome" toml:"nome" yaml:"nome"`
	// Status da opção (1=ativo, 0=inativo)
	Status    int16     `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	// Data e hora de exclusão lógica (soft delete)
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *categoriaOpcaoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L categoriaOpcaoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CategoriaOpcaoColumns = struct {
	ID          string
	SeqID       string
	IDCategoria string
	Nome        string
	Status      string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	SeqID:       "seq_id",
	IDCategoria: "id_categoria",
	Nome:        "nome",
	Status:      "status",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

var CategoriaOpcaoTableColumns = struct {
	ID          string
	SeqID       string
	IDCategoria string
	Nome        string
	Status      string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	ID:          "categoria_opcoes.id",
	SeqID:       "categoria_opcoes.seq_id",
	IDCategoria: "categoria_opcoes.id_categoria",
	Nome:        "categoria_opcoes.nome",
	Status:      "categoria_opcoes.status",
	CreatedAt:   "categoria_opcoes.created_at",
	UpdatedAt:   "categoria_opcoes.updated_at",
	DeletedAt:   "categoria_opcoes.deleted_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CategoriaOpcaoWhere = struct {
	ID          whereHelperstring
	SeqID       whereHelperint64
	IDCategoria whereHelperstring
	Nome        whereHelperstring
	Status      whereHelperint16
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperstring{field: "\"categoria_opcoes\".\"id\""},
	SeqID:       whereHelperint64{field: "\"categoria_opcoes\".\"seq_id\""},
	IDCategoria: whereHelperstring{field: "\"categoria_opcoes\".\"id_categoria\""},
	Nome:        whereHelperstring{field: "\"categoria_opcoes\".\"nome\""},
	Status:      whereHelperint16{field: "\"categoria_opcoes\".\"status\""},
	CreatedAt:   whereHelpertime_Time{field: "\"categoria_opcoes\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"categoria_opcoes\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"categoria_opcoes\".\"deleted_at\""},
}

// CategoriaOpcaoRels is where relationship names are stored.
var CategoriaOpcaoRels = struct {
	Categoria string
}{
	Categoria: "Categoria",
}

// categoriaOpcaoR is where relationships are stored.
type categoriaOpcaoR struct {
	Categoria *Categoria `boil:"Categoria" json:"Categoria" toml:"Categoria" yaml:"Categoria"`
}

// NewStruct creates a new relationship struct
func (*categoriaOpcaoR) NewStruct() *categoriaOpcaoR {
	return &categoriaOpcaoR{}
}

func (r *categoriaOpcaoR) GetCategoria() *Categoria {
	if r == nil {
		return nil
	}
	return r.Categoria
}

// categoriaOpcaoL is where Load methods for each relationship are stored.
type categoriaOpcaoL struct{}

var (
	categoriaOpcaoAllColumns            = []string{"id", "seq_id", "id_categoria", "nome", "status", "created_at", "updated_at", "deleted_at"}
	categoriaOpcaoColumnsWithoutDefault = []string{"id_categoria", "nome"}
	categoriaOpcaoColumnsWithDefault    = []string{"id", "seq_id", "status", "created_at", "updated_at", "deleted_at"}
	categoriaOpcaoPrimaryKeyColumns     = []string{"id"}
	categoriaOpcaoGeneratedColumns      = []string{}
)

type (
	// CategoriaOpcaoSlice is an alias for a slice of pointers to CategoriaOpcao.
	// This should almost always be used instead of []CategoriaOpcao.
	CategoriaOpcaoSlice []*CategoriaOpcao
	// CategoriaOpcaoHook is the signature for custom CategoriaOpcao hook methods
	CategoriaOpcaoHook func(context.Context, boil.ContextExecutor, *CategoriaOpcao) error

	categoriaOpcaoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	categoriaOpcaoType                 = reflect.TypeOf(&CategoriaOpcao{})
	categoriaOpcaoMapping              = queries.MakeStructMapping(categoriaOpcaoType)
	categoriaOpcaoPrimaryKeyMapping, _ = queries.BindMapping(categoriaOpcaoType, categoriaOpcaoMapping, categoriaOpcaoPrimaryKeyColumns)
	categoriaOpcaoInsertCacheMut       sync.RWMutex
	categoriaOpcaoInsertCache          = make(map[string]insertCache)
	categoriaOpcaoUpdateCacheMut       sync.RWMutex
	categoriaOpcaoUpdateCache          = make(map[string]updateCache)
	categoriaOpcaoUpsertCacheMut       sync.RWMutex
	categoriaOpcaoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var categoriaOpcaoAfterSelectMu sync.Mutex
var categoriaOpcaoAfterSelectHooks []CategoriaOpcaoHook

var categoriaOpcaoBeforeInsertMu sync.Mutex
var categoriaOpcaoBeforeInsertHooks []CategoriaOpcaoHook
var categoriaOpcaoAfterInsertMu sync.Mutex
var categoriaOpcaoAfterInsertHooks []CategoriaOpcaoHook

var categoriaOpcaoBeforeUpdateMu sync.Mutex
var categoriaOpcaoBeforeUpdateHooks []CategoriaOpcaoHook
var categoriaOpcaoAfterUpdateMu sync.Mutex
var categoriaOpcaoAfterUpdateHooks []CategoriaOpcaoHook

var categoriaOpcaoBeforeDeleteMu sync.Mutex
var categoriaOpcaoBeforeDeleteHooks []CategoriaOpcaoHook
var categoriaOpcaoAfterDeleteMu sync.Mutex
var categoriaOpcaoAfterDeleteHooks []CategoriaOpcaoHook

var categoriaOpcaoBeforeUpsertMu sync.Mutex
var categoriaOpcaoBeforeUpsertHooks []CategoriaOpcaoHook
var categoriaOpcaoAfterUpsertMu sync.Mutex
var categoriaOpcaoAfterUpsertHooks []CategoriaOpcaoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CategoriaOpcao) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaOpcaoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CategoriaOpcao) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaOpcaoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CategoriaOpcao) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaOpcaoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CategoriaOpcao) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaOpcaoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CategoriaOpcao) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaOpcaoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CategoriaOpcao) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaOpcaoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CategoriaOpcao) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaOpcaoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CategoriaOpcao) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaOpcaoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CategoriaOpcao) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoriaOpcaoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCategoriaOpcaoHook registers your hook function for all future operations.
func AddCategoriaOpcaoHook(hookPoint boil.HookPoint, categoriaOpcaoHook CategoriaOpcaoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		categoriaOpcaoAfterSelectMu.Lock()
		categoriaOpcaoAfterSelectHooks = append(categoriaOpcaoAfterSelectHooks, categoriaOpcaoHook)
		categoriaOpcaoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		categoriaOpcaoBeforeInsertMu.Lock()
		categoriaOpcaoBeforeInsertHooks = append(categoriaOpcaoBeforeInsertHooks, categoriaOpcaoHook)
		categoriaOpcaoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		categoriaOpcaoAfterInsertMu.Lock()
		categoriaOpcaoAfterInsertHooks = append(categoriaOpcaoAfterInsertHooks, categoriaOpcaoHook)
		categoriaOpcaoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		categoriaOpcaoBeforeUpdateMu.Lock()
		categoriaOpcaoBeforeUpdateHooks = append(categoriaOpcaoBeforeUpdateHooks, categoriaOpcaoHook)
		categoriaOpcaoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		categoriaOpcaoAfterUpdateMu.Lock()
		categoriaOpcaoAfterUpdateHooks = append(categoriaOpcaoAfterUpdateHooks, categoriaOpcaoHook)
		categoriaOpcaoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		categoriaOpcaoBeforeDeleteMu.Lock()
		categoriaOpcaoBeforeDeleteHooks = append(categoriaOpcaoBeforeDeleteHooks, categoriaOpcaoHook)
		categoriaOpcaoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		categoriaOpcaoAfterDeleteMu.Lock()
		categoriaOpcaoAfterDeleteHooks = append(categoriaOpcaoAfterDeleteHooks, categoriaOpcaoHook)
		categoriaOpcaoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		categoriaOpcaoBeforeUpsertMu.Lock()
		categoriaOpcaoBeforeUpsertHooks = append(categoriaOpcaoBeforeUpsertHooks, categoriaOpcaoHook)
		categoriaOpcaoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		categoriaOpcaoAfterUpsertMu.Lock()
		categoriaOpcaoAfterUpsertHooks = append(categoriaOpcaoAfterUpsertHooks, categoriaOpcaoHook)
		categoriaOpcaoAfterUpsertMu.Unlock()
	}
}

// One returns a single categoriaOpcao record from the query.
func (q categoriaOpcaoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CategoriaOpcao, error) {
	o := &CategoriaOpcao{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for categoria_opcoes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CategoriaOpcao records from the query.
func (q categoriaOpcaoQuery) All(ctx context.Context, exec boil.ContextExecutor) (CategoriaOpcaoSlice, error) {
	var o []*CategoriaOpcao

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to CategoriaOpcao slice")
	}

	if len(categoriaOpcaoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CategoriaOpcao records in the query.
func (q categoriaOpcaoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count categoria_opcoes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q categoriaOpcaoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if categoria_opcoes exists")
	}

	return count > 0, nil
}

// Categoria pointed to by the foreign key.
func (o *CategoriaOpcao) Categoria(mods ...qm.QueryMod) categoriaQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDCategoria),
	}

	queryMods = append(queryMods, mods...)

	return Categorias(queryMods...)
}

// LoadCategoria allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (categoriaOpcaoL) LoadCategoria(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategoriaOpcao interface{}, mods queries.Applicator) error {
	var slice []*CategoriaOpcao
	var object *CategoriaOpcao

	if singular {
		var ok bool
		object, ok = maybeCategoriaOpcao.(*CategoriaOpcao)
		if !ok {
			object = new(CategoriaOpcao)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategoriaOpcao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategoriaOpcao))
			}
		}
	} else {
		s, ok := maybeCategoriaOpcao.(*[]*CategoriaOpcao)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategoriaOpcao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategoriaOpcao))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &categoriaOpcaoR{}
		}
		args[object.IDCategoria] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoriaOpcaoR{}
			}

			args[obj.IDCategoria] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categorias`),
		qm.WhereIn(`categorias.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Categoria")
	}

	var resultSlice []*Categoria
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Categoria")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categorias")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categorias")
	}

	if len(categoriaAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Categoria = foreign
		if foreign.R == nil {
			foreign.R = &categoriaR{}
		}
		foreign.R.CategoriaOpcoes = append(foreign.R.CategoriaOpcoes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDCategoria == foreign.ID {
				local.R.Categoria = foreign
				if foreign.R == nil {
					foreign.R = &categoriaR{}
				}
				foreign.R.CategoriaOpcoes = append(foreign.R.CategoriaOpcoes, local)
				break
			}
		}
	}

	return nil
}

// SetCategoria of the categoriaOpcao to the related item.
// Sets o.R.Categoria to related.
// Adds o to related.R.CategoriaOpcoes.
func (o *CategoriaOpcao) SetCategoria(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Categoria) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"categoria_opcoes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_categoria"}),
		strmangle.WhereClause("\"", "\"", 2, categoriaOpcaoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDCategoria = related.ID
	if o.R == nil {
		o.R = &categoriaOpcaoR{
			Categoria: related,
		}
	} else {
		o.R.Categoria = related
	}

	if related.R == nil {
		related.R = &categoriaR{
			CategoriaOpcoes: CategoriaOpcaoSlice{o},
		}
	} else {
		related.R.CategoriaOpcoes = append(related.R.CategoriaOpcoes, o)
	}

	return nil
}

// CategoriaOpcoes retrieves all the records using an executor.
func CategoriaOpcoes(mods ...qm.QueryMod) categoriaOpcaoQuery {
	mods = append(mods, qm.From("\"categoria_opcoes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"categoria_opcoes\".*"})
	}

	return categoriaOpcaoQuery{q}
}

// FindCategoriaOpcao retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCategoriaOpcao(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CategoriaOpcao, error) {
	categoriaOpcaoObj := &CategoriaOpcao{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"categoria_opcoes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, categoriaOpcaoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from categoria_opcoes")
	}

	if err = categoriaOpcaoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return categoriaOpcaoObj, err
	}

	return categoriaOpcaoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CategoriaOpcao) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no categoria_opcoes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(categoriaOpcaoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	categoriaOpcaoInsertCacheMut.RLock()
	cache, cached := categoriaOpcaoInsertCache[key]
	categoriaOpcaoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			categoriaOpcaoAllColumns,
			categoriaOpcaoColumnsWithDefault,
			categoriaOpcaoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(categoriaOpcaoType, categoriaOpcaoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(categoriaOpcaoType, categoriaOpcaoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"categoria_opcoes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"categoria_opcoes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into categoria_opcoes")
	}

	if !cached {
		categoriaOpcaoInsertCacheMut.Lock()
		categoriaOpcaoInsertCache[key] = cache
		categoriaOpcaoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CategoriaOpcao.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CategoriaOpcao) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	categoriaOpcaoUpdateCacheMut.RLock()
	cache, cached := categoriaOpcaoUpdateCache[key]
	categoriaOpcaoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			categoriaOpcaoAllColumns,
			categoriaOpcaoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update categoria_opcoes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"categoria_opcoes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, categoriaOpcaoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(categoriaOpcaoType, categoriaOpcaoMapping, append(wl, categoriaOpcaoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update categoria_opcoes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for categoria_opcoes")
	}

	if !cached {
		categoriaOpcaoUpdateCacheMut.Lock()
		categoriaOpcaoUpdateCache[key] = cache
		categoriaOpcaoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q categoriaOpcaoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for categoria_opcoes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for categoria_opcoes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CategoriaOpcaoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoriaOpcaoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"categoria_opcoes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, categoriaOpcaoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in categoriaOpcao slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all categoriaOpcao")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CategoriaOpcao) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no categoria_opcoes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(categoriaOpcaoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	categoriaOpcaoUpsertCacheMut.RLock()
	cache, cached := categoriaOpcaoUpsertCache[key]
	categoriaOpcaoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			categoriaOpcaoAllColumns,
			categoriaOpcaoColumnsWithDefault,
			categoriaOpcaoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			categoriaOpcaoAllColumns,
			categoriaOpcaoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert categoria_opcoes, could not build update column list")
		}

		ret := strmangle.SetComplement(categoriaOpcaoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(categoriaOpcaoPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert categoria_opcoes, could not build conflict column list")
			}

			conflict = make([]string, len(categoriaOpcaoPrimaryKeyColumns))
			copy(conflict, categoriaOpcaoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"categoria_opcoes\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(categoriaOpcaoType, categoriaOpcaoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(categoriaOpcaoType, categoriaOpcaoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert categoria_opcoes")
	}

	if !cached {
		categoriaOpcaoUpsertCacheMut.Lock()
		categoriaOpcaoUpsertCache[key] = cache
		categoriaOpcaoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CategoriaOpcao record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CategoriaOpcao) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no CategoriaOpcao provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), categoriaOpcaoPrimaryKeyMapping)
	sql := "DELETE FROM \"categoria_opcoes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from categoria_opcoes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for categoria_opcoes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q categoriaOpcaoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no categoriaOpcaoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from categoria_opcoes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for categoria_opcoes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CategoriaOpcaoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(categoriaOpcaoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoriaOpcaoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"categoria_opcoes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, categoriaOpcaoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from categoriaOpcao slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for categoria_opcoes")
	}

	if len(categoriaOpcaoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CategoriaOpcao) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCategoriaOpcao(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CategoriaOpcaoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CategoriaOpcaoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoriaOpcaoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"categoria_opcoes\".* FROM \"categoria_opcoes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, categoriaOpcaoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in CategoriaOpcaoSlice")
	}

	*o = slice

	return nil
}

// CategoriaOpcaoExists checks if the CategoriaOpcao row exists.
func CategoriaOpcaoExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"categoria_opcoes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if categoria_opcoes exists")
	}

	return exists, nil
}

// Exists checks if the CategoriaOpcao row exists.
func (o *CategoriaOpcao) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CategoriaOpcaoExists(ctx, exec, o.ID)
}
