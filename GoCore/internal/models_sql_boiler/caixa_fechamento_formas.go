// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CaixaFechamentoForma is an object representing the database table.
type CaixaFechamentoForma struct {
	ID               string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	SeqID            int64             `boil:"seq_id" json:"seq_id" toml:"seq_id" yaml:"seq_id"`
	IDCaixa          string            `boil:"id_caixa" json:"id_caixa" toml:"id_caixa" yaml:"id_caixa"`
	IDFormaPagamento int16             `boil:"id_forma_pagamento" json:"id_forma_pagamento" toml:"id_forma_pagamento" yaml:"id_forma_pagamento"`
	ValorEsperado    types.Decimal     `boil:"valor_esperado" json:"valor_esperado" toml:"valor_esperado" yaml:"valor_esperado"`
	ValorInformado   types.Decimal     `boil:"valor_informado" json:"valor_informado" toml:"valor_informado" yaml:"valor_informado"`
	Diferenca        types.NullDecimal `boil:"diferenca" json:"diferenca,omitempty" toml:"diferenca" yaml:"diferenca,omitempty"`
	CreatedAt        time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *caixaFechamentoFormaR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L caixaFechamentoFormaL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CaixaFechamentoFormaColumns = struct {
	ID               string
	SeqID            string
	IDCaixa          string
	IDFormaPagamento string
	ValorEsperado    string
	ValorInformado   string
	Diferenca        string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "id",
	SeqID:            "seq_id",
	IDCaixa:          "id_caixa",
	IDFormaPagamento: "id_forma_pagamento",
	ValorEsperado:    "valor_esperado",
	ValorInformado:   "valor_informado",
	Diferenca:        "diferenca",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
}

var CaixaFechamentoFormaTableColumns = struct {
	ID               string
	SeqID            string
	IDCaixa          string
	IDFormaPagamento string
	ValorEsperado    string
	ValorInformado   string
	Diferenca        string
	CreatedAt        string
	UpdatedAt        string
}{
	ID:               "caixa_fechamento_formas.id",
	SeqID:            "caixa_fechamento_formas.seq_id",
	IDCaixa:          "caixa_fechamento_formas.id_caixa",
	IDFormaPagamento: "caixa_fechamento_formas.id_forma_pagamento",
	ValorEsperado:    "caixa_fechamento_formas.valor_esperado",
	ValorInformado:   "caixa_fechamento_formas.valor_informado",
	Diferenca:        "caixa_fechamento_formas.diferenca",
	CreatedAt:        "caixa_fechamento_formas.created_at",
	UpdatedAt:        "caixa_fechamento_formas.updated_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CaixaFechamentoFormaWhere = struct {
	ID               whereHelperstring
	SeqID            whereHelperint64
	IDCaixa          whereHelperstring
	IDFormaPagamento whereHelperint16
	ValorEsperado    whereHelpertypes_Decimal
	ValorInformado   whereHelpertypes_Decimal
	Diferenca        whereHelpertypes_NullDecimal
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
}{
	ID:               whereHelperstring{field: "\"caixa_fechamento_formas\".\"id\""},
	SeqID:            whereHelperint64{field: "\"caixa_fechamento_formas\".\"seq_id\""},
	IDCaixa:          whereHelperstring{field: "\"caixa_fechamento_formas\".\"id_caixa\""},
	IDFormaPagamento: whereHelperint16{field: "\"caixa_fechamento_formas\".\"id_forma_pagamento\""},
	ValorEsperado:    whereHelpertypes_Decimal{field: "\"caixa_fechamento_formas\".\"valor_esperado\""},
	ValorInformado:   whereHelpertypes_Decimal{field: "\"caixa_fechamento_formas\".\"valor_informado\""},
	Diferenca:        whereHelpertypes_NullDecimal{field: "\"caixa_fechamento_formas\".\"diferenca\""},
	CreatedAt:        whereHelpertime_Time{field: "\"caixa_fechamento_formas\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"caixa_fechamento_formas\".\"updated_at\""},
}

// CaixaFechamentoFormaRels is where relationship names are stored.
var CaixaFechamentoFormaRels = struct {
	IDCaixaCaixas                   string
	IDFormaPagamentoFormasPagamento string
}{
	IDCaixaCaixas:                   "IDCaixaCaixas",
	IDFormaPagamentoFormasPagamento: "IDFormaPagamentoFormasPagamento",
}

// caixaFechamentoFormaR is where relationships are stored.
type caixaFechamentoFormaR struct {
	IDCaixaCaixas                   *Caixa          `boil:"IDCaixaCaixas" json:"IDCaixaCaixas" toml:"IDCaixaCaixas" yaml:"IDCaixaCaixas"`
	IDFormaPagamentoFormasPagamento *FormaPagamento `boil:"IDFormaPagamentoFormasPagamento" json:"IDFormaPagamentoFormasPagamento" toml:"IDFormaPagamentoFormasPagamento" yaml:"IDFormaPagamentoFormasPagamento"`
}

// NewStruct creates a new relationship struct
func (*caixaFechamentoFormaR) NewStruct() *caixaFechamentoFormaR {
	return &caixaFechamentoFormaR{}
}

func (r *caixaFechamentoFormaR) GetIDCaixaCaixas() *Caixa {
	if r == nil {
		return nil
	}
	return r.IDCaixaCaixas
}

func (r *caixaFechamentoFormaR) GetIDFormaPagamentoFormasPagamento() *FormaPagamento {
	if r == nil {
		return nil
	}
	return r.IDFormaPagamentoFormasPagamento
}

// caixaFechamentoFormaL is where Load methods for each relationship are stored.
type caixaFechamentoFormaL struct{}

var (
	caixaFechamentoFormaAllColumns            = []string{"id", "seq_id", "id_caixa", "id_forma_pagamento", "valor_esperado", "valor_informado", "diferenca", "created_at", "updated_at"}
	caixaFechamentoFormaColumnsWithoutDefault = []string{"id_caixa", "id_forma_pagamento", "valor_informado"}
	caixaFechamentoFormaColumnsWithDefault    = []string{"id", "seq_id", "valor_esperado", "diferenca", "created_at", "updated_at"}
	caixaFechamentoFormaPrimaryKeyColumns     = []string{"id"}
	caixaFechamentoFormaGeneratedColumns      = []string{"diferenca"}
)

type (
	// CaixaFechamentoFormaSlice is an alias for a slice of pointers to CaixaFechamentoForma.
	// This should almost always be used instead of []CaixaFechamentoForma.
	CaixaFechamentoFormaSlice []*CaixaFechamentoForma
	// CaixaFechamentoFormaHook is the signature for custom CaixaFechamentoForma hook methods
	CaixaFechamentoFormaHook func(context.Context, boil.ContextExecutor, *CaixaFechamentoForma) error

	caixaFechamentoFormaQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	caixaFechamentoFormaType                 = reflect.TypeOf(&CaixaFechamentoForma{})
	caixaFechamentoFormaMapping              = queries.MakeStructMapping(caixaFechamentoFormaType)
	caixaFechamentoFormaPrimaryKeyMapping, _ = queries.BindMapping(caixaFechamentoFormaType, caixaFechamentoFormaMapping, caixaFechamentoFormaPrimaryKeyColumns)
	caixaFechamentoFormaInsertCacheMut       sync.RWMutex
	caixaFechamentoFormaInsertCache          = make(map[string]insertCache)
	caixaFechamentoFormaUpdateCacheMut       sync.RWMutex
	caixaFechamentoFormaUpdateCache          = make(map[string]updateCache)
	caixaFechamentoFormaUpsertCacheMut       sync.RWMutex
	caixaFechamentoFormaUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var caixaFechamentoFormaAfterSelectMu sync.Mutex
var caixaFechamentoFormaAfterSelectHooks []CaixaFechamentoFormaHook

var caixaFechamentoFormaBeforeInsertMu sync.Mutex
var caixaFechamentoFormaBeforeInsertHooks []CaixaFechamentoFormaHook
var caixaFechamentoFormaAfterInsertMu sync.Mutex
var caixaFechamentoFormaAfterInsertHooks []CaixaFechamentoFormaHook

var caixaFechamentoFormaBeforeUpdateMu sync.Mutex
var caixaFechamentoFormaBeforeUpdateHooks []CaixaFechamentoFormaHook
var caixaFechamentoFormaAfterUpdateMu sync.Mutex
var caixaFechamentoFormaAfterUpdateHooks []CaixaFechamentoFormaHook

var caixaFechamentoFormaBeforeDeleteMu sync.Mutex
var caixaFechamentoFormaBeforeDeleteHooks []CaixaFechamentoFormaHook
var caixaFechamentoFormaAfterDeleteMu sync.Mutex
var caixaFechamentoFormaAfterDeleteHooks []CaixaFechamentoFormaHook

var caixaFechamentoFormaBeforeUpsertMu sync.Mutex
var caixaFechamentoFormaBeforeUpsertHooks []CaixaFechamentoFormaHook
var caixaFechamentoFormaAfterUpsertMu sync.Mutex
var caixaFechamentoFormaAfterUpsertHooks []CaixaFechamentoFormaHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CaixaFechamentoForma) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaFechamentoFormaAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CaixaFechamentoForma) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaFechamentoFormaBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CaixaFechamentoForma) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaFechamentoFormaAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CaixaFechamentoForma) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaFechamentoFormaBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CaixaFechamentoForma) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaFechamentoFormaAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CaixaFechamentoForma) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaFechamentoFormaBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CaixaFechamentoForma) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaFechamentoFormaAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CaixaFechamentoForma) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaFechamentoFormaBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CaixaFechamentoForma) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaFechamentoFormaAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCaixaFechamentoFormaHook registers your hook function for all future operations.
func AddCaixaFechamentoFormaHook(hookPoint boil.HookPoint, caixaFechamentoFormaHook CaixaFechamentoFormaHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		caixaFechamentoFormaAfterSelectMu.Lock()
		caixaFechamentoFormaAfterSelectHooks = append(caixaFechamentoFormaAfterSelectHooks, caixaFechamentoFormaHook)
		caixaFechamentoFormaAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		caixaFechamentoFormaBeforeInsertMu.Lock()
		caixaFechamentoFormaBeforeInsertHooks = append(caixaFechamentoFormaBeforeInsertHooks, caixaFechamentoFormaHook)
		caixaFechamentoFormaBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		caixaFechamentoFormaAfterInsertMu.Lock()
		caixaFechamentoFormaAfterInsertHooks = append(caixaFechamentoFormaAfterInsertHooks, caixaFechamentoFormaHook)
		caixaFechamentoFormaAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		caixaFechamentoFormaBeforeUpdateMu.Lock()
		caixaFechamentoFormaBeforeUpdateHooks = append(caixaFechamentoFormaBeforeUpdateHooks, caixaFechamentoFormaHook)
		caixaFechamentoFormaBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		caixaFechamentoFormaAfterUpdateMu.Lock()
		caixaFechamentoFormaAfterUpdateHooks = append(caixaFechamentoFormaAfterUpdateHooks, caixaFechamentoFormaHook)
		caixaFechamentoFormaAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		caixaFechamentoFormaBeforeDeleteMu.Lock()
		caixaFechamentoFormaBeforeDeleteHooks = append(caixaFechamentoFormaBeforeDeleteHooks, caixaFechamentoFormaHook)
		caixaFechamentoFormaBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		caixaFechamentoFormaAfterDeleteMu.Lock()
		caixaFechamentoFormaAfterDeleteHooks = append(caixaFechamentoFormaAfterDeleteHooks, caixaFechamentoFormaHook)
		caixaFechamentoFormaAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		caixaFechamentoFormaBeforeUpsertMu.Lock()
		caixaFechamentoFormaBeforeUpsertHooks = append(caixaFechamentoFormaBeforeUpsertHooks, caixaFechamentoFormaHook)
		caixaFechamentoFormaBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		caixaFechamentoFormaAfterUpsertMu.Lock()
		caixaFechamentoFormaAfterUpsertHooks = append(caixaFechamentoFormaAfterUpsertHooks, caixaFechamentoFormaHook)
		caixaFechamentoFormaAfterUpsertMu.Unlock()
	}
}

// One returns a single caixaFechamentoForma record from the query.
func (q caixaFechamentoFormaQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CaixaFechamentoForma, error) {
	o := &CaixaFechamentoForma{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for caixa_fechamento_formas")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CaixaFechamentoForma records from the query.
func (q caixaFechamentoFormaQuery) All(ctx context.Context, exec boil.ContextExecutor) (CaixaFechamentoFormaSlice, error) {
	var o []*CaixaFechamentoForma

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to CaixaFechamentoForma slice")
	}

	if len(caixaFechamentoFormaAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CaixaFechamentoForma records in the query.
func (q caixaFechamentoFormaQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count caixa_fechamento_formas rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q caixaFechamentoFormaQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if caixa_fechamento_formas exists")
	}

	return count > 0, nil
}

// IDCaixaCaixas pointed to by the foreign key.
func (o *CaixaFechamentoForma) IDCaixaCaixas(mods ...qm.QueryMod) caixaQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDCaixa),
	}

	queryMods = append(queryMods, mods...)

	return Caixas(queryMods...)
}

// IDFormaPagamentoFormasPagamento pointed to by the foreign key.
func (o *CaixaFechamentoForma) IDFormaPagamentoFormasPagamento(mods ...qm.QueryMod) formaPagamentoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDFormaPagamento),
	}

	queryMods = append(queryMods, mods...)

	return FormasPagamento(queryMods...)
}

// LoadIDCaixaCaixas allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (caixaFechamentoFormaL) LoadIDCaixaCaixas(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCaixaFechamentoForma interface{}, mods queries.Applicator) error {
	var slice []*CaixaFechamentoForma
	var object *CaixaFechamentoForma

	if singular {
		var ok bool
		object, ok = maybeCaixaFechamentoForma.(*CaixaFechamentoForma)
		if !ok {
			object = new(CaixaFechamentoForma)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCaixaFechamentoForma)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCaixaFechamentoForma))
			}
		}
	} else {
		s, ok := maybeCaixaFechamentoForma.(*[]*CaixaFechamentoForma)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCaixaFechamentoForma)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCaixaFechamentoForma))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &caixaFechamentoFormaR{}
		}
		args[object.IDCaixa] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &caixaFechamentoFormaR{}
			}

			args[obj.IDCaixa] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`caixas`),
		qm.WhereIn(`caixas.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Caixa")
	}

	var resultSlice []*Caixa
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Caixa")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for caixas")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for caixas")
	}

	if len(caixaAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDCaixaCaixas = foreign
		if foreign.R == nil {
			foreign.R = &caixaR{}
		}
		foreign.R.IDCaixaCaixaFechamentoFormas = append(foreign.R.IDCaixaCaixaFechamentoFormas, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDCaixa == foreign.ID {
				local.R.IDCaixaCaixas = foreign
				if foreign.R == nil {
					foreign.R = &caixaR{}
				}
				foreign.R.IDCaixaCaixaFechamentoFormas = append(foreign.R.IDCaixaCaixaFechamentoFormas, local)
				break
			}
		}
	}

	return nil
}

// LoadIDFormaPagamentoFormasPagamento allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (caixaFechamentoFormaL) LoadIDFormaPagamentoFormasPagamento(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCaixaFechamentoForma interface{}, mods queries.Applicator) error {
	var slice []*CaixaFechamentoForma
	var object *CaixaFechamentoForma

	if singular {
		var ok bool
		object, ok = maybeCaixaFechamentoForma.(*CaixaFechamentoForma)
		if !ok {
			object = new(CaixaFechamentoForma)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCaixaFechamentoForma)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCaixaFechamentoForma))
			}
		}
	} else {
		s, ok := maybeCaixaFechamentoForma.(*[]*CaixaFechamentoForma)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCaixaFechamentoForma)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCaixaFechamentoForma))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &caixaFechamentoFormaR{}
		}
		args[object.IDFormaPagamento] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &caixaFechamentoFormaR{}
			}

			args[obj.IDFormaPagamento] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`formas_pagamento`),
		qm.WhereIn(`formas_pagamento.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load FormaPagamento")
	}

	var resultSlice []*FormaPagamento
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice FormaPagamento")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for formas_pagamento")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for formas_pagamento")
	}

	if len(formaPagamentoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDFormaPagamentoFormasPagamento = foreign
		if foreign.R == nil {
			foreign.R = &formaPagamentoR{}
		}
		foreign.R.IDFormaPagamentoCaixaFechamentoFormas = append(foreign.R.IDFormaPagamentoCaixaFechamentoFormas, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDFormaPagamento == foreign.ID {
				local.R.IDFormaPagamentoFormasPagamento = foreign
				if foreign.R == nil {
					foreign.R = &formaPagamentoR{}
				}
				foreign.R.IDFormaPagamentoCaixaFechamentoFormas = append(foreign.R.IDFormaPagamentoCaixaFechamentoFormas, local)
				break
			}
		}
	}

	return nil
}

// SetIDCaixaCaixas of the caixaFechamentoForma to the related item.
// Sets o.R.IDCaixaCaixas to related.
// Adds o to related.R.IDCaixaCaixaFechamentoFormas.
func (o *CaixaFechamentoForma) SetIDCaixaCaixas(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Caixa) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"caixa_fechamento_formas\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_caixa"}),
		strmangle.WhereClause("\"", "\"", 2, caixaFechamentoFormaPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDCaixa = related.ID
	if o.R == nil {
		o.R = &caixaFechamentoFormaR{
			IDCaixaCaixas: related,
		}
	} else {
		o.R.IDCaixaCaixas = related
	}

	if related.R == nil {
		related.R = &caixaR{
			IDCaixaCaixaFechamentoFormas: CaixaFechamentoFormaSlice{o},
		}
	} else {
		related.R.IDCaixaCaixaFechamentoFormas = append(related.R.IDCaixaCaixaFechamentoFormas, o)
	}

	return nil
}

// SetIDFormaPagamentoFormasPagamento of the caixaFechamentoForma to the related item.
// Sets o.R.IDFormaPagamentoFormasPagamento to related.
// Adds o to related.R.IDFormaPagamentoCaixaFechamentoFormas.
func (o *CaixaFechamentoForma) SetIDFormaPagamentoFormasPagamento(ctx context.Context, exec boil.ContextExecutor, insert bool, related *FormaPagamento) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"caixa_fechamento_formas\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_forma_pagamento"}),
		strmangle.WhereClause("\"", "\"", 2, caixaFechamentoFormaPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDFormaPagamento = related.ID
	if o.R == nil {
		o.R = &caixaFechamentoFormaR{
			IDFormaPagamentoFormasPagamento: related,
		}
	} else {
		o.R.IDFormaPagamentoFormasPagamento = related
	}

	if related.R == nil {
		related.R = &formaPagamentoR{
			IDFormaPagamentoCaixaFechamentoFormas: CaixaFechamentoFormaSlice{o},
		}
	} else {
		related.R.IDFormaPagamentoCaixaFechamentoFormas = append(related.R.IDFormaPagamentoCaixaFechamentoFormas, o)
	}

	return nil
}

// CaixaFechamentoFormas retrieves all the records using an executor.
func CaixaFechamentoFormas(mods ...qm.QueryMod) caixaFechamentoFormaQuery {
	mods = append(mods, qm.From("\"caixa_fechamento_formas\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"caixa_fechamento_formas\".*"})
	}

	return caixaFechamentoFormaQuery{q}
}

// FindCaixaFechamentoForma retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCaixaFechamentoForma(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CaixaFechamentoForma, error) {
	caixaFechamentoFormaObj := &CaixaFechamentoForma{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"caixa_fechamento_formas\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, caixaFechamentoFormaObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from caixa_fechamento_formas")
	}

	if err = caixaFechamentoFormaObj.doAfterSelectHooks(ctx, exec); err != nil {
		return caixaFechamentoFormaObj, err
	}

	return caixaFechamentoFormaObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CaixaFechamentoForma) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no caixa_fechamento_formas provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(caixaFechamentoFormaColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	caixaFechamentoFormaInsertCacheMut.RLock()
	cache, cached := caixaFechamentoFormaInsertCache[key]
	caixaFechamentoFormaInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			caixaFechamentoFormaAllColumns,
			caixaFechamentoFormaColumnsWithDefault,
			caixaFechamentoFormaColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, caixaFechamentoFormaGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(caixaFechamentoFormaType, caixaFechamentoFormaMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(caixaFechamentoFormaType, caixaFechamentoFormaMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"caixa_fechamento_formas\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"caixa_fechamento_formas\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into caixa_fechamento_formas")
	}

	if !cached {
		caixaFechamentoFormaInsertCacheMut.Lock()
		caixaFechamentoFormaInsertCache[key] = cache
		caixaFechamentoFormaInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CaixaFechamentoForma.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CaixaFechamentoForma) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	caixaFechamentoFormaUpdateCacheMut.RLock()
	cache, cached := caixaFechamentoFormaUpdateCache[key]
	caixaFechamentoFormaUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			caixaFechamentoFormaAllColumns,
			caixaFechamentoFormaPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, caixaFechamentoFormaGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update caixa_fechamento_formas, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"caixa_fechamento_formas\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, caixaFechamentoFormaPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(caixaFechamentoFormaType, caixaFechamentoFormaMapping, append(wl, caixaFechamentoFormaPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update caixa_fechamento_formas row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for caixa_fechamento_formas")
	}

	if !cached {
		caixaFechamentoFormaUpdateCacheMut.Lock()
		caixaFechamentoFormaUpdateCache[key] = cache
		caixaFechamentoFormaUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q caixaFechamentoFormaQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for caixa_fechamento_formas")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for caixa_fechamento_formas")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CaixaFechamentoFormaSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), caixaFechamentoFormaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"caixa_fechamento_formas\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, caixaFechamentoFormaPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in caixaFechamentoForma slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all caixaFechamentoForma")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CaixaFechamentoForma) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no caixa_fechamento_formas provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(caixaFechamentoFormaColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	caixaFechamentoFormaUpsertCacheMut.RLock()
	cache, cached := caixaFechamentoFormaUpsertCache[key]
	caixaFechamentoFormaUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			caixaFechamentoFormaAllColumns,
			caixaFechamentoFormaColumnsWithDefault,
			caixaFechamentoFormaColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			caixaFechamentoFormaAllColumns,
			caixaFechamentoFormaPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, caixaFechamentoFormaGeneratedColumns)
		update = strmangle.SetComplement(update, caixaFechamentoFormaGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert caixa_fechamento_formas, could not build update column list")
		}

		ret := strmangle.SetComplement(caixaFechamentoFormaAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(caixaFechamentoFormaPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert caixa_fechamento_formas, could not build conflict column list")
			}

			conflict = make([]string, len(caixaFechamentoFormaPrimaryKeyColumns))
			copy(conflict, caixaFechamentoFormaPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"caixa_fechamento_formas\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(caixaFechamentoFormaType, caixaFechamentoFormaMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(caixaFechamentoFormaType, caixaFechamentoFormaMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert caixa_fechamento_formas")
	}

	if !cached {
		caixaFechamentoFormaUpsertCacheMut.Lock()
		caixaFechamentoFormaUpsertCache[key] = cache
		caixaFechamentoFormaUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CaixaFechamentoForma record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CaixaFechamentoForma) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no CaixaFechamentoForma provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), caixaFechamentoFormaPrimaryKeyMapping)
	sql := "DELETE FROM \"caixa_fechamento_formas\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from caixa_fechamento_formas")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for caixa_fechamento_formas")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q caixaFechamentoFormaQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no caixaFechamentoFormaQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from caixa_fechamento_formas")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for caixa_fechamento_formas")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CaixaFechamentoFormaSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(caixaFechamentoFormaBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), caixaFechamentoFormaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"caixa_fechamento_formas\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, caixaFechamentoFormaPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from caixaFechamentoForma slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for caixa_fechamento_formas")
	}

	if len(caixaFechamentoFormaAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CaixaFechamentoForma) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCaixaFechamentoForma(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CaixaFechamentoFormaSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CaixaFechamentoFormaSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), caixaFechamentoFormaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"caixa_fechamento_formas\".* FROM \"caixa_fechamento_formas\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, caixaFechamentoFormaPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in CaixaFechamentoFormaSlice")
	}

	*o = slice

	return nil
}

// CaixaFechamentoFormaExists checks if the CaixaFechamentoForma row exists.
func CaixaFechamentoFormaExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"caixa_fechamento_formas\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if caixa_fechamento_formas exists")
	}

	return exists, nil
}

// Exists checks if the CaixaFechamentoForma row exists.
func (o *CaixaFechamentoForma) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CaixaFechamentoFormaExists(ctx, exec, o.ID)
}
