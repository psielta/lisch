// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OperadorCaixa is an object representing the database table.
type OperadorCaixa struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	SeqID     int64       `boil:"seq_id" json:"seq_id" toml:"seq_id" yaml:"seq_id"`
	TenantID  string      `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	IDUsuario string      `boil:"id_usuario" json:"id_usuario" toml:"id_usuario" yaml:"id_usuario"`
	Nome      string      `boil:"nome" json:"nome" toml:"nome" yaml:"nome"`
	Codigo    null.String `boil:"codigo" json:"codigo,omitempty" toml:"codigo" yaml:"codigo,omitempty"`
	Ativo     int16       `boil:"ativo" json:"ativo" toml:"ativo" yaml:"ativo"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *operadorCaixaR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L operadorCaixaL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OperadorCaixaColumns = struct {
	ID        string
	SeqID     string
	TenantID  string
	IDUsuario string
	Nome      string
	Codigo    string
	Ativo     string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	SeqID:     "seq_id",
	TenantID:  "tenant_id",
	IDUsuario: "id_usuario",
	Nome:      "nome",
	Codigo:    "codigo",
	Ativo:     "ativo",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var OperadorCaixaTableColumns = struct {
	ID        string
	SeqID     string
	TenantID  string
	IDUsuario string
	Nome      string
	Codigo    string
	Ativo     string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "operadores_caixa.id",
	SeqID:     "operadores_caixa.seq_id",
	TenantID:  "operadores_caixa.tenant_id",
	IDUsuario: "operadores_caixa.id_usuario",
	Nome:      "operadores_caixa.nome",
	Codigo:    "operadores_caixa.codigo",
	Ativo:     "operadores_caixa.ativo",
	CreatedAt: "operadores_caixa.created_at",
	UpdatedAt: "operadores_caixa.updated_at",
	DeletedAt: "operadores_caixa.deleted_at",
}

// Generated where

var OperadorCaixaWhere = struct {
	ID        whereHelperstring
	SeqID     whereHelperint64
	TenantID  whereHelperstring
	IDUsuario whereHelperstring
	Nome      whereHelperstring
	Codigo    whereHelpernull_String
	Ativo     whereHelperint16
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"operadores_caixa\".\"id\""},
	SeqID:     whereHelperint64{field: "\"operadores_caixa\".\"seq_id\""},
	TenantID:  whereHelperstring{field: "\"operadores_caixa\".\"tenant_id\""},
	IDUsuario: whereHelperstring{field: "\"operadores_caixa\".\"id_usuario\""},
	Nome:      whereHelperstring{field: "\"operadores_caixa\".\"nome\""},
	Codigo:    whereHelpernull_String{field: "\"operadores_caixa\".\"codigo\""},
	Ativo:     whereHelperint16{field: "\"operadores_caixa\".\"ativo\""},
	CreatedAt: whereHelpertime_Time{field: "\"operadores_caixa\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"operadores_caixa\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"operadores_caixa\".\"deleted_at\""},
}

// OperadorCaixaRels is where relationship names are stored.
var OperadorCaixaRels = struct {
	Tenant           string
	IDUsuarioUser    string
	IDOperadorCaixas string
}{
	Tenant:           "Tenant",
	IDUsuarioUser:    "IDUsuarioUser",
	IDOperadorCaixas: "IDOperadorCaixas",
}

// operadorCaixaR is where relationships are stored.
type operadorCaixaR struct {
	Tenant           *Tenant `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
	IDUsuarioUser    *User   `boil:"IDUsuarioUser" json:"IDUsuarioUser" toml:"IDUsuarioUser" yaml:"IDUsuarioUser"`
	IDOperadorCaixas *Caixa  `boil:"IDOperadorCaixas" json:"IDOperadorCaixas" toml:"IDOperadorCaixas" yaml:"IDOperadorCaixas"`
}

// NewStruct creates a new relationship struct
func (*operadorCaixaR) NewStruct() *operadorCaixaR {
	return &operadorCaixaR{}
}

func (r *operadorCaixaR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}
	return r.Tenant
}

func (r *operadorCaixaR) GetIDUsuarioUser() *User {
	if r == nil {
		return nil
	}
	return r.IDUsuarioUser
}

func (r *operadorCaixaR) GetIDOperadorCaixas() *Caixa {
	if r == nil {
		return nil
	}
	return r.IDOperadorCaixas
}

// operadorCaixaL is where Load methods for each relationship are stored.
type operadorCaixaL struct{}

var (
	operadorCaixaAllColumns            = []string{"id", "seq_id", "tenant_id", "id_usuario", "nome", "codigo", "ativo", "created_at", "updated_at", "deleted_at"}
	operadorCaixaColumnsWithoutDefault = []string{"tenant_id", "id_usuario", "nome"}
	operadorCaixaColumnsWithDefault    = []string{"id", "seq_id", "codigo", "ativo", "created_at", "updated_at", "deleted_at"}
	operadorCaixaPrimaryKeyColumns     = []string{"id"}
	operadorCaixaGeneratedColumns      = []string{}
)

type (
	// OperadorCaixaSlice is an alias for a slice of pointers to OperadorCaixa.
	// This should almost always be used instead of []OperadorCaixa.
	OperadorCaixaSlice []*OperadorCaixa
	// OperadorCaixaHook is the signature for custom OperadorCaixa hook methods
	OperadorCaixaHook func(context.Context, boil.ContextExecutor, *OperadorCaixa) error

	operadorCaixaQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	operadorCaixaType                 = reflect.TypeOf(&OperadorCaixa{})
	operadorCaixaMapping              = queries.MakeStructMapping(operadorCaixaType)
	operadorCaixaPrimaryKeyMapping, _ = queries.BindMapping(operadorCaixaType, operadorCaixaMapping, operadorCaixaPrimaryKeyColumns)
	operadorCaixaInsertCacheMut       sync.RWMutex
	operadorCaixaInsertCache          = make(map[string]insertCache)
	operadorCaixaUpdateCacheMut       sync.RWMutex
	operadorCaixaUpdateCache          = make(map[string]updateCache)
	operadorCaixaUpsertCacheMut       sync.RWMutex
	operadorCaixaUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var operadorCaixaAfterSelectMu sync.Mutex
var operadorCaixaAfterSelectHooks []OperadorCaixaHook

var operadorCaixaBeforeInsertMu sync.Mutex
var operadorCaixaBeforeInsertHooks []OperadorCaixaHook
var operadorCaixaAfterInsertMu sync.Mutex
var operadorCaixaAfterInsertHooks []OperadorCaixaHook

var operadorCaixaBeforeUpdateMu sync.Mutex
var operadorCaixaBeforeUpdateHooks []OperadorCaixaHook
var operadorCaixaAfterUpdateMu sync.Mutex
var operadorCaixaAfterUpdateHooks []OperadorCaixaHook

var operadorCaixaBeforeDeleteMu sync.Mutex
var operadorCaixaBeforeDeleteHooks []OperadorCaixaHook
var operadorCaixaAfterDeleteMu sync.Mutex
var operadorCaixaAfterDeleteHooks []OperadorCaixaHook

var operadorCaixaBeforeUpsertMu sync.Mutex
var operadorCaixaBeforeUpsertHooks []OperadorCaixaHook
var operadorCaixaAfterUpsertMu sync.Mutex
var operadorCaixaAfterUpsertHooks []OperadorCaixaHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OperadorCaixa) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operadorCaixaAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OperadorCaixa) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operadorCaixaBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OperadorCaixa) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operadorCaixaAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OperadorCaixa) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operadorCaixaBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OperadorCaixa) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operadorCaixaAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OperadorCaixa) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operadorCaixaBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OperadorCaixa) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operadorCaixaAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OperadorCaixa) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operadorCaixaBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OperadorCaixa) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operadorCaixaAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOperadorCaixaHook registers your hook function for all future operations.
func AddOperadorCaixaHook(hookPoint boil.HookPoint, operadorCaixaHook OperadorCaixaHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		operadorCaixaAfterSelectMu.Lock()
		operadorCaixaAfterSelectHooks = append(operadorCaixaAfterSelectHooks, operadorCaixaHook)
		operadorCaixaAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		operadorCaixaBeforeInsertMu.Lock()
		operadorCaixaBeforeInsertHooks = append(operadorCaixaBeforeInsertHooks, operadorCaixaHook)
		operadorCaixaBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		operadorCaixaAfterInsertMu.Lock()
		operadorCaixaAfterInsertHooks = append(operadorCaixaAfterInsertHooks, operadorCaixaHook)
		operadorCaixaAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		operadorCaixaBeforeUpdateMu.Lock()
		operadorCaixaBeforeUpdateHooks = append(operadorCaixaBeforeUpdateHooks, operadorCaixaHook)
		operadorCaixaBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		operadorCaixaAfterUpdateMu.Lock()
		operadorCaixaAfterUpdateHooks = append(operadorCaixaAfterUpdateHooks, operadorCaixaHook)
		operadorCaixaAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		operadorCaixaBeforeDeleteMu.Lock()
		operadorCaixaBeforeDeleteHooks = append(operadorCaixaBeforeDeleteHooks, operadorCaixaHook)
		operadorCaixaBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		operadorCaixaAfterDeleteMu.Lock()
		operadorCaixaAfterDeleteHooks = append(operadorCaixaAfterDeleteHooks, operadorCaixaHook)
		operadorCaixaAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		operadorCaixaBeforeUpsertMu.Lock()
		operadorCaixaBeforeUpsertHooks = append(operadorCaixaBeforeUpsertHooks, operadorCaixaHook)
		operadorCaixaBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		operadorCaixaAfterUpsertMu.Lock()
		operadorCaixaAfterUpsertHooks = append(operadorCaixaAfterUpsertHooks, operadorCaixaHook)
		operadorCaixaAfterUpsertMu.Unlock()
	}
}

// One returns a single operadorCaixa record from the query.
func (q operadorCaixaQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OperadorCaixa, error) {
	o := &OperadorCaixa{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for operadores_caixa")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OperadorCaixa records from the query.
func (q operadorCaixaQuery) All(ctx context.Context, exec boil.ContextExecutor) (OperadorCaixaSlice, error) {
	var o []*OperadorCaixa

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to OperadorCaixa slice")
	}

	if len(operadorCaixaAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OperadorCaixa records in the query.
func (q operadorCaixaQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count operadores_caixa rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q operadorCaixaQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if operadores_caixa exists")
	}

	return count > 0, nil
}

// Tenant pointed to by the foreign key.
func (o *OperadorCaixa) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// IDUsuarioUser pointed to by the foreign key.
func (o *OperadorCaixa) IDUsuarioUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDUsuario),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// IDOperadorCaixas pointed to by the foreign key.
func (o *OperadorCaixa) IDOperadorCaixas(mods ...qm.QueryMod) caixaQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id_operador\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return Caixas(queryMods...)
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (operadorCaixaL) LoadTenant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOperadorCaixa interface{}, mods queries.Applicator) error {
	var slice []*OperadorCaixa
	var object *OperadorCaixa

	if singular {
		var ok bool
		object, ok = maybeOperadorCaixa.(*OperadorCaixa)
		if !ok {
			object = new(OperadorCaixa)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOperadorCaixa)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOperadorCaixa))
			}
		}
	} else {
		s, ok := maybeOperadorCaixa.(*[]*OperadorCaixa)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOperadorCaixa)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOperadorCaixa))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &operadorCaixaR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &operadorCaixaR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.OperadoresCaixas = append(foreign.R.OperadoresCaixas, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.OperadoresCaixas = append(foreign.R.OperadoresCaixas, local)
				break
			}
		}
	}

	return nil
}

// LoadIDUsuarioUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (operadorCaixaL) LoadIDUsuarioUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOperadorCaixa interface{}, mods queries.Applicator) error {
	var slice []*OperadorCaixa
	var object *OperadorCaixa

	if singular {
		var ok bool
		object, ok = maybeOperadorCaixa.(*OperadorCaixa)
		if !ok {
			object = new(OperadorCaixa)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOperadorCaixa)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOperadorCaixa))
			}
		}
	} else {
		s, ok := maybeOperadorCaixa.(*[]*OperadorCaixa)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOperadorCaixa)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOperadorCaixa))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &operadorCaixaR{}
		}
		args[object.IDUsuario] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &operadorCaixaR{}
			}

			args[obj.IDUsuario] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDUsuarioUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.IDUsuarioOperadoresCaixas = append(foreign.R.IDUsuarioOperadoresCaixas, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDUsuario == foreign.ID {
				local.R.IDUsuarioUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.IDUsuarioOperadoresCaixas = append(foreign.R.IDUsuarioOperadoresCaixas, local)
				break
			}
		}
	}

	return nil
}

// LoadIDOperadorCaixas allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (operadorCaixaL) LoadIDOperadorCaixas(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOperadorCaixa interface{}, mods queries.Applicator) error {
	var slice []*OperadorCaixa
	var object *OperadorCaixa

	if singular {
		var ok bool
		object, ok = maybeOperadorCaixa.(*OperadorCaixa)
		if !ok {
			object = new(OperadorCaixa)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOperadorCaixa)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOperadorCaixa))
			}
		}
	} else {
		s, ok := maybeOperadorCaixa.(*[]*OperadorCaixa)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOperadorCaixa)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOperadorCaixa))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &operadorCaixaR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &operadorCaixaR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`caixas`),
		qm.WhereIn(`caixas.id_operador in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Caixa")
	}

	var resultSlice []*Caixa
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Caixa")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for caixas")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for caixas")
	}

	if len(caixaAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDOperadorCaixas = foreign
		if foreign.R == nil {
			foreign.R = &caixaR{}
		}
		foreign.R.IDOperadorOperadoresCaixa = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.IDOperador {
				local.R.IDOperadorCaixas = foreign
				if foreign.R == nil {
					foreign.R = &caixaR{}
				}
				foreign.R.IDOperadorOperadoresCaixa = local
				break
			}
		}
	}

	return nil
}

// SetTenant of the operadorCaixa to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.OperadoresCaixas.
func (o *OperadorCaixa) SetTenant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"operadores_caixa\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, operadorCaixaPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &operadorCaixaR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			OperadoresCaixas: OperadorCaixaSlice{o},
		}
	} else {
		related.R.OperadoresCaixas = append(related.R.OperadoresCaixas, o)
	}

	return nil
}

// SetIDUsuarioUser of the operadorCaixa to the related item.
// Sets o.R.IDUsuarioUser to related.
// Adds o to related.R.IDUsuarioOperadoresCaixas.
func (o *OperadorCaixa) SetIDUsuarioUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"operadores_caixa\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_usuario"}),
		strmangle.WhereClause("\"", "\"", 2, operadorCaixaPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDUsuario = related.ID
	if o.R == nil {
		o.R = &operadorCaixaR{
			IDUsuarioUser: related,
		}
	} else {
		o.R.IDUsuarioUser = related
	}

	if related.R == nil {
		related.R = &userR{
			IDUsuarioOperadoresCaixas: OperadorCaixaSlice{o},
		}
	} else {
		related.R.IDUsuarioOperadoresCaixas = append(related.R.IDUsuarioOperadoresCaixas, o)
	}

	return nil
}

// SetIDOperadorCaixas of the operadorCaixa to the related item.
// Sets o.R.IDOperadorCaixas to related.
// Adds o to related.R.IDOperadorOperadoresCaixa.
func (o *OperadorCaixa) SetIDOperadorCaixas(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Caixa) error {
	var err error

	if insert {
		related.IDOperador = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"caixas\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"id_operador"}),
			strmangle.WhereClause("\"", "\"", 2, caixaPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.IDOperador = o.ID
	}

	if o.R == nil {
		o.R = &operadorCaixaR{
			IDOperadorCaixas: related,
		}
	} else {
		o.R.IDOperadorCaixas = related
	}

	if related.R == nil {
		related.R = &caixaR{
			IDOperadorOperadoresCaixa: o,
		}
	} else {
		related.R.IDOperadorOperadoresCaixa = o
	}
	return nil
}

// OperadoresCaixa retrieves all the records using an executor.
func OperadoresCaixa(mods ...qm.QueryMod) operadorCaixaQuery {
	mods = append(mods, qm.From("\"operadores_caixa\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"operadores_caixa\".*"})
	}

	return operadorCaixaQuery{q}
}

// FindOperadorCaixa retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOperadorCaixa(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*OperadorCaixa, error) {
	operadorCaixaObj := &OperadorCaixa{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"operadores_caixa\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, operadorCaixaObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from operadores_caixa")
	}

	if err = operadorCaixaObj.doAfterSelectHooks(ctx, exec); err != nil {
		return operadorCaixaObj, err
	}

	return operadorCaixaObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OperadorCaixa) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no operadores_caixa provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(operadorCaixaColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	operadorCaixaInsertCacheMut.RLock()
	cache, cached := operadorCaixaInsertCache[key]
	operadorCaixaInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			operadorCaixaAllColumns,
			operadorCaixaColumnsWithDefault,
			operadorCaixaColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(operadorCaixaType, operadorCaixaMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(operadorCaixaType, operadorCaixaMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"operadores_caixa\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"operadores_caixa\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into operadores_caixa")
	}

	if !cached {
		operadorCaixaInsertCacheMut.Lock()
		operadorCaixaInsertCache[key] = cache
		operadorCaixaInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OperadorCaixa.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OperadorCaixa) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	operadorCaixaUpdateCacheMut.RLock()
	cache, cached := operadorCaixaUpdateCache[key]
	operadorCaixaUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			operadorCaixaAllColumns,
			operadorCaixaPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update operadores_caixa, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"operadores_caixa\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, operadorCaixaPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(operadorCaixaType, operadorCaixaMapping, append(wl, operadorCaixaPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update operadores_caixa row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for operadores_caixa")
	}

	if !cached {
		operadorCaixaUpdateCacheMut.Lock()
		operadorCaixaUpdateCache[key] = cache
		operadorCaixaUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q operadorCaixaQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for operadores_caixa")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for operadores_caixa")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OperadorCaixaSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), operadorCaixaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"operadores_caixa\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, operadorCaixaPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in operadorCaixa slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all operadorCaixa")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OperadorCaixa) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no operadores_caixa provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(operadorCaixaColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	operadorCaixaUpsertCacheMut.RLock()
	cache, cached := operadorCaixaUpsertCache[key]
	operadorCaixaUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			operadorCaixaAllColumns,
			operadorCaixaColumnsWithDefault,
			operadorCaixaColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			operadorCaixaAllColumns,
			operadorCaixaPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert operadores_caixa, could not build update column list")
		}

		ret := strmangle.SetComplement(operadorCaixaAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(operadorCaixaPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert operadores_caixa, could not build conflict column list")
			}

			conflict = make([]string, len(operadorCaixaPrimaryKeyColumns))
			copy(conflict, operadorCaixaPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"operadores_caixa\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(operadorCaixaType, operadorCaixaMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(operadorCaixaType, operadorCaixaMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert operadores_caixa")
	}

	if !cached {
		operadorCaixaUpsertCacheMut.Lock()
		operadorCaixaUpsertCache[key] = cache
		operadorCaixaUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OperadorCaixa record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OperadorCaixa) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no OperadorCaixa provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), operadorCaixaPrimaryKeyMapping)
	sql := "DELETE FROM \"operadores_caixa\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from operadores_caixa")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for operadores_caixa")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q operadorCaixaQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no operadorCaixaQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from operadores_caixa")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for operadores_caixa")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OperadorCaixaSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(operadorCaixaBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), operadorCaixaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"operadores_caixa\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, operadorCaixaPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from operadorCaixa slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for operadores_caixa")
	}

	if len(operadorCaixaAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OperadorCaixa) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOperadorCaixa(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OperadorCaixaSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OperadorCaixaSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), operadorCaixaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"operadores_caixa\".* FROM \"operadores_caixa\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, operadorCaixaPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in OperadorCaixaSlice")
	}

	*o = slice

	return nil
}

// OperadorCaixaExists checks if the OperadorCaixa row exists.
func OperadorCaixaExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"operadores_caixa\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if operadores_caixa exists")
	}

	return exists, nil
}

// Exists checks if the OperadorCaixa row exists.
func (o *OperadorCaixa) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OperadorCaixaExists(ctx, exec, o.ID)
}
