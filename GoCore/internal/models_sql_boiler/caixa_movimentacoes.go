// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models_sql_boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CaixaMovimentacao is an object representing the database table.
type CaixaMovimentacao struct {
	ID      string `boil:"id" json:"id" toml:"id" yaml:"id"`
	SeqID   int64  `boil:"seq_id" json:"seq_id" toml:"seq_id" yaml:"seq_id"`
	IDCaixa string `boil:"id_caixa" json:"id_caixa" toml:"id_caixa" yaml:"id_caixa"`
	// S=Sangria (sa√≠da), U=Suprimento (entrada), P=Pagamento (entrada)
	Tipo             string        `boil:"tipo" json:"tipo" toml:"tipo" yaml:"tipo"`
	IDFormaPagamento null.Int16    `boil:"id_forma_pagamento" json:"id_forma_pagamento,omitempty" toml:"id_forma_pagamento" yaml:"id_forma_pagamento,omitempty"`
	Valor            types.Decimal `boil:"valor" json:"valor" toml:"valor" yaml:"valor"`
	Observacao       null.String   `boil:"observacao" json:"observacao,omitempty" toml:"observacao" yaml:"observacao,omitempty"`
	IDPagamento      null.String   `boil:"id_pagamento" json:"id_pagamento,omitempty" toml:"id_pagamento" yaml:"id_pagamento,omitempty"`
	AutorizadoPor    null.String   `boil:"autorizado_por" json:"autorizado_por,omitempty" toml:"autorizado_por" yaml:"autorizado_por,omitempty"`
	CreatedAt        time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt        null.Time     `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *caixaMovimentacaoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L caixaMovimentacaoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CaixaMovimentacaoColumns = struct {
	ID               string
	SeqID            string
	IDCaixa          string
	Tipo             string
	IDFormaPagamento string
	Valor            string
	Observacao       string
	IDPagamento      string
	AutorizadoPor    string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "id",
	SeqID:            "seq_id",
	IDCaixa:          "id_caixa",
	Tipo:             "tipo",
	IDFormaPagamento: "id_forma_pagamento",
	Valor:            "valor",
	Observacao:       "observacao",
	IDPagamento:      "id_pagamento",
	AutorizadoPor:    "autorizado_por",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	DeletedAt:        "deleted_at",
}

var CaixaMovimentacaoTableColumns = struct {
	ID               string
	SeqID            string
	IDCaixa          string
	Tipo             string
	IDFormaPagamento string
	Valor            string
	Observacao       string
	IDPagamento      string
	AutorizadoPor    string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "caixa_movimentacoes.id",
	SeqID:            "caixa_movimentacoes.seq_id",
	IDCaixa:          "caixa_movimentacoes.id_caixa",
	Tipo:             "caixa_movimentacoes.tipo",
	IDFormaPagamento: "caixa_movimentacoes.id_forma_pagamento",
	Valor:            "caixa_movimentacoes.valor",
	Observacao:       "caixa_movimentacoes.observacao",
	IDPagamento:      "caixa_movimentacoes.id_pagamento",
	AutorizadoPor:    "caixa_movimentacoes.autorizado_por",
	CreatedAt:        "caixa_movimentacoes.created_at",
	UpdatedAt:        "caixa_movimentacoes.updated_at",
	DeletedAt:        "caixa_movimentacoes.deleted_at",
}

// Generated where

type whereHelpernull_Int16 struct{ field string }

func (w whereHelpernull_Int16) EQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int16) NEQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int16) LT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int16) LTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int16) GT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int16) GTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int16) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int16) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CaixaMovimentacaoWhere = struct {
	ID               whereHelperstring
	SeqID            whereHelperint64
	IDCaixa          whereHelperstring
	Tipo             whereHelperstring
	IDFormaPagamento whereHelpernull_Int16
	Valor            whereHelpertypes_Decimal
	Observacao       whereHelpernull_String
	IDPagamento      whereHelpernull_String
	AutorizadoPor    whereHelpernull_String
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	DeletedAt        whereHelpernull_Time
}{
	ID:               whereHelperstring{field: "\"caixa_movimentacoes\".\"id\""},
	SeqID:            whereHelperint64{field: "\"caixa_movimentacoes\".\"seq_id\""},
	IDCaixa:          whereHelperstring{field: "\"caixa_movimentacoes\".\"id_caixa\""},
	Tipo:             whereHelperstring{field: "\"caixa_movimentacoes\".\"tipo\""},
	IDFormaPagamento: whereHelpernull_Int16{field: "\"caixa_movimentacoes\".\"id_forma_pagamento\""},
	Valor:            whereHelpertypes_Decimal{field: "\"caixa_movimentacoes\".\"valor\""},
	Observacao:       whereHelpernull_String{field: "\"caixa_movimentacoes\".\"observacao\""},
	IDPagamento:      whereHelpernull_String{field: "\"caixa_movimentacoes\".\"id_pagamento\""},
	AutorizadoPor:    whereHelpernull_String{field: "\"caixa_movimentacoes\".\"autorizado_por\""},
	CreatedAt:        whereHelpertime_Time{field: "\"caixa_movimentacoes\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"caixa_movimentacoes\".\"updated_at\""},
	DeletedAt:        whereHelpernull_Time{field: "\"caixa_movimentacoes\".\"deleted_at\""},
}

// CaixaMovimentacaoRels is where relationship names are stored.
var CaixaMovimentacaoRels = struct {
	AutorizadoPorUser               string
	IDCaixaCaixas                   string
	IDFormaPagamentoFormasPagamento string
	IDPagamentoPedidoPagamento      string
}{
	AutorizadoPorUser:               "AutorizadoPorUser",
	IDCaixaCaixas:                   "IDCaixaCaixas",
	IDFormaPagamentoFormasPagamento: "IDFormaPagamentoFormasPagamento",
	IDPagamentoPedidoPagamento:      "IDPagamentoPedidoPagamento",
}

// caixaMovimentacaoR is where relationships are stored.
type caixaMovimentacaoR struct {
	AutorizadoPorUser               *User            `boil:"AutorizadoPorUser" json:"AutorizadoPorUser" toml:"AutorizadoPorUser" yaml:"AutorizadoPorUser"`
	IDCaixaCaixas                   *Caixa           `boil:"IDCaixaCaixas" json:"IDCaixaCaixas" toml:"IDCaixaCaixas" yaml:"IDCaixaCaixas"`
	IDFormaPagamentoFormasPagamento *FormaPagamento  `boil:"IDFormaPagamentoFormasPagamento" json:"IDFormaPagamentoFormasPagamento" toml:"IDFormaPagamentoFormasPagamento" yaml:"IDFormaPagamentoFormasPagamento"`
	IDPagamentoPedidoPagamento      *PedidoPagamento `boil:"IDPagamentoPedidoPagamento" json:"IDPagamentoPedidoPagamento" toml:"IDPagamentoPedidoPagamento" yaml:"IDPagamentoPedidoPagamento"`
}

// NewStruct creates a new relationship struct
func (*caixaMovimentacaoR) NewStruct() *caixaMovimentacaoR {
	return &caixaMovimentacaoR{}
}

func (r *caixaMovimentacaoR) GetAutorizadoPorUser() *User {
	if r == nil {
		return nil
	}
	return r.AutorizadoPorUser
}

func (r *caixaMovimentacaoR) GetIDCaixaCaixas() *Caixa {
	if r == nil {
		return nil
	}
	return r.IDCaixaCaixas
}

func (r *caixaMovimentacaoR) GetIDFormaPagamentoFormasPagamento() *FormaPagamento {
	if r == nil {
		return nil
	}
	return r.IDFormaPagamentoFormasPagamento
}

func (r *caixaMovimentacaoR) GetIDPagamentoPedidoPagamento() *PedidoPagamento {
	if r == nil {
		return nil
	}
	return r.IDPagamentoPedidoPagamento
}

// caixaMovimentacaoL is where Load methods for each relationship are stored.
type caixaMovimentacaoL struct{}

var (
	caixaMovimentacaoAllColumns            = []string{"id", "seq_id", "id_caixa", "tipo", "id_forma_pagamento", "valor", "observacao", "id_pagamento", "autorizado_por", "created_at", "updated_at", "deleted_at"}
	caixaMovimentacaoColumnsWithoutDefault = []string{"id_caixa", "tipo", "valor"}
	caixaMovimentacaoColumnsWithDefault    = []string{"id", "seq_id", "id_forma_pagamento", "observacao", "id_pagamento", "autorizado_por", "created_at", "updated_at", "deleted_at"}
	caixaMovimentacaoPrimaryKeyColumns     = []string{"id"}
	caixaMovimentacaoGeneratedColumns      = []string{}
)

type (
	// CaixaMovimentacaoSlice is an alias for a slice of pointers to CaixaMovimentacao.
	// This should almost always be used instead of []CaixaMovimentacao.
	CaixaMovimentacaoSlice []*CaixaMovimentacao
	// CaixaMovimentacaoHook is the signature for custom CaixaMovimentacao hook methods
	CaixaMovimentacaoHook func(context.Context, boil.ContextExecutor, *CaixaMovimentacao) error

	caixaMovimentacaoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	caixaMovimentacaoType                 = reflect.TypeOf(&CaixaMovimentacao{})
	caixaMovimentacaoMapping              = queries.MakeStructMapping(caixaMovimentacaoType)
	caixaMovimentacaoPrimaryKeyMapping, _ = queries.BindMapping(caixaMovimentacaoType, caixaMovimentacaoMapping, caixaMovimentacaoPrimaryKeyColumns)
	caixaMovimentacaoInsertCacheMut       sync.RWMutex
	caixaMovimentacaoInsertCache          = make(map[string]insertCache)
	caixaMovimentacaoUpdateCacheMut       sync.RWMutex
	caixaMovimentacaoUpdateCache          = make(map[string]updateCache)
	caixaMovimentacaoUpsertCacheMut       sync.RWMutex
	caixaMovimentacaoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var caixaMovimentacaoAfterSelectMu sync.Mutex
var caixaMovimentacaoAfterSelectHooks []CaixaMovimentacaoHook

var caixaMovimentacaoBeforeInsertMu sync.Mutex
var caixaMovimentacaoBeforeInsertHooks []CaixaMovimentacaoHook
var caixaMovimentacaoAfterInsertMu sync.Mutex
var caixaMovimentacaoAfterInsertHooks []CaixaMovimentacaoHook

var caixaMovimentacaoBeforeUpdateMu sync.Mutex
var caixaMovimentacaoBeforeUpdateHooks []CaixaMovimentacaoHook
var caixaMovimentacaoAfterUpdateMu sync.Mutex
var caixaMovimentacaoAfterUpdateHooks []CaixaMovimentacaoHook

var caixaMovimentacaoBeforeDeleteMu sync.Mutex
var caixaMovimentacaoBeforeDeleteHooks []CaixaMovimentacaoHook
var caixaMovimentacaoAfterDeleteMu sync.Mutex
var caixaMovimentacaoAfterDeleteHooks []CaixaMovimentacaoHook

var caixaMovimentacaoBeforeUpsertMu sync.Mutex
var caixaMovimentacaoBeforeUpsertHooks []CaixaMovimentacaoHook
var caixaMovimentacaoAfterUpsertMu sync.Mutex
var caixaMovimentacaoAfterUpsertHooks []CaixaMovimentacaoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CaixaMovimentacao) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaMovimentacaoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CaixaMovimentacao) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaMovimentacaoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CaixaMovimentacao) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaMovimentacaoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CaixaMovimentacao) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaMovimentacaoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CaixaMovimentacao) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaMovimentacaoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CaixaMovimentacao) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaMovimentacaoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CaixaMovimentacao) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaMovimentacaoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CaixaMovimentacao) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaMovimentacaoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CaixaMovimentacao) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range caixaMovimentacaoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCaixaMovimentacaoHook registers your hook function for all future operations.
func AddCaixaMovimentacaoHook(hookPoint boil.HookPoint, caixaMovimentacaoHook CaixaMovimentacaoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		caixaMovimentacaoAfterSelectMu.Lock()
		caixaMovimentacaoAfterSelectHooks = append(caixaMovimentacaoAfterSelectHooks, caixaMovimentacaoHook)
		caixaMovimentacaoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		caixaMovimentacaoBeforeInsertMu.Lock()
		caixaMovimentacaoBeforeInsertHooks = append(caixaMovimentacaoBeforeInsertHooks, caixaMovimentacaoHook)
		caixaMovimentacaoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		caixaMovimentacaoAfterInsertMu.Lock()
		caixaMovimentacaoAfterInsertHooks = append(caixaMovimentacaoAfterInsertHooks, caixaMovimentacaoHook)
		caixaMovimentacaoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		caixaMovimentacaoBeforeUpdateMu.Lock()
		caixaMovimentacaoBeforeUpdateHooks = append(caixaMovimentacaoBeforeUpdateHooks, caixaMovimentacaoHook)
		caixaMovimentacaoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		caixaMovimentacaoAfterUpdateMu.Lock()
		caixaMovimentacaoAfterUpdateHooks = append(caixaMovimentacaoAfterUpdateHooks, caixaMovimentacaoHook)
		caixaMovimentacaoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		caixaMovimentacaoBeforeDeleteMu.Lock()
		caixaMovimentacaoBeforeDeleteHooks = append(caixaMovimentacaoBeforeDeleteHooks, caixaMovimentacaoHook)
		caixaMovimentacaoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		caixaMovimentacaoAfterDeleteMu.Lock()
		caixaMovimentacaoAfterDeleteHooks = append(caixaMovimentacaoAfterDeleteHooks, caixaMovimentacaoHook)
		caixaMovimentacaoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		caixaMovimentacaoBeforeUpsertMu.Lock()
		caixaMovimentacaoBeforeUpsertHooks = append(caixaMovimentacaoBeforeUpsertHooks, caixaMovimentacaoHook)
		caixaMovimentacaoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		caixaMovimentacaoAfterUpsertMu.Lock()
		caixaMovimentacaoAfterUpsertHooks = append(caixaMovimentacaoAfterUpsertHooks, caixaMovimentacaoHook)
		caixaMovimentacaoAfterUpsertMu.Unlock()
	}
}

// One returns a single caixaMovimentacao record from the query.
func (q caixaMovimentacaoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CaixaMovimentacao, error) {
	o := &CaixaMovimentacao{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: failed to execute a one query for caixa_movimentacoes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CaixaMovimentacao records from the query.
func (q caixaMovimentacaoQuery) All(ctx context.Context, exec boil.ContextExecutor) (CaixaMovimentacaoSlice, error) {
	var o []*CaixaMovimentacao

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models_sql_boiler: failed to assign all query results to CaixaMovimentacao slice")
	}

	if len(caixaMovimentacaoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CaixaMovimentacao records in the query.
func (q caixaMovimentacaoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to count caixa_movimentacoes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q caixaMovimentacaoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: failed to check if caixa_movimentacoes exists")
	}

	return count > 0, nil
}

// AutorizadoPorUser pointed to by the foreign key.
func (o *CaixaMovimentacao) AutorizadoPorUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AutorizadoPor),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// IDCaixaCaixas pointed to by the foreign key.
func (o *CaixaMovimentacao) IDCaixaCaixas(mods ...qm.QueryMod) caixaQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDCaixa),
	}

	queryMods = append(queryMods, mods...)

	return Caixas(queryMods...)
}

// IDFormaPagamentoFormasPagamento pointed to by the foreign key.
func (o *CaixaMovimentacao) IDFormaPagamentoFormasPagamento(mods ...qm.QueryMod) formaPagamentoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDFormaPagamento),
	}

	queryMods = append(queryMods, mods...)

	return FormasPagamento(queryMods...)
}

// IDPagamentoPedidoPagamento pointed to by the foreign key.
func (o *CaixaMovimentacao) IDPagamentoPedidoPagamento(mods ...qm.QueryMod) pedidoPagamentoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IDPagamento),
	}

	queryMods = append(queryMods, mods...)

	return PedidoPagamentos(queryMods...)
}

// LoadAutorizadoPorUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (caixaMovimentacaoL) LoadAutorizadoPorUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCaixaMovimentacao interface{}, mods queries.Applicator) error {
	var slice []*CaixaMovimentacao
	var object *CaixaMovimentacao

	if singular {
		var ok bool
		object, ok = maybeCaixaMovimentacao.(*CaixaMovimentacao)
		if !ok {
			object = new(CaixaMovimentacao)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCaixaMovimentacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCaixaMovimentacao))
			}
		}
	} else {
		s, ok := maybeCaixaMovimentacao.(*[]*CaixaMovimentacao)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCaixaMovimentacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCaixaMovimentacao))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &caixaMovimentacaoR{}
		}
		if !queries.IsNil(object.AutorizadoPor) {
			args[object.AutorizadoPor] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &caixaMovimentacaoR{}
			}

			if !queries.IsNil(obj.AutorizadoPor) {
				args[obj.AutorizadoPor] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AutorizadoPorUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.AutorizadoPorCaixaMovimentacoes = append(foreign.R.AutorizadoPorCaixaMovimentacoes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AutorizadoPor, foreign.ID) {
				local.R.AutorizadoPorUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.AutorizadoPorCaixaMovimentacoes = append(foreign.R.AutorizadoPorCaixaMovimentacoes, local)
				break
			}
		}
	}

	return nil
}

// LoadIDCaixaCaixas allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (caixaMovimentacaoL) LoadIDCaixaCaixas(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCaixaMovimentacao interface{}, mods queries.Applicator) error {
	var slice []*CaixaMovimentacao
	var object *CaixaMovimentacao

	if singular {
		var ok bool
		object, ok = maybeCaixaMovimentacao.(*CaixaMovimentacao)
		if !ok {
			object = new(CaixaMovimentacao)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCaixaMovimentacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCaixaMovimentacao))
			}
		}
	} else {
		s, ok := maybeCaixaMovimentacao.(*[]*CaixaMovimentacao)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCaixaMovimentacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCaixaMovimentacao))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &caixaMovimentacaoR{}
		}
		args[object.IDCaixa] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &caixaMovimentacaoR{}
			}

			args[obj.IDCaixa] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`caixas`),
		qm.WhereIn(`caixas.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Caixa")
	}

	var resultSlice []*Caixa
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Caixa")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for caixas")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for caixas")
	}

	if len(caixaAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDCaixaCaixas = foreign
		if foreign.R == nil {
			foreign.R = &caixaR{}
		}
		foreign.R.IDCaixaCaixaMovimentacoes = append(foreign.R.IDCaixaCaixaMovimentacoes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IDCaixa == foreign.ID {
				local.R.IDCaixaCaixas = foreign
				if foreign.R == nil {
					foreign.R = &caixaR{}
				}
				foreign.R.IDCaixaCaixaMovimentacoes = append(foreign.R.IDCaixaCaixaMovimentacoes, local)
				break
			}
		}
	}

	return nil
}

// LoadIDFormaPagamentoFormasPagamento allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (caixaMovimentacaoL) LoadIDFormaPagamentoFormasPagamento(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCaixaMovimentacao interface{}, mods queries.Applicator) error {
	var slice []*CaixaMovimentacao
	var object *CaixaMovimentacao

	if singular {
		var ok bool
		object, ok = maybeCaixaMovimentacao.(*CaixaMovimentacao)
		if !ok {
			object = new(CaixaMovimentacao)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCaixaMovimentacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCaixaMovimentacao))
			}
		}
	} else {
		s, ok := maybeCaixaMovimentacao.(*[]*CaixaMovimentacao)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCaixaMovimentacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCaixaMovimentacao))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &caixaMovimentacaoR{}
		}
		if !queries.IsNil(object.IDFormaPagamento) {
			args[object.IDFormaPagamento] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &caixaMovimentacaoR{}
			}

			if !queries.IsNil(obj.IDFormaPagamento) {
				args[obj.IDFormaPagamento] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`formas_pagamento`),
		qm.WhereIn(`formas_pagamento.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load FormaPagamento")
	}

	var resultSlice []*FormaPagamento
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice FormaPagamento")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for formas_pagamento")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for formas_pagamento")
	}

	if len(formaPagamentoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDFormaPagamentoFormasPagamento = foreign
		if foreign.R == nil {
			foreign.R = &formaPagamentoR{}
		}
		foreign.R.IDFormaPagamentoCaixaMovimentacoes = append(foreign.R.IDFormaPagamentoCaixaMovimentacoes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IDFormaPagamento, foreign.ID) {
				local.R.IDFormaPagamentoFormasPagamento = foreign
				if foreign.R == nil {
					foreign.R = &formaPagamentoR{}
				}
				foreign.R.IDFormaPagamentoCaixaMovimentacoes = append(foreign.R.IDFormaPagamentoCaixaMovimentacoes, local)
				break
			}
		}
	}

	return nil
}

// LoadIDPagamentoPedidoPagamento allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (caixaMovimentacaoL) LoadIDPagamentoPedidoPagamento(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCaixaMovimentacao interface{}, mods queries.Applicator) error {
	var slice []*CaixaMovimentacao
	var object *CaixaMovimentacao

	if singular {
		var ok bool
		object, ok = maybeCaixaMovimentacao.(*CaixaMovimentacao)
		if !ok {
			object = new(CaixaMovimentacao)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCaixaMovimentacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCaixaMovimentacao))
			}
		}
	} else {
		s, ok := maybeCaixaMovimentacao.(*[]*CaixaMovimentacao)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCaixaMovimentacao)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCaixaMovimentacao))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &caixaMovimentacaoR{}
		}
		if !queries.IsNil(object.IDPagamento) {
			args[object.IDPagamento] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &caixaMovimentacaoR{}
			}

			if !queries.IsNil(obj.IDPagamento) {
				args[obj.IDPagamento] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`pedido_pagamentos`),
		qm.WhereIn(`pedido_pagamentos.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PedidoPagamento")
	}

	var resultSlice []*PedidoPagamento
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PedidoPagamento")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pedido_pagamentos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pedido_pagamentos")
	}

	if len(pedidoPagamentoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDPagamentoPedidoPagamento = foreign
		if foreign.R == nil {
			foreign.R = &pedidoPagamentoR{}
		}
		foreign.R.IDPagamentoCaixaMovimentacoes = append(foreign.R.IDPagamentoCaixaMovimentacoes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IDPagamento, foreign.ID) {
				local.R.IDPagamentoPedidoPagamento = foreign
				if foreign.R == nil {
					foreign.R = &pedidoPagamentoR{}
				}
				foreign.R.IDPagamentoCaixaMovimentacoes = append(foreign.R.IDPagamentoCaixaMovimentacoes, local)
				break
			}
		}
	}

	return nil
}

// SetAutorizadoPorUser of the caixaMovimentacao to the related item.
// Sets o.R.AutorizadoPorUser to related.
// Adds o to related.R.AutorizadoPorCaixaMovimentacoes.
func (o *CaixaMovimentacao) SetAutorizadoPorUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"caixa_movimentacoes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"autorizado_por"}),
		strmangle.WhereClause("\"", "\"", 2, caixaMovimentacaoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AutorizadoPor, related.ID)
	if o.R == nil {
		o.R = &caixaMovimentacaoR{
			AutorizadoPorUser: related,
		}
	} else {
		o.R.AutorizadoPorUser = related
	}

	if related.R == nil {
		related.R = &userR{
			AutorizadoPorCaixaMovimentacoes: CaixaMovimentacaoSlice{o},
		}
	} else {
		related.R.AutorizadoPorCaixaMovimentacoes = append(related.R.AutorizadoPorCaixaMovimentacoes, o)
	}

	return nil
}

// RemoveAutorizadoPorUser relationship.
// Sets o.R.AutorizadoPorUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CaixaMovimentacao) RemoveAutorizadoPorUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.AutorizadoPor, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("autorizado_por")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AutorizadoPorUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AutorizadoPorCaixaMovimentacoes {
		if queries.Equal(o.AutorizadoPor, ri.AutorizadoPor) {
			continue
		}

		ln := len(related.R.AutorizadoPorCaixaMovimentacoes)
		if ln > 1 && i < ln-1 {
			related.R.AutorizadoPorCaixaMovimentacoes[i] = related.R.AutorizadoPorCaixaMovimentacoes[ln-1]
		}
		related.R.AutorizadoPorCaixaMovimentacoes = related.R.AutorizadoPorCaixaMovimentacoes[:ln-1]
		break
	}
	return nil
}

// SetIDCaixaCaixas of the caixaMovimentacao to the related item.
// Sets o.R.IDCaixaCaixas to related.
// Adds o to related.R.IDCaixaCaixaMovimentacoes.
func (o *CaixaMovimentacao) SetIDCaixaCaixas(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Caixa) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"caixa_movimentacoes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_caixa"}),
		strmangle.WhereClause("\"", "\"", 2, caixaMovimentacaoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IDCaixa = related.ID
	if o.R == nil {
		o.R = &caixaMovimentacaoR{
			IDCaixaCaixas: related,
		}
	} else {
		o.R.IDCaixaCaixas = related
	}

	if related.R == nil {
		related.R = &caixaR{
			IDCaixaCaixaMovimentacoes: CaixaMovimentacaoSlice{o},
		}
	} else {
		related.R.IDCaixaCaixaMovimentacoes = append(related.R.IDCaixaCaixaMovimentacoes, o)
	}

	return nil
}

// SetIDFormaPagamentoFormasPagamento of the caixaMovimentacao to the related item.
// Sets o.R.IDFormaPagamentoFormasPagamento to related.
// Adds o to related.R.IDFormaPagamentoCaixaMovimentacoes.
func (o *CaixaMovimentacao) SetIDFormaPagamentoFormasPagamento(ctx context.Context, exec boil.ContextExecutor, insert bool, related *FormaPagamento) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"caixa_movimentacoes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_forma_pagamento"}),
		strmangle.WhereClause("\"", "\"", 2, caixaMovimentacaoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IDFormaPagamento, related.ID)
	if o.R == nil {
		o.R = &caixaMovimentacaoR{
			IDFormaPagamentoFormasPagamento: related,
		}
	} else {
		o.R.IDFormaPagamentoFormasPagamento = related
	}

	if related.R == nil {
		related.R = &formaPagamentoR{
			IDFormaPagamentoCaixaMovimentacoes: CaixaMovimentacaoSlice{o},
		}
	} else {
		related.R.IDFormaPagamentoCaixaMovimentacoes = append(related.R.IDFormaPagamentoCaixaMovimentacoes, o)
	}

	return nil
}

// RemoveIDFormaPagamentoFormasPagamento relationship.
// Sets o.R.IDFormaPagamentoFormasPagamento to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CaixaMovimentacao) RemoveIDFormaPagamentoFormasPagamento(ctx context.Context, exec boil.ContextExecutor, related *FormaPagamento) error {
	var err error

	queries.SetScanner(&o.IDFormaPagamento, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("id_forma_pagamento")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IDFormaPagamentoFormasPagamento = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IDFormaPagamentoCaixaMovimentacoes {
		if queries.Equal(o.IDFormaPagamento, ri.IDFormaPagamento) {
			continue
		}

		ln := len(related.R.IDFormaPagamentoCaixaMovimentacoes)
		if ln > 1 && i < ln-1 {
			related.R.IDFormaPagamentoCaixaMovimentacoes[i] = related.R.IDFormaPagamentoCaixaMovimentacoes[ln-1]
		}
		related.R.IDFormaPagamentoCaixaMovimentacoes = related.R.IDFormaPagamentoCaixaMovimentacoes[:ln-1]
		break
	}
	return nil
}

// SetIDPagamentoPedidoPagamento of the caixaMovimentacao to the related item.
// Sets o.R.IDPagamentoPedidoPagamento to related.
// Adds o to related.R.IDPagamentoCaixaMovimentacoes.
func (o *CaixaMovimentacao) SetIDPagamentoPedidoPagamento(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PedidoPagamento) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"caixa_movimentacoes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id_pagamento"}),
		strmangle.WhereClause("\"", "\"", 2, caixaMovimentacaoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IDPagamento, related.ID)
	if o.R == nil {
		o.R = &caixaMovimentacaoR{
			IDPagamentoPedidoPagamento: related,
		}
	} else {
		o.R.IDPagamentoPedidoPagamento = related
	}

	if related.R == nil {
		related.R = &pedidoPagamentoR{
			IDPagamentoCaixaMovimentacoes: CaixaMovimentacaoSlice{o},
		}
	} else {
		related.R.IDPagamentoCaixaMovimentacoes = append(related.R.IDPagamentoCaixaMovimentacoes, o)
	}

	return nil
}

// RemoveIDPagamentoPedidoPagamento relationship.
// Sets o.R.IDPagamentoPedidoPagamento to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CaixaMovimentacao) RemoveIDPagamentoPedidoPagamento(ctx context.Context, exec boil.ContextExecutor, related *PedidoPagamento) error {
	var err error

	queries.SetScanner(&o.IDPagamento, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("id_pagamento")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IDPagamentoPedidoPagamento = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IDPagamentoCaixaMovimentacoes {
		if queries.Equal(o.IDPagamento, ri.IDPagamento) {
			continue
		}

		ln := len(related.R.IDPagamentoCaixaMovimentacoes)
		if ln > 1 && i < ln-1 {
			related.R.IDPagamentoCaixaMovimentacoes[i] = related.R.IDPagamentoCaixaMovimentacoes[ln-1]
		}
		related.R.IDPagamentoCaixaMovimentacoes = related.R.IDPagamentoCaixaMovimentacoes[:ln-1]
		break
	}
	return nil
}

// CaixaMovimentacoes retrieves all the records using an executor.
func CaixaMovimentacoes(mods ...qm.QueryMod) caixaMovimentacaoQuery {
	mods = append(mods, qm.From("\"caixa_movimentacoes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"caixa_movimentacoes\".*"})
	}

	return caixaMovimentacaoQuery{q}
}

// FindCaixaMovimentacao retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCaixaMovimentacao(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CaixaMovimentacao, error) {
	caixaMovimentacaoObj := &CaixaMovimentacao{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"caixa_movimentacoes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, caixaMovimentacaoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models_sql_boiler: unable to select from caixa_movimentacoes")
	}

	if err = caixaMovimentacaoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return caixaMovimentacaoObj, err
	}

	return caixaMovimentacaoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CaixaMovimentacao) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models_sql_boiler: no caixa_movimentacoes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(caixaMovimentacaoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	caixaMovimentacaoInsertCacheMut.RLock()
	cache, cached := caixaMovimentacaoInsertCache[key]
	caixaMovimentacaoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			caixaMovimentacaoAllColumns,
			caixaMovimentacaoColumnsWithDefault,
			caixaMovimentacaoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(caixaMovimentacaoType, caixaMovimentacaoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(caixaMovimentacaoType, caixaMovimentacaoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"caixa_movimentacoes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"caixa_movimentacoes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to insert into caixa_movimentacoes")
	}

	if !cached {
		caixaMovimentacaoInsertCacheMut.Lock()
		caixaMovimentacaoInsertCache[key] = cache
		caixaMovimentacaoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CaixaMovimentacao.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CaixaMovimentacao) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	caixaMovimentacaoUpdateCacheMut.RLock()
	cache, cached := caixaMovimentacaoUpdateCache[key]
	caixaMovimentacaoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			caixaMovimentacaoAllColumns,
			caixaMovimentacaoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models_sql_boiler: unable to update caixa_movimentacoes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"caixa_movimentacoes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, caixaMovimentacaoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(caixaMovimentacaoType, caixaMovimentacaoMapping, append(wl, caixaMovimentacaoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update caixa_movimentacoes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by update for caixa_movimentacoes")
	}

	if !cached {
		caixaMovimentacaoUpdateCacheMut.Lock()
		caixaMovimentacaoUpdateCache[key] = cache
		caixaMovimentacaoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q caixaMovimentacaoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all for caixa_movimentacoes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected for caixa_movimentacoes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CaixaMovimentacaoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models_sql_boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), caixaMovimentacaoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"caixa_movimentacoes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, caixaMovimentacaoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to update all in caixaMovimentacao slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to retrieve rows affected all in update all caixaMovimentacao")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CaixaMovimentacao) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models_sql_boiler: no caixa_movimentacoes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(caixaMovimentacaoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	caixaMovimentacaoUpsertCacheMut.RLock()
	cache, cached := caixaMovimentacaoUpsertCache[key]
	caixaMovimentacaoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			caixaMovimentacaoAllColumns,
			caixaMovimentacaoColumnsWithDefault,
			caixaMovimentacaoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			caixaMovimentacaoAllColumns,
			caixaMovimentacaoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models_sql_boiler: unable to upsert caixa_movimentacoes, could not build update column list")
		}

		ret := strmangle.SetComplement(caixaMovimentacaoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(caixaMovimentacaoPrimaryKeyColumns) == 0 {
				return errors.New("models_sql_boiler: unable to upsert caixa_movimentacoes, could not build conflict column list")
			}

			conflict = make([]string, len(caixaMovimentacaoPrimaryKeyColumns))
			copy(conflict, caixaMovimentacaoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"caixa_movimentacoes\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(caixaMovimentacaoType, caixaMovimentacaoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(caixaMovimentacaoType, caixaMovimentacaoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to upsert caixa_movimentacoes")
	}

	if !cached {
		caixaMovimentacaoUpsertCacheMut.Lock()
		caixaMovimentacaoUpsertCache[key] = cache
		caixaMovimentacaoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CaixaMovimentacao record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CaixaMovimentacao) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models_sql_boiler: no CaixaMovimentacao provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), caixaMovimentacaoPrimaryKeyMapping)
	sql := "DELETE FROM \"caixa_movimentacoes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete from caixa_movimentacoes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by delete for caixa_movimentacoes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q caixaMovimentacaoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models_sql_boiler: no caixaMovimentacaoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from caixa_movimentacoes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for caixa_movimentacoes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CaixaMovimentacaoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(caixaMovimentacaoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), caixaMovimentacaoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"caixa_movimentacoes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, caixaMovimentacaoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: unable to delete all from caixaMovimentacao slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models_sql_boiler: failed to get rows affected by deleteall for caixa_movimentacoes")
	}

	if len(caixaMovimentacaoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CaixaMovimentacao) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCaixaMovimentacao(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CaixaMovimentacaoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CaixaMovimentacaoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), caixaMovimentacaoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"caixa_movimentacoes\".* FROM \"caixa_movimentacoes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, caixaMovimentacaoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models_sql_boiler: unable to reload all in CaixaMovimentacaoSlice")
	}

	*o = slice

	return nil
}

// CaixaMovimentacaoExists checks if the CaixaMovimentacao row exists.
func CaixaMovimentacaoExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"caixa_movimentacoes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models_sql_boiler: unable to check if caixa_movimentacoes exists")
	}

	return exists, nil
}

// Exists checks if the CaixaMovimentacao row exists.
func (o *CaixaMovimentacao) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CaixaMovimentacaoExists(ctx, exec, o.ID)
}
